[{"id":0,"href":"/menu/","title":"Menu","section":"Junghanacs's Home","content":" Articles Notes References Terms Dotfiles dot-emacs "},{"id":1,"href":"/refs/StoringGlossaryTerms2022/","title":"Jeremy Friesen :: On Storing Glossary Terms in Org Roam Nodes (2022)🌱","section":"References","content":" Jeremy 는 정말 뛰어난 텍스트 마스터다. 실제로도 지식 정보 관리 분야에서 일하고 있다. 앞으로도 많이 다루겠지만 일단 샘플로 하나 시작한다. 원문은 다음 주소에서 볼 수 있다 1. 서지 정보는 다음과 같다. [1]\nJunghanacs: Junghan 하던 것 부터 마무리 하고 돌아오시게! Junghan: 아 알겠네! ㅎㅎ\n나의 생각 : 작업 중 # On Storing Glossary Terms in Org Roam Nodes // Take on Rules\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":2,"href":"/refs/UseGNUEmacs/","title":"Keith Waclena :: Use GNU Emacs - The Plain Text Computing Environment🌱","section":"References","content":" 마스터피스! 일단 소개만 다루자. 세부 내용은 다루려면 너무 많다. 원문 링크는 다음과 같다 1. PDF 파일로도 다운 받을 수 있다 (600 페이지) 2.\nUse GNU Emacs\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://www2.lib.uchicago.edu/keith/emacs/emacs-tutorial.pdf\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":3,"href":"/terms/glossary/","title":"Glossary","section":"Terms","content":" 테스트 중 Try using Org Glossary for all your glosses, acronyms, and more within your favourite ML with a unicorn mascot. It attempts to provide powerful functionality, in keeping with the simplicity of the Org ML we all know and love. Org mode 는 사랑입니다.\nDetails Glossary The term is transformed to the same text, but linking to the definition. Acronyms The first use of the term adds the definition in parentheses, and subsequent uses simply link to the definition (behaving the same as glossary terms). Index The term is unchanged (the entire purpose of the index is achieved via step 3. alone). Text Substitutions The term is replaced with its definition. 1 2 3 4 5 마크다운으로 이렇게 들어가네! ## Glossary {#glossary} **\u0026lt;span class=\u0026#34;org-glsdef\u0026#34; id=\u0026#34;gls.2\u0026#34;\u0026gt;Emacs\u0026lt;/span\u0026gt;**\u0026amp;emsp;A lisp-based generic user-centric text manipulation environment that masquerades as a text editor.\u0026amp;ensp;\u0026lt;a class=\u0026#34;org-glsdef\u0026#34; href=\u0026#34;#glsr.2.1\u0026#34;\u0026gt;1\u0026lt;/a\u0026gt; How-to # 1 2 - TERM :: DEFINITION - SINGULAR KEY, PLURAL KEY = SINGULAR FORM, PLURAL FORM :: DEFINITION "},{"id":4,"href":"/posts/building_my_first_emacs_configs_for_writing_and_publishing/","title":"Building my first Emacs for Writing and Publishing🌱","section":"Articles","content":" 이맥스 미니멀리즘. 한 자리에서 이맥스 설치부터 블로깅까지 한 번에. 설정도 다 걷어 내고 직접 다룰 수 있는 수준의 것만 본인이 직접 다 해보도록. 따라해보기! Junghanacs : \u0026ldquo;Junghan! 너 왜 따른 길로 빠지려는 거니?! 이건 언제든지 할 수 있잖아. 할 수 있는 모든 것을 정리하는 게 먼저야. 너의 이맥스가 한글 글쓰기를 위해서 할 수 있는 그 모든 것. 너가 생각해온 모든 그림을 차근히 풀어가봐. 이건 시기가 오면 한 나절이면 할 수 있어.\u0026rdquo;\nJunghan : \u0026ldquo;맞아. 그래. 본짓은 이게 아니야. 일단 포스팅은 해놓을게!\u0026rdquo;\nGOAL # 이맥스를 배우는데 왕도가 없다. 물론 쉬운 길은 있다. 지나고 보면 알게 된다. 모든 일이 그렇다. 처음에 기대를 줄이면 더 쉽다. 더 많은 것을 알고 시작할 수는 없다. 너무 많기 때문이다. 일단 시작해보고 마우스도 눌러보고 방향키도 쓰면서라도 핵심 기능을 사용하면 된다.\n핵심 무엇인 핵심인가? 글쓰기 플랫폼으로 안착시키는 것이다. 노트를 작성하는 것이다. 그리고 한 방에 블로그로 내보내기까지 해보는 것이다. 노트 작성이라고 하면 옵시디언이나 로그시크를 생각하면 되겠다. 굳이 그 쪽에 들릴 필요가 없다. 한 방에 이맥스로 정착을 하고 하는 김에 블로그도 관리하는 것이다.\n나는 개발자인데?! 장기적인 관점에서 이맥스를 개발 툴로 사용하고 싶다면 VSpaceCode 를 사용하면 된다. 즉, 글쓰기 플랫폼은 Spacemacs 기반의 나의 가이드로 일단 시작하고 개발은 당장 이맥스로 오면 개발하기가 더 어려울 것이니 VSpaceCode 로 징검다리를 놓는 것이다. 터미널 유저라면 SpaceVim 도 좋다.\n나는 아래 스크린샷과 같이 다 사용하고 있다. 왼쪽부터 나의 글쓰기와 모든 워크플로우를 담당하는 Spacemacs 이맥스가 있다. 이 녀석은 혼자서 다 할 수 있다. 엄청난 녀석이다. 다만, 거칠다. 다루기가 어렵다. 가운데 VSpaceCode 는 VSCODE 에 플러그인을 설치한 것이다. 아주 똑똑한 녀석이다. 알아서 다 해주는 데다가 재빠르기까지 하다. 그리고 마지막으로 SpaceVim 이다. NVIM 과 궁합이 잘 맞는다. 설정 파일에 몇 라인만 적어 주면 못하는 일이 없다. 모두 SPACE 를 누르면 아래와 같이 메뉴가 열린다. 그리고 필요한 기능을 찾아가서 하면 된다. 약간 다르기도 하지만 맥락에서는 같다. 같은 방식이다.\nFigure 1: Spacemacs / VSpaceCode / SpaceVim 의 SPC 메뉴\n"},{"id":5,"href":"/notes/emacselementsEnhancedImageFeatures2023/","title":"Changes in Emacs 29 and Emacs Elements 🌿","section":"Notes","content":" Emacs Elements 는 올해 나에게 가장 도움이 많이 된 Emacs 유튜브 채널이다. 그 중에서도 \u0026ldquo;Changes in Emacs 29\u0026rdquo; 과 PDF 활용법, Emacs 설치 방법 등은 아주 유용한 최신 팁이다. 다음은 Emacs Elements 의 글과 영상을 번역한 것이다.\nEmacs Elements 소개 # Emacs Elements is a channel that focuses on getting Vanilla Emacs to work powerfully for you. How can I get things done in Emacs? Emacs is the world\u0026rsquo;s most powerful text editor, and can be overwhelming for beginners. I show you how you can be up and running in a moment without too much difficulty. Emacs Elements Youtube 를 가보면 많은 영상이 있다 1. 이 분은 올해 초부터 Emacs 관련 영상을 올리는 분이신데 이맥스를 아주 오랫동안 사용해 오신 파워 유저다. 내가 파악한 바로는 할아버지다. 얼마 전에 구독자 1000 명 돌파 기념으로 집에서 쿵푸를 시연하셨는데 \u0026ldquo;아뵤아뵤~~\u0026rdquo; 하면서 발차기와 정권 지르기를 봤던 기억이 있다. 지금 보니 숨김 처리를 하신 것 같다.\n이 분은 Emacs 뿐만 아니라 텍스트 에디터 역사를 함께 하신 분이다. Teco 와 같은 고전 에디터 이야기도 하시는 것을 보니 산증인이 아닐까 싶다. 이 분은 Spacemacs, Doom 이런 배포판은 아예 사용한 적도 없으실 거다. 그냥 Emacs 다운 받아서 설정 파일 열고 \u0026ldquo;오늘은 Hydra 를 사용해 볼게요!\u0026rdquo; 하고 키보드 두드린다. Holy-mode 사용자로서 Evil-mode (Vim 바인딩)은 이야기는 기대 하면 안 된다.\n왜 구독해야 하는가? 이런 분들을 구독하다 보면 유튜브에 온통 텍스트 에디터 관련 영상만 나온다. 유튜브를 안 하게 되거나 일취 월장을 하게 될 것이다. 농담이다. 이런 분들을 보면서 이맥스가 지닌 라이프 해킹 도구의 가치를 보게 된다. 이렇게 늙고 싶다. 내가 주목하는 점은 쿵푸 시연이다. 키보드 연속기를 매일 사용하는 게임툴을 계속 사용하다 보면 유태보존 이 자연스럽다. 유쾌한 삶이로다!\nFigure 1: modus-vivendi-tinted themes with org-clock (tab-bar)\nChanges in Emacs 29.1 # ================================ https://github.com/emacs-mirror/emacs/blob/master/etc/NEWS.29 Enhanced Image Features in Emacs 29 - YouTube\n5000 line document\nAhead-of-time native compilation can now be requested using \u0026lsquo;\u0026ndash;with-native-compilation=aot\u0026rsquo; during configuration. This option requests ahead-of-time (AOT) native compilation, which means that all the Lisp files in the Emacs tree will be compiled to native code during the build and installation process.\nSupport for the WebP image format has been added.\nEmacs can be built with pure GTK, allowing it to work on any window system supported by GDK.\nEmacs now supports Unicode Standard version 15.0.\nNew command to change the font size globally. To increase the font size, type \u0026lsquo;C-x C-M-+\u0026rsquo; or \u0026lsquo;C-x C-M-=\u0026rsquo;; to decrease it, type \u0026lsquo;C-x C-M\u0026ndash;\u0026rsquo;; to restore the font size, type \u0026lsquo;C-x C-M-0\u0026rsquo;.\nNew command \u0026lsquo;find-sibling-file\u0026rsquo;. This command jumps to a file considered a \u0026ldquo;sibling file\u0026rdquo;, which is determined according to the new user option \u0026lsquo;find-sibling-rules\u0026rsquo;.\nNew command \u0026lsquo;rename-visited-file\u0026rsquo;. This command renames the file visited by the current buffer by moving it to a new name or location, and also makes the buffer visit this new file.\n\u0026lsquo;delete-process\u0026rsquo; is now a command.\n\u0026lsquo;restart-emacs\u0026rsquo;\n\u0026lsquo;count-words\u0026rsquo; will now report buffer totals if given a prefix. Without a prefix, it will only report the word count for the narrowed part of the buffer.\n\u0026lsquo;count-words\u0026rsquo; will now report sentence count when used interactively.\n\u0026lsquo;write-file\u0026rsquo; will now copy some file mode bits. If the current buffer is visiting a file that is executable, the \u0026lsquo;C-x C-w\u0026rsquo; command will now make the new file executable, too.\nEmacs now has several new methods for inserting Emoji.😀 The Emoji commands are under the new \u0026lsquo;C-x 8 e\u0026rsquo; prefix. New command \u0026rsquo;emoji-insert\u0026rsquo; (bound to \u0026lsquo;C-x 8 e e\u0026rsquo; and \u0026lsquo;C-x 8 e i\u0026rsquo;). New command \u0026rsquo;emoji-recent\u0026rsquo; (bound to \u0026lsquo;C-x 8 e r\u0026rsquo;).\nNew command-line option \u0026lsquo;-r\u0026rsquo;/\u0026rsquo;\u0026ndash;reuse-frame\u0026rsquo; for emacsclient. With this command-line option, Emacs reuses an existing graphical client frame if one exists; otherwise it creates a new frame.\n\u0026lsquo;M-SPC\u0026rsquo; is now bound to \u0026lsquo;cycle-spacing\u0026rsquo;. Formerly it invoked \u0026lsquo;just-one-space\u0026rsquo;. The actions performed by \u0026lsquo;cycle-spacing\u0026rsquo; and their order can now be customised via the user option \u0026lsquo;cycle-spacing-actions\u0026rsquo;.\nNew user option \u0026lsquo;copy-region-blink-predicate\u0026rsquo;. By default, when copying a region with \u0026lsquo;kill-ring-save\u0026rsquo;, Emacs only blinks point and mark when the region is not denoted visually, that is, when either the region is inactive, or the \u0026lsquo;region\u0026rsquo; face is indistinguishable from the \u0026lsquo;default\u0026rsquo; face.\nNew user option \u0026lsquo;dired-free-space\u0026rsquo;. Dired will now, by default, include the free space in the first line instead of having it on a separate line.\ndoc-view can now generate SVG images when viewing PDF files. If Emacs is built with SVG support, doc-view can generate SVG files when using MuPDF as the converter for PDF files, which generally leads to sharper images.\nNew command \u0026lsquo;package-update\u0026rsquo;. This command allows you to upgrade packages without using \u0026lsquo;M-x list-packages\u0026rsquo;.\nNew command \u0026lsquo;package-update-all\u0026rsquo;. This command allows updating all packages without any queries.\nNew commands \u0026lsquo;package-recompile\u0026rsquo; and \u0026lsquo;package-recompile-all\u0026rsquo;. These commands can be useful if the \u0026ldquo;.elc\u0026rdquo; files are out of date (invalid byte code and macros).\nNew command \u0026lsquo;package-vc-install\u0026rsquo;. Packages can now be installed directly from source by cloning from their repository.\nNew command \u0026lsquo;scratch-buffer\u0026rsquo;. This command switches to the \u0026ldquo;scratch\u0026rdquo; buffer. If \u0026ldquo;scratch\u0026rdquo; doesn\u0026rsquo;t exist, the command creates it first. You can use this command if you inadvertently delete the \u0026ldquo;scratch\u0026rdquo; buffer. (global-set-key (kbd \u0026ldquo;\u0026lt;f8\u0026gt;\u0026rdquo;) \u0026lsquo;scratch-buffer)\nNew commands for navigating completions from the minibuffer. When the minibuffer is the current buffer, typing \u0026lsquo;M-\u0026lt;up\u0026gt;\u0026rsquo; or \u0026lsquo;M-\u0026lt;down\u0026gt;\u0026rsquo; selects a previous/next completion candidate from the \u0026ldquo;Completions\u0026rdquo; buffer and inserts it to the minibuffer.\n\u0026lsquo;recentf-mode\u0026rsquo; now uses abbreviated file names by default. This means that e.g. \u0026ldquo;/home/foo/bar\u0026rdquo; is now displayed as \u0026ldquo;~/bar\u0026rdquo;.\nNew command \u0026lsquo;recentf-open\u0026rsquo;. This command prompts for a recently opened file in the minibuffer, and visits it.\nuse-package: Declarative package configuration. use-package is now shipped with Emacs.\nNew commands \u0026lsquo;image-crop\u0026rsquo; and \u0026lsquo;image-cut\u0026rsquo;.\nNew theme \u0026rsquo;leuven-dark\u0026rsquo;.\nEnhanced Image Features in Emacs 29 # ================================= New commands \u0026lsquo;image-crop\u0026rsquo; and \u0026lsquo;image-cut\u0026rsquo;\ni c i x\nimage-dired-slideshow-start\n\u0026lsquo;S\u0026rsquo;\nImage-Dired now displays thumbnails for PDF files\nThe command \u0026lsquo;bookmark-set\u0026rsquo; (bound to \u0026lsquo;C-x r m\u0026rsquo;) is now supported in the thumbnail view\n\u0026lsquo;image-dired-thumb-size\u0026rsquo; increased to 128\nNavigation and marking commands now work in image display buffer. # The following new bindings have been added:\n\u0026rsquo;n\u0026rsquo;, \u0026lsquo;SPC\u0026rsquo; =\u0026gt; \u0026lsquo;image-dired-display-next\u0026rsquo; \u0026lsquo;p\u0026rsquo;, \u0026lsquo;DEL\u0026rsquo; =\u0026gt; \u0026lsquo;image-dired-display-previous\u0026rsquo; \u0026rsquo;m\u0026rsquo; =\u0026gt; \u0026lsquo;image-dired-mark-thumb-original-file\u0026rsquo; \u0026rsquo;d\u0026rsquo; =\u0026gt; \u0026lsquo;image-dired-flag-thumb-original-file\u0026rsquo; \u0026lsquo;u\u0026rsquo; =\u0026gt; \u0026lsquo;image-dired-unmark-thumb-original-file\u0026rsquo; New command \u0026lsquo;image-dired-unmark-all-marks\u0026rsquo;. # It removes all marks from all files in the thumbnail and the associated Dired buffer, and is bound to \u0026lsquo;U\u0026rsquo; in the thumbnail and display buffer.\nNew command \u0026lsquo;image-dired-do-flagged-delete\u0026rsquo;. # It deletes all flagged files, and is bound to \u0026lsquo;x\u0026rsquo; in the thumbnail buffer. It replaces the command \u0026lsquo;image-dired-delete-marked\u0026rsquo;, which is now an obsolete alias.\nPDF support. # Image-Dired now displays thumbnails for PDF files. Type \u0026lsquo;RET\u0026rsquo; on a PDF file in the thumbnail buffer to visit the corresponding PDF.\nPDF Software in Linux # https://youtu.be/C7HWTLXD9L4\nThis video is only partly about Emacs\nReview and a rant\nPDF viewers aplenty: evince, okular, Google Chrome\nOkular helpful for filling out forms and inserting signatures\n(Create your signature in Gimp and make it transparent) gimp 를 설치하라. Okular also is able to read text aloud easily.\nAnother excellent option is xournal++, which also allows one to reorder pages in a pdf, something you cannot do in okular or evince.\nOCR tesseract. Command line tool.\nThis script will convert all pdfs in a given folder to txt\ngImageReader also does this through a graphic user interface, and allows good control.\npdfarranger - rearranges pages\nThe Emacs package pdf-tools can help view, annotate, and bookmark PDFs and teh built in image-dired can sort through PDFs. Its pdf editing capabilities are lacking.\nBut there is a problem: some pdfs are not readable in ANY Linux application e.g. my IRP-5 file One has to use Adobe Acrobat to view the file The only other PDF viewer that will show the file is Master PDF Editor 다운로드 https://code-industry.net/free-pdf-editor/#get\nInstalling a working version of Adobe Reader on Linux is near impossible. Much of the functionality has been removed. You cannot print an abnormal pdf to pdf.\nAdobe Acrobat will not install on Linux and that is by design of Adobe. It is not because wine cannot handle it.\nIt is only available through a Virtual Machine\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 sudo apt install okular okular-extra-backends -y sudo apt install xournalpp -y sudo apt install -y tesseract-ocr tesseract-ocr-kor tesseract-ocr-eng sudo apt install -y tesseract-ocr-kor-vert tesseract-ocr-script-hang tesseract-ocr-script-hang-vert sudo apt install -y poppler-utils sudo apt install -y pdfarranger # GIMP sudo apt install -y gimp gimp-data-extras gimp-help-ko gimp-help-en # Inkscape sudo apt install -y inkscape # pip install pdf2image 1 2 3 4 5 6 7 8 9 10 11 In the poppler-utils packages there is the utility pdftoppm capable of converting pages from a pdf file to ppm, png or jpeg format: pdftoppm -png file.pdf prefix will produce prefix-01.png etc. for each page. By default the resolution is 150dpi. Increase the resolution (for higher quality output) as follows: pdftoppm -rx 300 -ry 300 -png file.pdf prefix To print only one page, use pdftoppm -f N -singlefile -png file.pdf prefix where N is the page number, beginning with 1. SHELL\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 # sudo apt install okular okular-extra-backends -y # sudo apt install xournalpp -y # sudo apt install -y tesseract-ocr tesseract-ocr-kor tesseract-ocr-eng # sudo apt install -y tesseract-ocr-kor-vert tesseract-ocr-script-hang tesseract-ocr-script-hang-vert # sudo apt install -y poppler-utils if [ ! -d \u0026#34;$1\u0026#34; ]; then echo -e \u0026#34;$1 is not a valid directory\u0026#34; exit 1 fi PWD=$(pwd) # Set the default directory # default_dir=\u0026#34;/home/red/Desktop/pdfs\u0026#34; # default_dir=\u0026#34;~/Documents/pdf/\u0026#34; default_dir=$(cd \u0026#34;$1\u0026#34; ; pwd) echo -e \u0026#34;DIR-PATH $src\u0026#34; # Navigate to the default directory cd \u0026#34;$default_dir\u0026#34; # List all PDF files (both lowercase and uppercase) in the directory pdf_files=( $(find . -maxdepth 1 -iname \u0026#34;*.pdf\u0026#34;) ) # Prompt the user to choose a PDF file, or select \u0026#34;All\u0026#34; to convert all files echo \u0026#34;Select a PDF file or choose \u0026#39;All\u0026#39; to convert all files:\u0026#34; select pdf_choice in \u0026#34;${pdf_files[@]}\u0026#34; \u0026#34;All\u0026#34;; do break done if [[ \u0026#34;$pdf_choice\u0026#34; == \u0026#34;All\u0026#34; ]]; then files_to_convert=(\u0026#34;${pdf_files[@]}\u0026#34;) else files_to_convert=(\u0026#34;$pdf_choice\u0026#34;) fi for pdf_file in \u0026#34;${files_to_convert[@]}\u0026#34;; do # Extract the name of the PDF file without the extension pdf_name=$(basename \u0026#34;$pdf_file\u0026#34; .pdf) # Convert the PDF to TIFF images /usr/bin/pdftoppm -tiff \u0026#34;$pdf_file\u0026#34; \u0026#34;${pdf_name}_output_\u0026#34; # Use Tesseract OCR to convert TIFF images to text and save it in a text file for file in \u0026#34;${pdf_name}_output_\u0026#34;*.tif; do /usr/bin/tesseract \u0026#34;$file\u0026#34; \u0026#34;${file%.*}\u0026#34; -l eng done # Concatenate all text files into a single file with the same name as the PDF cat \u0026#34;${pdf_name}_output_\u0026#34;*.txt \u0026gt; \u0026#34;${pdf_name}_raw.txt\u0026#34; # Post-process the text file to replace \u0026#34;|\u0026#34; with \u0026#34;I\u0026#34; sed \u0026#39;s/|/I/g\u0026#39; \u0026#34;${pdf_name}_raw.txt\u0026#34; \u0026gt; \u0026#34;${pdf_name}.txt\u0026#34; # Remove temporary text files # rm \u0026#34;${pdf_name}_output_\u0026#34;*.txt # rm \u0026#34;${pdf_name}_raw.txt\u0026#34; # Remove temporary TIFF files # rm \u0026#34;${pdf_name}_output_\u0026#34;*.tif echo \u0026#34;The text from the PDF \u0026#39;$pdf_name\u0026#39; has been saved to \u0026#39;${pdf_name}.txt\u0026#39;\u0026#34; done cd \u0026#34;$PWD\u0026#34; How to insert pairs quickly without fancy packages # For this solution to work you must ensure that delete-selection-mode is enabled.\nSPC v expand-region 으로 선택한다. evil 이 별로 인가? 적당한 커맨드를 모르는 것일 뿐이다. 다음 라인에 복사하니까 문장을 복북하고 볼드로 바꾸는게 쉽지 않다. 아니면 그냥 org 커맨드로 하면 된다. 이게 편하다.\n기본 M-w kill-ring-save 이다. 복사하는 것이다. 이게 기본 키 하나를 잡고 있는 것은 엄청난 일이다. 귀한 키배열을 가지고 있는 만큼 중요하다는 말일거다.\nkill-sentence kill- 시리즈가 많이 있다. 다음에 함수를 기존 것을 교체하라는 것이다. 좋은 것인가?! 아예 kill 시리즈를 뭉탱이로 관리하는 것은 어떤가 싶다. 여튼 기존 세팅 보다는 편하다. 근데 얼마나 쓸 지 모르는 일.\n1 2 3 4 5 6 7 8 9 (defun my-kill-ring-save-keep-selection () (interactive) (when (use-region-p) (let ((beg (region-beginning)) (end (region-end))) (kill-ring-save beg end) (setq deactivate-mark nil)))) (global-set-key (kbd \u0026#34;M-w\u0026#34;) \u0026#39;my-kill-ring-save-keep-selection) Integer placerat tristique nisl. BOLD\nInteger placerat tristique nisl. ITALICS\n\u0026ldquo;Integer placerat tristique nisl.\u0026rdquo; QUOTES\n(global-set-key (kbd \u0026quot;M-w\u0026quot;) 'my-kill-ring-save-keep-selection) MARK AS CODE\nhttps://www.youtube.com/@emacselements\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":6,"href":"/refs/LearningEmacs/","title":"Daw-Ran Liou :: On Learning Emacs (2020)🌲","section":"References","content":" 이맥스는 단순한 텍스트 편집기 그 이상이다. 배움에 왕도는 따로 없다. 장기적으로 보자면 도구가 지닌 가치는 시작하며 드는 노력을 능가한다. About References Note 레퍼런스 노트는 1. 원문 번역, 2. 나의 생각 으로 구성 됩니다. 번역은 기계 번역 후 제가 이해할 만한 수준으로 수정한 것 입니다. 원문 번역 : On Learning Emacs [1] # Published: 2020-11-13\nFigure 1: Classical learning curves for some common editors\n나는 사람들에게 Emacs 를 다음과 같이 사용하는 방법을 알려주는 트윗을 본 적이 있습니다. 1 단계: Emacs 다운로드; 2 단계: 향후 10 년을 설정/구성하며 보내기. 처음에는 이것이 꽤 어리석은 것처럼 보이지만 그 안에는 몇 가지 진실이 있습니다. 나는 소프트웨어 개발에서 Emacs 를 매일 타는 자가용(driving horse)으로 사용하는 데 익숙해지기까지 10 년을 보내지 않았습니다. 그러나 나는 10 년 후에도 여전히 만족스럽게 내 Emacs 구성을 만지작거리고 있을 것이라고 아주 잘 상상할 수 있었습니다.\n돌이켜보면 소프트웨어 개발에서 내가 가장 좋아하는 두 가지 도구인 Clojure 와 Emacs 가 초보자를 위한 친근함에 별로 신경을 쓰지 않는 것 같다는 것이 재미있다는 것을 알았습니다. 예, 커뮤니티는 매우 환영합니다. 그러나 도구 자체는 초보자에게 상당히 까다롭습니다. Clojure 는 대부분의 이전 OOP 경험을 잊기 위해 엄청난 믿음의 도약이 필요했지만 Emacs 는 처음부터 나만의 텍스트 편집기를 설계하고 ELisp 프로그래밍 언어를 어느 정도 이해해야 했습니다. 어느 쪽도 새로 온 이들에게 \u0026ldquo;일단 시작해봐!\u0026rdquo; 라고 하거나 \u0026ldquo;주말에 배우게나!\u0026rdquo; 고 약속하지 않습니다.\n내가 관찰한 바에 따르면 전체 소프트웨어 산업은 \u0026ldquo;최신 그리고 가장 위대한\u0026rdquo; 것에 너무 많은 관심을 기울이고 있습니다. 놓치는 것에 대한 두려움인 FOMO 는 속도를 바라는 문화에 기름을 부었습니다. 학습 용이성(easiness of learning)은 라이브러리 및 언어와 같은 많은 소프트웨어 도구에 대한 광고 용어가 되었습니다. 그러나 도구의 효과(the effectiveness of a tool)는 결국 그것을 배우는 어려움을 능가할 것입니다. 내가 직장에서 매일 Emacs 를 사용하여 15 분을 절약했다면 작년에 이미 65 시간을 절약했습니다. 그것은 1 년에 거의 3 일을 더 얻은 셈입니다. 처음에 일주일 내내 Emacs 를 배우는 것 외에는 아무 일도 하지 않았더라도 3 년치의 성취와 더불어 남은 인생에서 지속적인 성과를 만들어 낼 것 입니다. 여기서 수학은 그다지 중요하지 않습니다. 솔직히 말해서 Emacs 를 사용하여 하루에 15 분만 절약했다고 ​​생각하지 않습니다. 중요한 것은 이것 입니다. 새로운 도구를 배우는 ROI 는 장기전입니다. 오래 사용할수록 초기 투자가 덜 중요합니다. 더 중요한 것은 도구 자체의 기능(the capability of the tool itself)입니다.\n그것은 다음 핵심 사항으로 이어집니다. Emacs 는 단순한 텍스트 편집기가 아닙니다. 어떤 사람들은 Emacs 를 운영 체제로 생각합니다. 저는 Emacs 를 통합 개발 환경으로 생각하고 싶습니다. 최신 소프트웨어 개발에는 일반적으로 텍스트 편집기, 컴파일러, 인터프리터, repl, 테스트 러너, 버전 제어 시스템, 데이터베이스 클라이언트 또는 브라우저와 같은 여러 도구가 포함됩니다. 모든 프로젝트는 다르며 모든 요구 사항을 충족하는 단일 IDE 는 없습니다. 우리는 서로 다른 목적을 위해 서로 다른 도구에 도달하고 불가피하게 컨텍스트 전환을 수행해야 합니다. 이러한 컨텍스트 전환은 개발 흐름을 끊습니다. 키 바인딩 다른 도구를 사용하면서 계속 마우스로 손이 갈 수 밖에 없는 상황은 저를 힘 빠지게 합니다. 저는 항상 동일한 범용 키 바인딩이 있는 하나의 도구 안에 머무르는 것을 선호합니다.\n내가 Emacs 를 배우기 시작했을 때, 나는 Emacs 를 설정하는 가장 좋고 가장 일반적인 방법을 찾으려고 노력했습니다. 나는 또한 기본 Emacs 키 바인딩이 아닌 Vim 키 바인딩을 사용하는 것에 대해 잘못된 느낌을 받았습니다. Emacs 를 사용하는 진정한 방법이란 것은 존재하지 않기 때문에 이와 같은 저의 예전 생각은 지금 나에게는 어리석게 보입니다. 모두가 다른 배경과 다른 맥락에서 Emacs 를 다르게 사용하고 있습니다. 나는 내가 아는 대부분의 사람들과 다른 키보드를 사용합니다. 키가 50 개밖에 없는 Planck 키보드가 있습니다. 이미 수정자(Modifier) 키 없이는 입력할 수 없는 많은 특수 문자가 있습니다. 여러 수정자 키와 특수 문자를 눌러야 하는 키 코드를 칠 여유가 없었습니다. =C-M-$=와 같은 것은 한 손으로 누르기가 인간적으로는 거의 불가능합니다. Emacs 가 제 요구에 맞을 만큼 충분히 유연하다는 것이 기쁩니다.\n요점을 요약하면 다음과 같습니다. 1. 도구의 효율성(the effectiveness of a tool)은 장기적으로 학습의 어려움을 능가합니다. 2. Emacs 는 텍스트 편집기가 아닌 통합 개발 환경입니다. 3. Emacs 를 사용하는 진정한 방법(true way)은 없습니다.\n나의 생각 : 동의 + 조금 더 하자면\u0026hellip; # 이 글을 읽은 것은 1 년 전일 것이다. 아무튼 Org-Roam 끄적여 놓은 기록이 오늘 새벽 문득 찾아 왔다. 지금도 여전히 사용자 수준이고 앞으로도 크게 바뀔 것 같지 않지만 정말 지나고 보니 동의하게 된다. 무엇을? 요약 3 가지 말이다.\n나는 조금 더 이야기를 더 하자면 통합 개발 환경이라는 단어는 이맥스를 틀 안에 가두는 말이라고 생각한다. 개발자가 아니어도 글쓰는 사람들도 종종 사용을 한다 (정리해서 포스팅 할 예정). 개발 환경 이외에도 Planner, Email, Web, SNS, RSS, File Manager, PDF, Project manager, Presentation, Sheet \u0026hellip; 내가 이걸 왜 적고 있지? 텍스트를 다루는 일 전부 다가 아닐까?\n이와 같이 모든 일을 하나의 방식으로 다 해낼 수 있는 텍스트 환경은 나에게 가장 큰 선물을 주었다. 바로 Digital Minimalism, Indistractable 이다 [2] [3]. 즉 딴 짓에 나의 주의력을 빼앗기지 않으면서 온전하고 충만하게 하루를 보낼 수 있게 된 것이다. 자연스럽게 SNS 에서 멀어지게 되었다. 억지로 힘들게 한 것도 아니고 자연스레 그렇게 된 것이다. 왜 일까? 주의를 전환 할 필요 없이 모든 워크플로우가 하나로 연결되었기 때문인 것 같다. 그리고 키보드를 신나게 두드리다 보면 약간 게임의 연속기 기술을 쓰는 것 같은 재미를 준다. 외워서 하는 게 아니라 그냥 몸이 알게 되는 배움이다. 뇌는 이런 재미를 좋아한다. 아이들 게임하는 것과 같다.\n하나 더 말하자면 평생 함께 가는 친구라는 점이다. 이맥스가 40 년 되었나? LISP 머신은 마치 유기체와 같다. 고정 된 것도 없으며 특정 기술에 종속 되지도 않는다. 100 세 생일에도 나는 이맥스를 사용하고 있을 것이라는 말이다. 100 세가 무슨 일을 하려고?라고 생각한다면 텍스트 에디터를 업무용으로 오해하는 것이다. 살아 있는 동안에는 텍스트를 다루는 무언가를 할 것이란 말이다 (물론 신체가 허락한다면). 나이가 들어도 나는 이 오래된 친구만 있다면 자신 있고 살아 숨쉬는 방식으로 해나갈 것이다. 다른 관점에서 내 아이에게 내가 줄 수 있는 선물이 있다면 무엇일까? 텍스트 에디터를 알려 주는 것이다 (지식 도구로써).\n참 놀라운 도구로써 할 이야기는 끝이 없다. 요즘 많이 이야기 하는 제텔카스텐 스타일의 지식 관리 측면은 이야기를 시작도 못했다. LLM (Large Language Model) 관점의 이야기도 마찬가지다. 원문 글의 주소는 다음과 같다. 1\nFigure 2: modus-operadi-tinted 테마와 logos-focus-mode 아름다운 조합\nReferences # [1]Daw-Ran Liou, “On Learning Emacs,” 2020. https://dawranliou.com (accessed Jun. 14, 2023). [2]C. Newport, Digital Minimalism. New York: Portfolio/Penguin, 2019. Available: https://www.amazon.com/Digital-Minimalism-Choosing-Focused-Noisy/dp/0525536515 [3]N. Eyal, Indistractable. Dallas, TX: BenBella Books, Inc, 2019. On Learning Emacs\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":7,"href":"/notes/learning_spacemacs_and_vim/","title":"Learning Vim and Evil on Spacemacs🌱","section":"Notes","content":" 간단하게 정리할 수 없는 내용이다. 근데 해야 한다. 그래서 일단 씨앗을 심었다. 거둘 수는 없다. 가야 한다. Evil-mode 를 기반으로 조작 하는 방법을 알아야 한다. You know what improves productivity? Mastering motions and operators.\nGoal # 텍스트 마스터로서 자유를 얻으려면 일단 편집 모드를 이해해야 한다. 이맥스에서 제공하는 편집 모드를 섞어 쓰는 것도 좋지만 EVIL 은 경험을 해야 한다.\n"},{"id":8,"href":"/notes/talk_with_junghanacs/","title":"Conversation with Junghanacs🌱","section":"Notes","content":" Junghanacs 의 가르침을 받들다. Junghanacs 와의 대화 # Junghanacs: \u0026ldquo;자네 있는가?\u0026rdquo;\nJunghan: \u0026ldquo;있다네. 작업 중인 내용은 숨기고 밥먹으러 가세\u0026rdquo;\nJunghanacs: \u0026ldquo;알겠네. 수고하시게. 어서와서 이야기를 더 하세!\u0026rdquo;\n"},{"id":9,"href":"/configs/emacs/jh-base/","title":"jh-base layer","section":"menu/Dotfiles/dot-emacs","content":" jh-base Goals # spacemacs-defaults layers TIPS Configure Vanilla Emacs in 10 Minutes - YouTube 대단한 배포판과 패키지를 찾지만 최신 이맥스 버전에서 제공하는 패키지들에 중요한 핵심은 다 들어 있다. 오히려 유명한 패키지는 최신 이맥스와 중복되는 기능들로 인해 호불호가 커지고 있다. 아래 레이어에서 제공하는 기능들은 기본으로 설치되는 것들이다. 키바인딩이 제대로 되어 있는지를 떠나서 활용을 잘 해야 한다. 기본적인 것들인데 설명이 없어서 놓치기 쉽다. 각 영역에서 세부 설정은 다루게 될 것이다.\n2023-04-30 base 만 넣으면 빌트인 + 최소 구성으로 동작하는거다. 완전 빌트인은 아니다. 왜냐? Spacemacs 에서 구성하는 default 의 확장버전이기 때문이다. 오히려 잘 됬다. bootstrap 에서 evil 등을 넣으니까 말이다. 문제는 여기에 org 모드가 없는데 좀 그렇긴 하다만. ui 도 없고. base 를 당장 만드는게 의미가 없겠다. 노가다만 크다. Layer # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (configuration-layer/declare-layer-dependencies \u0026#39;( spacemacs-defaults helpful )) Packages # Packages # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: ;;;; Package Lists (defconst jh-base-packages \u0026#39;( ;; electric ;; paren ;;;;; spacemacs-bootstrap which-key helpful ;;;;; spacemacs-defaults recentf bookmark abbrev dabbrev dired ;; dired-x savehist ;; saveplace ;; tar-mode ;; archive-mode ;; conf-mode ;; cus-edit ;; display-line-numbers ;; electric-indent-mode ;; easypg ;; ediff ;; eldoc ;; help-fns+ ;; hi-lock ;; image-mode ;; imenu ;; occur-mode ;; package-menu ;; page-break-lines ;; process-menu ;; quickrun ;; subword ;; uniquify ;; url ;; visual-line-mode ;; whitespace ;; winner ;; zone ;;;;; Additional built-in packages calendar tramp proced man ;;;;; Additional packages sideline ;; gc-buffers ; too aggressive ;; (explain-pause-mode :location (recipe :fetcher github :repo \u0026#34;lastquestion/explain-pause-mode\u0026#34;)) )) Helpful # [2023-05-22 Mon 06:26] shackle 과 연동하는 시나리오에 튜닝 필요\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 ;;;; Helpful ;; tshu/lisp/editor-misc.el (defun jh-base/post-init-helpful () (setq helpful-max-buffers 3) (defun helpful-reuse-window (buffer-or-name) \u0026#34;Switch to helpful BUFFER-OR-NAME. The logic is simple, if we are currently in the helpful buffer, reuse it\u0026#39;s window, otherwise create new one.\u0026#34; (if (eq major-mode \u0026#39;helpful-mode) (pop-to-buffer-same-window buffer-or-name) (pop-to-buffer buffer-or-name))) (setq helpful-switch-buffer-function #\u0026#39;helpful-reuse-window) (with-eval-after-load \u0026#39;ibuffer (add-to-list \u0026#39;ibuffer-help-buffer-modes \u0026#39;helpful-mode)) ) Which-key # Spacemacs 기본은 which-key-setup-side-window-bottom 이다. minibuffer 와 통합한다는 것은 무슨 이점이 있을까? [2023-03-25 Sat 15:51]\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 ;;;; Which-key (defun jh-base/post-init-which-key () (setq which-key-idle-delay 0.4) (setq which-key-ellipsis \u0026#34;..\u0026#34;) ;; (setq which-key-sort-order \u0026#39;which-key-key-order) ;; default ;; same as default, except single characters are sorted alphabetically (setq which-key-sort-order \u0026#39;which-key-key-order-alpha) ; minemacs ;; same as default, except all prefix keys are grouped together at the end ;; (setq which-key-sort-order \u0026#39;which-key-prefix-then-key-order) ; Spacemacs default (setq which-key-min-display-lines 6) (setq which-key-max-description-length 36) ; spacemacs 32 ;; Allow a key binding to be modified by multiple rules in ;; `which-key-replacement-alist\u0026#39; ;; (setq ;; which-key-replacement-alist ;; (append ;; which-key-replacement-alist ;; (list ;; \u0026#39;((\u0026#34;\\\\`g z\u0026#34; . \u0026#34;\\\\`evil-\\\\(?:mc\\\\|multiedit\\\\)-\\\\(.*\\\\)\u0026#34;) . (nil . \u0026#34;⌶·\\\\1\u0026#34;)) ;; \u0026#39;((\u0026#34;\\\\`g c\u0026#34; . \u0026#34;\\\\`evilnc-\\\\(.*\\\\)\u0026#34;) . (nil . \u0026#34;#·\\\\1\u0026#34;)) ;; \u0026#39;((\u0026#34;\\\\`g\u0026#34; . \u0026#34;\\\\`[Ii]nfo[-:]?\\\\(?:a-\\\\)?\\\\(.*\\\\)\u0026#34;) . (nil . \u0026#34;ɩ·\\\\1\u0026#34;)) ;; ;; \u0026#39;((\u0026#34;\\\\`SPC TAB\u0026#34; . \u0026#34;\\\\`tabspaces-\\\\(.*\\\\)\u0026#34;) . (nil . \u0026#34;⭾·\\\\1\u0026#34;)) ;; \u0026#39;((\u0026#34;\\\\`SPC p\u0026#34; . \u0026#34;\\\\`\\\\+?\\\\(?:consult-\\\\)?project-\\\\(.*\\\\)\u0026#34;) . (nil . \u0026#34;🅟·\\\\1\u0026#34;)) ;; \u0026#39;((\u0026#34;\u0026#34; . \u0026#34;\\\\`evil[-:]?\\\\(?:a-\\\\)?\\\\(.*\\\\)\u0026#34;) . (nil . \u0026#34;ɛ·\\\\1\u0026#34;))))) (add-to-list \u0026#39;which-key-replacement-alist \u0026#39;((\u0026#34;TAB\u0026#34; . nil) . (\u0026#34;↹\u0026#34; . nil))) (add-to-list \u0026#39;which-key-replacement-alist \u0026#39;((\u0026#34;RET\u0026#34; . nil) . (\u0026#34;⏎\u0026#34; . nil))) (add-to-list \u0026#39;which-key-replacement-alist \u0026#39;((\u0026#34;DEL\u0026#34; . nil) . (\u0026#34;⇤\u0026#34; . nil))) (add-to-list \u0026#39;which-key-replacement-alist \u0026#39;((\u0026#34;SPC\u0026#34; . nil) . (\u0026#34;␣\u0026#34; . nil))) ) Recentf # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ;;;; Recentf (defun jh-base/pre-init-recentf () (spacemacs|use-package-add-hook recentf ;; :pre-init ;; (message \u0026#34;JH pre-init-recentf\u0026#34;) ;; :post-init ;; (message \u0026#34;JH post-init-recentf\u0026#34;) ;; :pre-config ;; (message \u0026#34;JH pre-config-recentf\u0026#34;) :post-config ;; (message \u0026#34;JH post-config-recentf\u0026#34;) ;; (setq recentf-save-file (concat dotspacemacs-directory \u0026#34;var/recentf\u0026#34;)) (setq recentf-max-saved-items 200) ; default 20 ;; (add-hook \u0026#39;after-init-hook \u0026#39;recentf-mode) (recentf-mode +1) )) Dired # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 ;;;; Dired ;; https://systemcrafters.cc/emacs-from-scratch/effortless-file-management-with-dired/ (defun jh-base/post-init-dired () ;; -al ; spacemacs ;; Make sure to use the long name of flags when exists ;; eg. use \u0026#34;--almost-all\u0026#34; instead of \u0026#34;-A\u0026#34; ;; Otherwise some commands won\u0026#39;t work properly ;; tshu :: dired-listing-switches \u0026#34;-aBhl --group-directories-first\u0026#34; ;; (setq dired-listing-switches ;; \u0026#34;-l --almost-all --human-readable --time-style=long-iso --group-directories-first --no-group\u0026#34;) ;; (setq dired-listing-switches ;; \u0026#34;-h -g -u --time-style=long-iso --group-directories-first -o\u0026#34;) (setq dired-auto-revert-buffer t) ;; (setq dired-hide-details-hide-symlink-targets t) ;; (setq dired-kill-when-opening-new-dired-buffer t) ;; from prot ;; (setq dired-make-directory-clickable t) ; Emacs 29.1 ;; (setq dired-free-space nil) ; Emacs 29.1 ;; (setq dired-guess-shell-alist-user ; those are the suggestions for ! and \u0026amp; in Dired ;; \u0026#39;((\u0026#34;\\\\.\\\\(png\\\\|jpe?g\\\\|tiff\\\\)\u0026#34; \u0026#34;feh\u0026#34; \u0026#34;xdg-open\u0026#34;) ;; (\u0026#34;\\\\.\\\\(mp[34]\\\\|m4a\\\\|ogg\\\\|flac\\\\|webm\\\\|mkv\\\\)\u0026#34; \u0026#34;mpv\u0026#34; \u0026#34;xdg-open\u0026#34;) ;; (\u0026#34;.*\u0026#34; \u0026#34;xdg-open\u0026#34;))) ;; Mouse support ;; (setq mouse-drag-copy-region t) ; default nil ;; (setq dired-mouse-drag-files t) ; Emacs 29.1 ;; (setq dired-recursive-copies \u0026#39;always) ;; (setq dired-recursive-deletes \u0026#39;always) ;; (setq dired-create-destination-dirs \u0026#39;always) ;; (add-hook \u0026#39;dired-mode-hook ;; (lambda () ;; (setq truncate-lines t) ;; (visual-line-mode nil))) (when my/is-termux (add-hook \u0026#39;dired-mode-hook #\u0026#39;dired-hide-details-mode)) ;; (add-hook \u0026#39;dired-mode-hook #\u0026#39;dired-hide-details-mode) (defun my/dired-home () \u0026#34;Open dired at $HOME\u0026#34; (interactive) (dired (expand-file-name \u0026#34;~\u0026#34;))) (spacemacs/set-leader-keys \u0026#34;od\u0026#34; \u0026#39;my/dired-home) (defun my/dired-open-this-subdir () (interactive) (dired (dired-current-directory))) (defun my/dired-kill-all-subdirs () (interactive) (let ((dir dired-directory)) (kill-buffer (current-buffer)) (dired dir))) (spacemacs/declare-prefix-for-mode \u0026#39;dired-mode \u0026#34;ms\u0026#34; \u0026#34;subdir\u0026#34;) (spacemacs/set-leader-keys-for-major-mode \u0026#39;dired-mode \u0026#34;ss\u0026#34; \u0026#39;dired-maybe-insert-subdir \u0026#34;ss\u0026#34; \u0026#39;dired-maybe-insert-subdir \u0026#34;sl\u0026#34; \u0026#39;dired-maybe-insert-subdir \u0026#34;sq\u0026#34; \u0026#39;dired-kill-subdir \u0026#34;sk\u0026#34; \u0026#39;dired-prev-subdir \u0026#34;sj\u0026#34; \u0026#39;dired-next-subdir \u0026#34;sS\u0026#34; \u0026#39;my/dired-open-this-subdir \u0026#34;sQ\u0026#34; \u0026#39;my/dired-kill-all-subdirs ) (spacemacs/set-leader-keys-for-major-mode \u0026#39;dired-mode \u0026#34;h\u0026#34; \u0026#39;dired-hide-details-mode \u0026#34;o\u0026#34; \u0026#39;dired-omit-mode) ;; The search next/previous commands are different because of the ;; `evil-search-module\u0026#39; values: vim = evil-search, hybrid = isearch ;; wdired is a mode that allows you to rename files and directories by editing the ;; =dired= buffer itself. (require \u0026#39;wdired) (setq wdired-allow-to-change-permissions t) (setq wdired-create-parent-directories t) (evil-define-key \u0026#39;normal wdired-mode-map (kbd \u0026#34;^\u0026#34;) \u0026#39;evil-first-non-blank) (evil-define-key \u0026#39;normal dired-mode-map (kbd \u0026#34;C-c C-e\u0026#34;) \u0026#39;wdired-change-to-wdired-mode (kbd \u0026#34;h\u0026#34;) \u0026#39;dired-up-directory (kbd \u0026#34;l\u0026#34;) \u0026#39;dired-find-file) ) Simple Bookmark # 1 2 3 4 5 6 7 8 9 ;;;; Bookmark (defun jh-base/post-init-bookmark () (setq bookmark-default-file (concat dotspacemacs-directory \u0026#34;var/bookmarks\u0026#34;)) (setq bookmark-use-annotations nil) (setq bookmark-automatically-show-annotations t) (setq bookmark-set-fringe-mark t) ; Emacs 28 (add-hook \u0026#39;bookmark-bmenu-mode-hook #\u0026#39;hl-line-mode) ) Savehist # 1 2 3 4 5 6 7 8 9 10 11 12 13 ;;;; Savehist (defun jh-base/pre-init-savehist () (spacemacs|use-package-add-hook savehist :post-init ;; 기본이 100, 스페이스맥스 1000 (setq history-delete-duplicates t) ; default nil (setq history-length 500) (add-to-list \u0026#39;savehist-additional-variables \u0026#39;corfu-history) ;; (corfu-history evil-jumps-history projectile-project-command-history mark-ring global-mark-ring search-ring regexp-search-ring extended-command-history kill-ring) ) ) dabbrev dynamic word completion # [2023-02-13 Mon 02:50] 이것은 버퍼 내부의 동적/임의 텍스트 완성에 대한 Emacs 의 고유한 접근 방식입니다: \u0026ldquo;동적 약어\u0026rdquo; 또는 dabbrev. 이 메커니즘은 적절한 일치 항목을 찾기 위해 지점 이전의 모든 텍스트를 읽는 방식으로 작동합니다. 다른 시나리오에 따라 포워드 및 다른 버퍼를 살펴봐야 하는지 여부가 결정됩니다. 본질적으로 Dabbrev 는 이미 가지고 있는 것을 다시 입력하는 데 도움이 됩니다.\ndabbrev-expand=를 사용하여 해당 지점에서 텍스트를 완성하려고 시도합니다. 반복 호출은 후보를 순환합니다. 피드백은 제공되지 않으며, kill-ring에서 끌어오기가 작동하는 것과 거의 동일합니다(Emacs28의 경우 =yank-pop on M-y=는 이전 명령이 =yank on =C-y=가 아닌 경우 완성을 사용함). 마지막 성공적인 =dabbrev-expand=와 일치하는 구를 완성하려면 빈 공간을 제공하고 명령을 다시 호출해야 합니다. 이것은 N 단어에 대해 다음 단어와 일치합니다.\n반면 =dabbrev-completion=은 미니버퍼 상호 작용 및 패턴 일치 스타일의 이점을 얻습니다(완성 프레임워크 및 추가). Corfu 의 도움으로 완료 후보가 지점 근처의 팝업 창에 표시됩니다(버퍼 내 완료를 위한 Corfu).\n=dabbrev-abbrev-char-regexp=는 일반 단어와 기호(예: 하이픈으로 구분된 단어) 모두와 일치하도록 구성됩니다. 이것은 코드와 일반 언어에 똑같이 적합합니다.\ndabbrev-abbrev-skip-leading-regexp=는 =$, *, /, =, ~, ' 중 하나로 시작하는 단어와 기호도 확장하도록 지시됩니다. =. 이 정규식은 나중에 확장될 수 있지만 알려진 단어/기호 앞에 특수 문자가 있는 컨텍스트에서 완성을 수행할 수 있도록 하는 것이 아이디어입니다. 예를 들어, 이 문서의 =org-mode 버전에서 모든 인라인 코드는 등호 사이에 배치되어야 합니다. 이제 ===를 입력한 다음 문자를 입력하면 해당 입력을 기반으로 텍스트를 확장할 수 있습니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ;;;; Dabbrev : Dynamic Word Completion (defun jh-base/init-dabbrev () (use-package dabbrev :demand :init ;; (setq dabbrev-abbrev-char-regexp \u0026#34;\\\\sw\\\\|\\\\s_\u0026#34;) ; prot (setq dabbrev-abbrev-char-regexp \u0026#34;[A-Za-z-_]\u0026#34;) ; tshu (setq dabbrev-ignored-buffer-regexps \u0026#39;(\u0026#34;\\\\.\\\\(?:pdf\\\\|jpe?g\\\\|png\\\\)\\\\\u0026#39;\u0026#34;)) (setq dabbrev-abbrev-skip-leading-regexp \u0026#34;[$*/=~\u0026#39;]\u0026#34;) :config (let ((map global-map)) (define-key map (kbd \u0026#34;M-/\u0026#34;) #\u0026#39;dabbrev-expand) (define-key map (kbd \u0026#34;C-M-/\u0026#34;) #\u0026#39;dabbrev-completion))) ) abbrev abbreviations # 23/01/03\u0026ndash;17:43 :: 아주 잘 동작하는데 사용법이 좀 더 연구가 필요하다.\nM-/ abbrev-mode C-x a - C-x a i l C-x a i g (setq-default abbrev-mode t) (read-abbrev-file \u0026ldquo;~/.abbrev_defs\u0026rdquo;) (setq save-abbrevs t) edit-abbrevs list-abbrevs kill-all-abbrevs 1 2 3 4 5 6 7 8 9 ;;;; Abbrev : Abbreviations (defun jh-base/post-init-abbrev () (setq abbrev-file-name (concat dotspacemacs-directory \u0026#34;var/abbrev_defs\u0026#34;)) (read-abbrev-file abbrev-file-name) (setq save-abbrevs t) (setq-default abbrev-mode t) ) Sideline # [2023-04-27 Thu 17:19] GitHub - emacs-sideline/sideline: Show information on the\u0026hellip;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ;;;; Sideline (defun jh-base/init-sideline () (use-package sideline :ensure :init ;; (setq sideline-delay 1.0) ; 0.5 (setq sideline-backends-skip-current-line t ; don\u0026#39;t display on current line sideline-order-left \u0026#39;down ; or \u0026#39;up sideline-order-right \u0026#39;up ; or \u0026#39;down sideline-format-left \u0026#34;%s \u0026#34; ; format for left aligment sideline-format-right \u0026#34; %s\u0026#34; ; format for right aligment sideline-priority 100 ; overlays\u0026#39; priority sideline-display-backend-name t) ; display the backend na ;; :config ;; (global-sideline-mode 1) ) ) ;; Customization Tips ;; (setq sideline-backends-left \u0026#39;(sideline-flycheck) ;; sideline-backends-right \u0026#39;(sideline-lsp))) ;; (setq sideline-backends-right \u0026#39;((sideline-lsp . up) ;; (sideline-flycheck . down)))) TRAMP # TRAMP 를 경험 해봐야 한다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ;;;; Tramp (defun jh-base/init-tramp () (use-package tramp :defer :init ;; :commands tramp-file-local-name ;; Set default connection mode to SSH (setq tramp-default-method \u0026#34;ssh\u0026#34;) (setq remote-file-name-inhibit-cache 60 ; default 10 tramp-verbose 1 ; default 3 vc-handled-backends \u0026#39;(SVN Git)) :config (add-to-list \u0026#39;tramp-remote-path \u0026#39;tramp-own-remote-path) (defun my/show-server-edit-buffer (buffer) ;; TODO: Set a transient keymap to close with \u0026#39;C-c C-c\u0026#39; (split-window-vertically -15) (other-window 1) (set-buffer buffer)) ;; (setq server-window #\u0026#39;my/show-server-edit-buffer) ) ) Tools for manual pages (manpages) # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 ;;;; Man (defun jh-base/init-man () (use-package man :defer 10 :after evil :config (setq Man-notify-method \u0026#39;pushy) ; does not obey `display-buffer-alist\u0026#39; (let ((map Man-mode-map)) (define-key map (kbd \u0026#34;i\u0026#34;) #\u0026#39;Man-goto-section) (define-key map (kbd \u0026#34;g\u0026#34;) #\u0026#39;Man-update-manpage)) (evil-define-key \u0026#39;(motion normal visual) Man-mode-map \u0026#34;M-n\u0026#34; \u0026#39;Man-next-section \u0026#34;M-p\u0026#34; \u0026#39;Man-previous-section \u0026#34;]]\u0026#34; \u0026#39;Man-next-section \u0026#34;[[\u0026#34; \u0026#39;Man-previous-section \u0026#34;gs\u0026#34; \u0026#39;Man-goto-section \u0026#34;\u0026gt;\u0026#34; \u0026#39;Man-follow-manual-reference) ) ) Calendar # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ;;;; Calendar (defun jh-base/init-calendar () (use-package calendar :ensure t :config ;; (setq org-agenda-start-on-weekday nil) (setq calendar-date-style \u0026#39;iso ;; YYYY/MM/DD calendar-mark-holidays-flag t calendar-week-start-day 1 ;; 0 Sunday, 1 Monday calendar-mark-diary-entries-flag nil calendar-latitude 37.26 calendar-longitude 127.01 calendar-location-name \u0026#34;Suwon, KR\u0026#34; calendar-time-display-form \u0026#39;(24-hours \u0026#34;:\u0026#34; minutes (if time-zone \u0026#34; (\u0026#34;) time-zone (if time-zone \u0026#34;)\u0026#34;))) ) ) Proced (process monitor, similar to \u0026rsquo;top\u0026rsquo;) # 1 2 3 4 5 6 7 8 9 10 11 12 ;;;; Proced (defun jh-base/init-proced () (use-package proced :defer 10 :init (setq proced-auto-update-flag t) (setq proced-enable-color-flag t) ; Emacs 29 (setq proced-auto-update-interval 5) (setq proced-descend t) (setq proced-filter \u0026#39;user)) ) Funcs # 1 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- Helper Functions # Many people configure their emacs with the help of macros such as use-package. I prefer to keep my init lower-level and simple. I have written some simple functions that will make configuration less repetitive.\nUsing my own functions for the things I want or need keeps my overall package load smaller.\nvanilla/trevdev-dotfiles/config.org:232\nCreate a mode for mapping high priority keybinds early on.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 ;;; Helper Functions (defun td/bind-keys (conses \u0026amp;optional mode-map) \u0026#34;Bind several keybinds using a list of `CONSES\u0026#39;. Binds will be global unless the optional `MODE-MAP\u0026#39; is specified.\u0026#34; (dolist (combo conses) (if (or (consp mode-map) (keymapp mode-map)) (define-key mode-map (kbd (car combo)) (cdr combo)) (if mode-map (warn \u0026#34;Optional %s `MODE-MAP\u0026#39; was invalid: %s\u0026#34; (type-of mode-map) mode-map)) (global-set-key (kbd (car combo)) (cdr combo))))) (defun td/add-hooks (modes func) \u0026#34;Set several hooks from a list of `CONSES\u0026#39;. Adds \u0026#39;-hook\u0026#39; onto the end of the symbols for brevity.\u0026#34; (dolist (mode modes) (add-hook (intern (concat (symbol-name mode) \u0026#34;-hook\u0026#34;)) func))) (defun td/auto-mode (modes) \u0026#34;Add the `MODES\u0026#39; to the `auto-mode-alist\u0026#39;.\u0026#34; (dolist (mode modes) (add-to-list \u0026#39;auto-mode-alist mode))) (defun td/filter-nil (seq) \u0026#34;Filter out nil items from sequence `SEQ\u0026#39;.\u0026#34; (seq-filter #\u0026#39;(lambda (item) item) seq)) (defun td/is-file-buffer (buffer) \u0026#34;Test if a buffer belongs to a file on the system. Returns non-nil if it does.\u0026#34; (let ((file (buffer-file-name buffer))) (when file (file-exists-p file)))) Extra Functions # helper loader skeeto/youtube-dl-emacs\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 ;;; Extra Functions (defun describe-last-function () (interactive) (describe-function last-command)) ;;; expose (defun expose (function \u0026amp;rest args) \u0026#34;Return an interactive version of FUNCTION, \u0026#39;exposing\u0026#39; it to the user.\u0026#34; (lambda () (interactive) (apply function args))) ;;; what-face (defun what-face (pos) \u0026#34;Show the name of face under point.\u0026#34; (interactive \u0026#34;d\u0026#34;) (let ((face (or (get-char-property (point) \u0026#39;read-face-name) (get-char-property (point) \u0026#39;face)))) (if face (message \u0026#34;Face: %s\u0026#34; face) (message \u0026#34;No face at %d\u0026#34; pos)))) ;; /home/junghan/sync/man/dotsamples/korean/injae-dotfiles/module/+util.el ; text random (defun randomize-region (beg end) (interactive \u0026#34;r\u0026#34;) (if (\u0026gt; beg end) (let (mid) (setq mid end end beg beg mid))) (save-excursion ;; put beg at the start of a line and end and the end of one -- ;; the largest possible region which fits this criteria (goto-char beg) (or (bolp) (forward-line 1)) (setq beg (point)) (goto-char end) ;; the test for bolp is for those times when end is on an empty ;; line; it is probably not the case that the line should be ;; included in the reversal; it isn\u0026#39;t difficult to add it ;; afterward. (or (and (eolp) (not (bolp))) (progn (forward-line -1) (end-of-line))) (setq end (point-marker)) (let ((strs (shuffle-list (split-string (buffer-substring-no-properties beg end) \u0026#34;\\n\u0026#34;)))) (delete-region beg end) (dolist (str strs) (insert (concat str \u0026#34;\\n\u0026#34;)))))) (defun shuffle-list (list) \u0026#34;Randomly permute the elements of LIST. All permutations equally likely.\u0026#34; (let ((i 0) j temp (len (length list))) (while (\u0026lt; i len) (setq j (+ i (random (- len i)))) (setq temp (nth i list)) (setcar (nthcdr i list) (nth j list)) (setcar (nthcdr j list) temp) (setq i (1+ i)))) list) (defun new-buffer-save (name buffer-major-mode) (interactive) (let ((buffer (generate-new-buffer name))) (switch-to-buffer buffer) (set-buffer-major-mode buffer) (funcall buffer-major-mode) (setq buffer-offer-save t)) ) (defun new-buffer (name buffer-major-mode) (let ((buffer (generate-new-buffer name))) (switch-to-buffer buffer) (set-buffer-major-mode buffer) (funcall buffer-major-mode)) ) (defun new-no-name-buffer () (interactive) (new-buffer \u0026#34;untitled\u0026#34; \u0026#39;text-mode) ) ;;; System ;; (defun numcores () ;; \u0026#34;Return the number of logical processors on this system.\u0026#34; ;; (or ;; ;; Linux ;; (when (file-exists-p \u0026#34;/proc/cpuinfo\u0026#34;) ;; (with-temp-buffer ;; (insert-file-contents \u0026#34;/proc/cpuinfo\u0026#34;) ;; (how-many \u0026#34;^processor[[:space:]]+:\u0026#34;))) ;; ;; Windows ;; (let ((number-of-processors (getenv \u0026#34;NUMBER_OF_PROCESSORS\u0026#34;))) ;; (when number-of-processors ;; (string-to-number number-of-processors))) ;; ;; BSD+OSX ;; (with-temp-buffer ;; (ignore-errors ;; (when (zerop (call-process \u0026#34;sysctl\u0026#34; nil t nil \u0026#34;-n\u0026#34; \u0026#34;hw.ncpu\u0026#34;)) ;; (string-to-number (buffer-string))))) ;; ;; Default ;; 1)) ;;; measure-time ;; (defmacro measure-time (\u0026amp;rest body) ;; \u0026#34;Measure and return the running time of the code block.\u0026#34; ;; (declare (indent defun)) ;; ;; Fresh garbage collection before making any measurements. ;; (garbage-collect) ;; (let ((start (make-symbol \u0026#34;start\u0026#34;))) ;; `(let ((,start (float-time))) ;; ,@body ;; (- (float-time) ,start)))) ;;; random ;; (defun insert-random (n) ;; \u0026#34;Insert a random number between 0 and the prefix argument.\u0026#34; ;; (interactive \u0026#34;P\u0026#34;) ;; (insert (number-to-string (random n)))) ;; ;; (global-set-key (kbd \u0026#34;C-c r\u0026#34;) \u0026#39;insert-random) ;; (cl-defun insert-random-hex (\u0026amp;optional (size 64)) ;; \u0026#34;Insert a random, SIZE-bit number as hexadecimal.\u0026#34; ;; (interactive) ;; (let ((string (make-string (/ size 4) 0)) ;; (digits \u0026#34;0123456789abcdef\u0026#34;)) ;; (dotimes (i (/ size 4)) ;; (setf (aref string i) (aref digits (cl-random 16)))) ;; (insert string))) ;; (defun eval-and-replace (value) ;; \u0026#34;Evaluate the sexp at point and replace it with its value.\u0026#34; ;; (interactive (list (eval-last-sexp nil))) ;; (kill-sexp -1) ;; (insert (format \u0026#34;%S\u0026#34; value))) ;;; Dictionary lookup ;; (defun lookup-word (word) ;; (interactive (list (thing-at-point \u0026#39;word))) ;; (browse-url (format \u0026#34;http://en.wiktionary.org/wiki/%s\u0026#34; word))) ;; (global-set-key (kbd \u0026#34;M-#\u0026#34;) \u0026#39;lookup-word) ;;; Quick switch to scratch buffers ;; (defmacro scratch-key (key buffer-name mode) ;; `(global-set-key ,key (lambda () ;; (interactive) ;; (switch-to-buffer ,buffer-name) ;; (unless (eq major-mode \u0026#39;,mode) ;; (,mode))))) ;; (declare-function js2-mode nil) ;; (declare-function clojure-mode nil) ;; (scratch-key (kbd \u0026#34;C-c s\u0026#34;) \u0026#34;*scratch*\u0026#34; emacs-lisp-mode) ;; (scratch-key (kbd \u0026#34;C-c j\u0026#34;) \u0026#34;*javascript*\u0026#34; js2-mode) ;; (scratch-key (kbd \u0026#34;C-c x\u0026#34;) \u0026#34;*css*\u0026#34; css-mode) ;; (scratch-key (kbd \u0026#34;C-c h\u0026#34;) \u0026#34;*html*\u0026#34; html-mode) ;; ID: 72dc0a9e-c41c-31f8-c8f5-d9db8482de1e ;; (defun find-all-files (dir) ;; \u0026#34;Open all files and sub-directories below the given directory.\u0026#34; ;; (interactive \u0026#34;DBase directory: \u0026#34;) ;; (let* ((list (directory-files dir t \u0026#34;^[^.]\u0026#34;)) ;; (files (cl-remove-if \u0026#39;file-directory-p list)) ;; (dirs (cl-remove-if-not \u0026#39;file-directory-p list))) ;; (dolist (file files) ;; (find-file-noselect file)) ;; (dolist (dir dirs) ;; (find-file-noselect dir) ;; (find-all-files dir)))) ;;; Process menu killing ;; (define-key process-menu-mode-map (kbd \u0026#34;k\u0026#34;) #\u0026#39;process-menu-kill) ;; (defun process-menu-kill () ;; \u0026#34;Kill selected process in the process menu buffer.\u0026#34; ;; (interactive) ;; (let ((process (get-text-property (point) \u0026#39;tabulated-list-id))) ;; (when (processp process) (delete-process process)) ;; (run-at-time 0.1 nil (lambda () ;; (let ((n (line-number-at-pos))) ;; (revert-buffer) ;; (forward-line (1- n))))))) ;;; Help mode assistance ;; (defun push-first-button () ;; \u0026#34;Find and push the first button in this buffer, intended for `help-mode\u0026#39;.\u0026#34; ;; (interactive) ;; (cl-block :find-button ;; (goto-char (point-min)) ;; (while (\u0026lt; (point) (point-max)) ;; (if (get-text-property (point) \u0026#39;button) ;; (cl-return-from :find-button (push-button)) ;; (forward-char))))) ;;; Tabs ;; (defun toggle-tab-width () ;; (interactive) ;; (let* ((loop [8 4 2]) ;; (match (or (cl-position tab-width loop) -1))) ;; (setf tab-width (aref loop (mod (1+ match) (length loop)))))) ;; (global-set-key (kbd \u0026#34;C-h t\u0026#34;) #\u0026#39;toggle-tab-width) Open user-files # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 ;;; Open user-files (defun my/open-fortune-quotes () (interactive ) (find-file \u0026#34;~/sync/obsd/fortunes/quotes-ko.md\u0026#34;)) (defun my/open-dotsamples-readme () (interactive ) (find-file \u0026#34;~/sync/man/dotsamples/README.org\u0026#34;)) (defun my/open-dotspacemacs-org () (interactive) (find-file (concat dotspacemacs-directory \u0026#34;dot-org/spacemacs.org\u0026#34;))) (defun my/open-tempel-templates () (interactive) (find-file (concat dotspacemacs-directory \u0026#34;tempel-templates.eld\u0026#34;))) (defun my/open-hunspell-personal () (interactive) (find-file (concat dotspacemacs-directory \u0026#34;.hunspell_ko_personal\u0026#34;))) (defun my/open-elfeed-list () (interactive) (find-file \u0026#34;~/sync/org/elfeed/elfeed.org\u0026#34;)) (defun my/open-dict-ko-mydata () (interactive) (find-file (concat dotspacemacs-directory \u0026#34;dict-ko-mydata.yaml\u0026#34;))) (defun my/open-abbrev-defs () (interactive) (find-file \u0026#34;~/spacemacs/.cache/abbrev_defs\u0026#34;)) (defun my/open-dotworkflow-org () (interactive) (find-file (concat dotspacemacs-directory \u0026#34;lisp/my-org-workflow.org\u0026#34;))) (defun my/open-csaroid-list () (interactive) (find-file \u0026#34;~/sync/org/csaoid/\u0026#34;)) Terminal Mode Hook # doomemacs/doomemacs#5167 Scrolling for touch devices - En\u0026hellip;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ;;; Terminal mode hook ;; turn off =show-smartparens-global-mode= ;; turn off =global-page-break-lines-mode= ;; scrolling for touch devices enable the function mouse-wheel-mode (defun jh-base/enable-terminal-mode () (message \u0026#34;[LOG] jh-base/enable-terminal-mode\u0026#34;) (show-smartparens-global-mode -1) (global-page-break-lines-mode -1) ;; I have successfully used the following configuration in Spacemacs on termux ;; (Android) to be able to scroll vertically with screen gestures (swipe up / ;; down) : (load \u0026#34;mwheel\u0026#34;) (mwheel-install) (mouse-wheel-mode 1) (setq mouse-wheel-progressive-speed nil) (setq redisplay-dont-pause t) (setq mouse-wheel-scroll-amount \u0026#39;(1 ((shift) . 1) ((control) . nil))) ) (unless (display-graphic-p) ;; (add-hook \u0026#39;spacemacs-post-user-config-hook (add-hook \u0026#39;after-init-hook #\u0026#39;jh-base/enable-terminal-mode)) Configs # 1 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- TODO Parens Stuff (built-in) # GitHub - AmaiKinono/puni: Structured editing (soft deleti\u0026hellip;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 ;;; Paren and Electric-pair ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Matching.html ;; 괄호, 구분자(delimiter) 쌍 강조 (with-eval-after-load \u0026#39;paren ;; 괄호만 강조 ;; (setq show-paren-style \u0026#39;parenthesis) ; default ;; 괄호 강조를 즉시 보여준다 ;; (setq show-paren-delay 0) ; 0.125 ;; 괄호 입력 후 내용 입력시 괄호를 강조 (setq show-paren-when-point-inside-paren t) (setq show-paren-when-point-in-periphery t) ;; 괄호 강조를 즉시 보여준다 (setq show-paren-delay 0) ; 0.125 ;; (show-paren-mode) ) ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Matching.html ;; 괄호, 구분자(delimiter) 자동 쌍 맞추기 (setq electric-pair-pairs \u0026#39;((?\\{ . ?\\}) (?\\( . ?\\)) (?\\[ . ?\\]) (?\\\u0026#34; . ?\\\u0026#34;))) ;; tab으로 electic pair 밖으로 나올 수 있게 한다 ;; https://www.reddit.com/r/emacs/comments/3n1j4x/anyway_to_tab_out_of_parentheses/ ;; (progn ;; (defun smart-tab-jump-out-or-indent (\u0026amp;optional arg) ;; (interactive \u0026#34;P\u0026#34;) ;; (let ((closings (mapcar #\u0026#39;cdr electric-pair-pairs)) ;; (after (char-after))) ;; (if (member after closings) ;; (forward-char 1) ;; (indent-for-tab-command arg)))) ;; (global-set-key [remap indent-for-tab-command] \u0026#39;smart-tab-jump-out-or-indent) ;; ) "},{"id":10,"href":"/configs/emacs/jh-checker/","title":"jh-checker layer","section":"menu/Dotfiles/dot-emacs","content":" jh-checker Goals # 프로그래밍 언어와 인간 언어 둘다 검사기가 필요하다.\nsyntax : flycheck and flymake spell : jinx, spell-fu style : 1) en/ko, 2) elisp/binary/lsp-mode Layer # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (configuration-layer/declare-layer-dependencies \u0026#39;( ;; Spell as you type with Flyspell package, ;; requires external command - ispell, hunspell, aspell ;; SPC S menu, SPC S s to check current word ;; (spell-checking ;; ;; flyspell flyspell-correct ;; :packages (not auto-dictionary flyspell-popup flyspell-correct-popup) ;; :variables ;; enable-flyspell-auto-completion nil ;; spell-checking-enable-auto-dictionary nil ;; spell-checking-enable-by-default nil) ;; flycheck :: use flycheck-posframe (syntax-checking :packages (flycheck) ; flycheck-pos-tip :variables syntax-checking-enable-by-default t ; t - enable to prog-mode syntax-checking-enable-tooltips nil ; default t ;; syntax-checking-use-standard-error-navigation t ; default nil ) )) Packages # Packages # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (defconst jh-checker-packages \u0026#39;( flymake flycheck ;;;; 1) Syntax flycheck-posframe consult-flycheck ;; flycheck-eglot ; or flymake ;;;; 2) Spell (jinx :location (recipe :fetcher github :repo \u0026#34;minad/jinx\u0026#34; :files (\u0026#34;*.*\u0026#34;))) spell-fu ;; wcheck-mode ; with enchant2 for english ;;;; 3) Style ;; 1. linters ;; flycheck-grammarly ;; flycheck-vale ;; 2. languagetool ;; languagetool ;; flycheck-languagetool ;; lsp-ltex ;; (lsp-ltex :location (recipe :fetcher github :repo \u0026#34;emacs-languagetool/lsp-ltex\u0026#34;)) ;; 3. grammarly )) Syntax checker # flycheck # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 (defun jh-checker/post-init-flycheck () ;; Default value is (save idle-change new-line mode-enabled) (setq flycheck-check-syntax-automatically \u0026#39;(save idle-buffer-switch mode-enabled)) ;; (global-set-key (kbd \u0026#34;\u0026lt;f2\u0026gt;\u0026#34;) \u0026#39;flycheck-previous-error) ;; (global-set-key (kbd \u0026#34;\u0026lt;f3\u0026gt;\u0026#34;) \u0026#39;flycheck-next-error) ;; (global-set-key (kbd \u0026#34;M-p\u0026#34;) \u0026#39;flycheck-previous-error) ;; (global-set-key (kbd \u0026#34;M-n\u0026#34;) \u0026#39;flycheck-next-error) ;; (define-key flycheck-mode-map (kbd \u0026#34;M-n\u0026#34;) \u0026#39;flycheck-next-error) ;; (define-key flycheck-mode-map (kbd \u0026#34;M-p\u0026#34;) \u0026#39;flycheck-previous-error) (evil-define-key \u0026#39;(normal) flycheck-mode-map (kbd \u0026#34;M-n\u0026#34;) \u0026#39;flycheck-next-error) (evil-define-key \u0026#39;(normal) flycheck-mode-map (kbd \u0026#34;M-p\u0026#34;) \u0026#39;flycheck-previous-error) ;;/ahyatt-dotfiles/.emacs.d/init.el:569 (setq flycheck-disabled-checkers \u0026#39;(emacs-lisp-checkdoc)) (setq-default flycheck-highlighting-mode \u0026#39;lines) ; \u0026#39;symbols ;; Wait before complaining so we don\u0026#39;t step on useful help messages. (setq-default flycheck-idle-change-delay 3) ; default 0.5 ;; If flycheck idle change delay is too short, then it overwrites the helpful ;; messages about how to call elisp functions, etc. ;; (setq flycheck-idle-change-delay 15)) ;; Define fringe indicator / warning levels (define-fringe-bitmap \u0026#39;flycheck-fringe-bitmap-ball (vector #b00000000 #b00000000 #b00000000 #b00000000 #b00000000 #b00000000 #b00000000 #b00011100 #b00111110 #b00111110 #b00111110 #b00011100 #b00000000 #b00000000 #b00000000 #b00000000 #b00000000)) (flycheck-define-error-level \u0026#39;error :severity 2 :overlay-category \u0026#39;flycheck-error-overlay :fringe-bitmap \u0026#39;flycheck-fringe-bitmap-ball :fringe-face \u0026#39;flycheck-fringe-error) (flycheck-define-error-level \u0026#39;warning :severity 1 :overlay-category \u0026#39;flycheck-warning-overlay :fringe-bitmap \u0026#39;flycheck-fringe-bitmap-ball :fringe-face \u0026#39;flycheck-fringe-warning) (flycheck-define-error-level \u0026#39;info :severity 0 :overlay-category \u0026#39;flycheck-info-overlay :fringe-bitmap \u0026#39;flycheck-fringe-bitmap-ball :fringe-face \u0026#39;flycheck-fringe-info) ) flycheck-posframe # 이게 궁합이 잘 맞는다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 (defun jh-checker/init-flycheck-posframe () (use-package flycheck-posframe :after flycheck :ensure :config (add-hook \u0026#39;flycheck-mode-hook #\u0026#39;flycheck-posframe-mode) (setq flycheck-posframe-position \u0026#39;window-bottom-left-corner) ;; (flycheck-posframe-configure-pretty-defaults) ; default face (setq flycheck-posframe-warning-prefix \u0026#34;💡 \u0026#34;) (setq flycheck-posframe-error-prefix \u0026#34;⛔ \u0026#34;) (set-face-attribute \u0026#39;flycheck-posframe-warning-face nil :inherit \u0026#39;warning) (set-face-attribute \u0026#39;flycheck-posframe-error-face nil :inherit \u0026#39;error) ;; (setq flycheck-posframe-border-use-error-face t) ;; (setq flycheck-posframe-border-width 1) )) consult-flycheck # 1 2 3 4 5 6 7 8 9 10 11 12 (defun jh-checker/init-consult-flycheck () (use-package consult-flycheck :after flycheck :defer :bind (:map flycheck-command-map (\u0026#34;!\u0026#34; . consult-flycheck)) ;; If flycheck idle change delay is too short, then it overwrites the helpful ;; messages about how to call elisp functions, etc. :config (setq flycheck-idle-change-delay 15) (global-set-key (kbd \u0026#34;M-g l\u0026#34;) \u0026#39;consult-flycheck) ) ) flymake # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 (defun jh-checker/init-flymake () (use-package flymake :defer 10 :bind ((\u0026#34;M-g D\u0026#34; . flymake-show-buffer-diagnostics) (\u0026#34;M-g C-d\u0026#34; . flymake-show-project-diagnostics) (\u0026#34;M-g C-n\u0026#34; . flymake-goto-next-error) (\u0026#34;M-g C-p\u0026#34; . flymake-goto-prev-error) :repeat-map flymake-repeatmap (\u0026#34;p\u0026#34; . flymake-goto-prev-error) (\u0026#34;n\u0026#34; . flymake-goto-next-error) :map flymake-diagnostics-buffer-mode-map (\u0026#34;?\u0026#34; . flymake-show-diagnostic-here) :map flymake-project-diagnostics-mode-map (\u0026#34;?\u0026#34; . flymake-show-diagnostic-here)) ;; :hook (prog-mode . (lambda () (flymake-mode t))) :config (defun flymake-show-diagnostic-here (pos \u0026amp;optional other-window) \u0026#34;Show the full diagnostic of this error. Used to see multiline flymake errors\u0026#34; (interactive (list (point) t)) (let* ((id (or (tabulated-list-get-id pos) (user-error \u0026#34;Nothing at point\u0026#34;))) (text (flymake-diagnostic-text (plist-get id :diagnostic)))) (message text))) (remove-hook \u0026#39;flymake-diagnostic-functions #\u0026#39;flymake-proc-legacy-flymake)) ) Spell checker # 김아더 WordNet 안뇽 Helle\njinx for Korean # jinx 한글 커버\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 (defun jh-checker/init-jinx () (use-package jinx :ensure :init (spacemacs/declare-prefix \u0026#34;S\u0026#34; \u0026#34;spelling\u0026#34;) (spacemacs/set-leader-keys \u0026#34;Sj\u0026#34; \u0026#39;jinx-correct) ; ko (spacemacs/set-leader-keys \u0026#34;SJ\u0026#34; \u0026#39;jinx-mode) ; ko :config (setq jinx-languages \u0026#34;ko\u0026#34;) (setq jinx-delay 0.5) ; default 0.2 ;; (dolist (hook \u0026#39;(text-mode-hook conf-mode-hook)) ; prog-mode-hook ;; (add-hook hook #\u0026#39;jinx-mode)) (add-hook \u0026#39;org-mode-hook #\u0026#39;jinx-mode) ;; 한글만 검사하면 된다. (setq jinx-exclude-regexps \u0026#39;((t \u0026#34;[A-Za-z]\u0026#34; \u0026#34;[\u0026#39;]\u0026#34;))) ;; 아래는 기본인데 일단 해보면서 보자. ;; \u0026#34;[A-Z]+\\\\\u0026gt;\u0026#34; ;; Uppercase words ;; \u0026#34;\\\\w*?[0-9]\\\\w*\\\\\u0026gt;\u0026#34; ;; Words with numbers, hex codes ;; \u0026#34;[a-z]+://\\\\S-+\u0026#34; ;; URI ;; \u0026#34;\u0026lt;?[-+_.~a-zA-Z][-+_.~:a-zA-Z0-9]*@[-.a-zA-Z0-9]+\u0026gt;?\u0026#34; ;; Email ;; \u0026#34;\\\\(?:Local Variables\\\\|End\\\\):\\\\s-*$\u0026#34; ;; Local variable indicator ;; \u0026#34;jinx-\\\\(?:languages\\\\|local-words\\\\):\\\\s-+.*$\u0026#34;)) ;; Local variables ;; M-$점 앞의 철자가 틀린 단어에 대한 수정을 트리거합니다. ;; C-u M-$전체 버퍼에 대한 수정을 트리거합니다. (keymap-global-set \u0026#34;M-$\u0026#34; #\u0026#39;jinx-correct) ;; (keymap-global-set \u0026#34;C-;\u0026#34; #\u0026#39;jinx-correct) (keymap-global-set \u0026#34;C-M-$\u0026#34; #\u0026#39;jinx-languages) ;; (keymap-global-set \u0026#34;\u0026lt;remap\u0026gt; \u0026lt;ispell-word\u0026gt;\u0026#34; #\u0026#39;jinx-correct) ;; (define-key jinx-misspelled-map (kbd \u0026#34;C-;\u0026#34;) \u0026#39;jinx-correct) )) spell-fu for English # 영어는 빠른 스펠푸로\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 (defun jh-checker/init-spell-fu () (use-package spell-fu :defer :init (+spell-fu-register-dictionaries \u0026#34;en\u0026#34;) ;; (require \u0026#39;ispell) ;; (setq ispell-dictionary \u0026#34;en_US\u0026#34;) ;; (setq ispell-program-name \u0026#34;aspell\u0026#34;) ;; (setq ispell-personal-dictionary \u0026#34;~/.aspell_en_personal\u0026#34;) :config (spacemacs/set-leader-keys \u0026#34;Sf\u0026#34; \u0026#39;+spell-fu-correct) (spacemacs/set-leader-keys \u0026#34;Sa\u0026#34; \u0026#39;spell-fu-word-add) (spacemacs/set-leader-keys \u0026#34;SF\u0026#34; \u0026#39;spell-fu-mode) ;; replace ispell-word (define-key evil-normal-state-map \u0026#34;z=\u0026#34; \u0026#39;+spell-fu-correct) (define-key evil-visual-state-map \u0026#34;z=\u0026#34; \u0026#39;+spell-fu-correct) ;; (keymap-global-set \u0026#34;M-$\u0026#34; #\u0026#39;jinx-correct) TODO find new bindings (setq spell-fu-idle-delay 1) ; default 0.25 (defcustom +spell-excluded-faces-alist \u0026#39;((markdown-mode . (markdown-code-face markdown-html-attr-name-face markdown-html-attr-value-face markdown-html-tag-name-face markdown-inline-code-face markdown-link-face markdown-markup-face markdown-plain-url-face markdown-reference-face markdown-url-face)) (org-mode . (org-block org-block-begin-line org-block-end-line org-cite org-cite-key org-level-1 org-level-2 org-level-3 org-level-4 org-level-5 org-code org-date org-footnote org-formula org-inline-src-block org-latex-and-related org-link org-meta-line org-property-value org-ref-cite-face org-special-keyword org-tag org-todo org-todo-keyword-done org-todo-keyword-habt org-todo-keyword-kill org-todo-keyword-outd org-todo-keyword-todo org-todo-keyword-wait org-verbatim)) (latex-mode . (font-latex-math-face font-latex-sedate-face font-lock-function-name-face font-lock-keyword-face font-lock-variable-name-face))) \u0026#34;Faces in certain major modes that spell-fu will not spellcheck.\u0026#34; :group \u0026#39;spell-fu :type \u0026#39;(repeat (cons symbol (repeat face)))) (add-hook \u0026#39;spell-fu-mode-hook (defun +spell-fu--init-excluded-faces-h () \u0026#34;Set `spell-fu-faces-exclude\u0026#39; according to `+spell-excluded-faces-alist\u0026#39;.\u0026#34; (when-let (excluded (cdr (cl-find-if #\u0026#39;derived-mode-p +spell-excluded-faces-alist :key #\u0026#39;car))) (setq-local spell-fu-faces-exclude excluded))))) ;; spell-fu for english ;; (spell-fu-global-mode) (dolist (hook \u0026#39;(org-mode-hook markdown-mode-hook prog-mode-hook)) ; conf-mode-hook (add-hook hook #\u0026#39;spell-fu-mode)) ) Funcs # 1 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- spell-fu functions # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 ;; Adapted from Doom Emacs (defun +spell-fu--correct (replace poss word orig-pt start end) \u0026#34;Correct word with spell-fu.\u0026#34; (cond ((eq replace \u0026#39;ignore) (goto-char orig-pt) nil) ((eq replace \u0026#39;save) (goto-char orig-pt) (ispell-send-string (concat \u0026#34;*\u0026#34; word \u0026#34;\\n\u0026#34;)) (ispell-send-string \u0026#34;#\\n\u0026#34;) (setq ispell-pdict-modified-p \u0026#39;(t))) ((or (eq replace \u0026#39;buffer) (eq replace \u0026#39;session)) (ispell-send-string (concat \u0026#34;@\u0026#34; word \u0026#34;\\n\u0026#34;)) (add-to-list \u0026#39;ispell-buffer-session-localwords word) (or ispell-buffer-local-name ; session localwords might conflict (setq ispell-buffer-local-name (buffer-name))) (if (null ispell-pdict-modified-p) (setq ispell-pdict-modified-p (list ispell-pdict-modified-p))) (goto-char orig-pt) (if (eq replace \u0026#39;buffer) (ispell-add-per-file-word-list word))) (replace (let ((new-word (if (atom replace) replace (car replace))) (orig-pt (+ (- (length word) (- end start)) orig-pt))) (unless (equal new-word (car poss)) (delete-region start end) (goto-char start) (insert new-word)))) ((goto-char orig-pt) nil))) ;; Adapted from Doom Emacs ;;;###autoload (defun +spell-fu-correct () \u0026#34;Correct spelling of word at point.\u0026#34; (interactive) ;; spell-fu fails to initialize correctly if it can\u0026#39;t find aspell or a similar ;; program. We want to signal the error, not tell the user that every word is ;; spelled correctly. (unless (or (and ispell-really-aspell ispell-program-name) (executable-find \u0026#34;aspell\u0026#34;)) (user-error \u0026#34;Aspell is required for spell checking\u0026#34;)) (ispell-set-spellchecker-params) (save-current-buffer (ispell-accept-buffer-local-defs)) (if (not (featurep \u0026#39;vertico)) (call-interactively #\u0026#39;ispell-word) (cl-destructuring-bind (start . end) (or (bounds-of-thing-at-point \u0026#39;word) (user-error \u0026#34;No word at point\u0026#34;)) (let ((word (thing-at-point \u0026#39;word t)) (orig-pt (point)) poss ispell-filter) (ispell-send-string \u0026#34;%\\n\u0026#34;) (ispell-send-string (concat \u0026#34;^\u0026#34; word \u0026#34;\\n\u0026#34;)) (while (progn (accept-process-output ispell-process) (not (string= \u0026#34;\u0026#34; (car ispell-filter))))) ;; Remove leading empty element (setq ispell-filter (cdr ispell-filter)) ;; ispell process should return something after word is sent. Tag word as ;; valid (i.e., skip) otherwise (unless ispell-filter (setq ispell-filter \u0026#39;(*))) (when (consp ispell-filter) (setq poss (ispell-parse-output (car ispell-filter)))) (cond ((or (eq poss t) (stringp poss)) ;; don\u0026#39;t correct word (message \u0026#34;%s is correct\u0026#34; (funcall ispell-format-word-function word)) t) ((null poss) ;; ispell error (error \u0026#34;Ispell: error in Ispell process\u0026#34;)) (t ;; The word is incorrect, we have to propose a replacement. (setq res (completing-read (format \u0026#34;Corrections for %S: \u0026#34; word) (nth 2 poss))) (unless res (setq res (cons \u0026#39;break word))) (cond ((stringp res) (+spell-fu--correct res poss word orig-pt start end)) ((let ((cmd (car res)) (wrd (cdr res))) (unless (or (eq cmd \u0026#39;skip) (eq cmd \u0026#39;break) (eq cmd \u0026#39;stop)) (+spell-fu--correct cmd poss wrd orig-pt start end) (unless (string-equal wrd word) (+spell-fu--correct wrd poss word orig-pt start end)))))) (ispell-pdict-save t))))))) (defun +spell-fu--add-dictionary (lang) \u0026#34;Add `LANG` to spell-fu multi-dict, with a personal dictionary.\u0026#34; ;; Add the dictionary (spell-fu-dictionary-add (spell-fu-get-ispell-dictionary lang)) (let ((personal-dict-file (expand-file-name (format \u0026#34;personal-aspell.%s.pws\u0026#34; lang) spell-fu-directory))) ;; Create an empty personal dictionary if it doesn\u0026#39;t exists (unless (file-exists-p personal-dict-file) (write-region \u0026#34;\u0026#34; nil personal-dict-file)) ;; Add the personal dictionary (spell-fu-dictionary-add (spell-fu-get-personal-dictionary (format \u0026#34;%s-personal\u0026#34; lang) personal-dict-file)))) ;;;###autoload (defmacro +spell-fu-register-dictionaries (\u0026amp;rest langs) \u0026#34;Register dictionaries for `LANGS` to spell-fu\u0026#39;s multi-dict.\u0026#34; (let* ((fn-name (intern (format \u0026#34;+spell-fu--multi-langs-%s-h\u0026#34; (string-join langs \u0026#34;-\u0026#34;)))) (closure `(defun ,fn-name ()))) (dolist (lang langs) (add-to-list \u0026#39;closure `(+spell-fu--add-dictionary ,lang) t)) (append \u0026#39;(add-hook (quote spell-fu-mode-hook)) (list closure)))) "},{"id":11,"href":"/configs/emacs/jh-clojure/","title":"jh-clojure layer","section":"menu/Dotfiles/dot-emacs","content":" jh-clojure Goals # clojure layer\nLayer # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (configuration-layer/declare-layer-dependencies \u0026#39;( ;; https://develop.spacemacs.org/layers/+lang/clojure/README.html ;; clj-kondo를 flycheck로 쓰고 싶다면 아래를 활성화 한다. ;; 물론, 그럴 필요가 없다. clojure-lsp가 기본으로 clj-kondo를 사용하고, ;; lsp-mode는 이 정보를 받기에 굳이 clj-kondo를 flycheck로 쓸 필요가 없다. ;; pracicalli에서 제공하는 clojure-edn과 clojure-lsp repo를 ~/.config에 포크하고 ;; 버전 및 필요한 기능을 관리하면 된다. clj-kondo 버전도 edn에 명시되어 있기에 ;; 따로 clj-kondo를 설치할 필요도 없다. 궁합이 잘 맞는 버전을 설정해 놨을 터이니 ;; 그냥 쓰면 된다. 집중할 것은 lsp-mode, lsp-ui 설정이다. ;; 개인의 취향과 실력에 따라서 lsp 설정을 하기에 존의 minimal ui 설정은 ;; 초보자에게는 부족할 수가 있다. 그냥 따를 것이 아니라 내가 결정해야 한다. ;; /home/junghan/.emacs.d/layers/+lang/clojure/packages.el:24 ;; (cider :location elpa :min-version \u0026#34;1.5.0\u0026#34;) ;; (clojure-mode :location elpa :min-version \u0026#34;5.16.0\u0026#34;) (clojure :variables ; clojure-backend \u0026#39;cider ;; use cider and disable lsp ; clojure-enable-linters \u0026#39;clj-kondo ;; clj-kondo included in lsp ;; for layer clojure-enable-kaocha-runner t ;; enable Kaocha test runner ;; clojure-enable-clj-refactor nil ; default nil ;; clojure-enable-sayid nil ; default nil ;; for clojure-mode ;; clojure-indent-style \u0026#39;align-arguments ; user-config ;; clojure-align-forms-automatically t ; user-config clojure-toplevel-inside-comment-form t ;; evaluate expressions in comment as top level ;;; for cider ;; cider-repl-pop-to-buffer-on-connect nil ; REPL buffer shown at starup ;; cider-repl-display-help-banner nil ; disable help banner ;; cider-print-fn \u0026#39;puget ; pretty printing with sorted keys / set values ;; cider-result-overlay-position \u0026#39;at-point ; results shown right after expression cider-overlays-use-font-lock t cider-repl-buffer-size-limit 500 ; limit lines shown in REPL buffer ;; cider-repl-history-size 42 ; default 500 cider-preferred-build-tool \u0026#39;clojure-cli ) )) Packages # Packages # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (defconst jh-clojure-packages \u0026#39;( ;; 재정의 패키지 clojure-mode cider ;; clojure-essential-ref ;; clojars ;; walkclj )) clojure-mode # clojure-mode # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 (defun jh-clojure/post-init-clojure-mode () ;; copy from corgi (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.endl$\u0026#34; . clojure-mode)) (add-to-list \u0026#39;magic-mode-alist \u0026#39;(\u0026#34;^#![^\\n]*/\\\\(clj\\\\|clojure\\\\|bb\\\\|lumo\\\\)\u0026#34; . clojure-mode)) ;; Because of CIDER\u0026#39;s insistence to send forms to all linked REPLs, we ;; *have* to be able to switch cljc buffer to clj/cljs mode without ;; cider complaining. ;; (setq clojure-verify-major-mode nil) ; 나중에 해보고 ;; Do not indent single ; comment characters (add-hook \u0026#39;clojure-mode-hook (lambda () (setq-local comment-column 0))) ;; Indentation of function forms ;; https://github.com/clojure-emacs/clojure-mode#indentation-of-function-forms (setq clojure-indent-style \u0026#39;align-arguments) ;; Vertically align s-expressions ;; https://github.com/clojure-emacs/clojure-mode#vertical-alignment (setq clojure-align-forms-automatically t) ;; Auto-indent code automatically ;; WARNING - really conflicts with LSP formatting - set lsp-enable-on-type-formatting to nil in lsp layer ;; https://emacsredux.com/blog/2016/02/07/auto-indent-your-code-with-aggressive-indent-mode/ (add-hook \u0026#39;clojure-mode-hook \u0026#39;aggressive-indent-mode) ;; auto flycheck-mode off ;; (add-hook \u0026#39;clojure-mode-hook \u0026#39;flycheck-mode) ;; Lookup functions in Clojure - The Essentail Reference book ;; https://github.com/p3r7/clojure-essential-ref ;; (spacemacs/set-leader-keys \u0026#34;oh\u0026#34; \u0026#39;clojure-essential-ref) ;; Safe structural editing for all major modes ;; (spacemacs/toggle-evil-safe-lisp-structural-editing-on-register-hooks) ;; for clojure layer only (comment out line above) (add-hook \u0026#39;spacemacs-post-user-config-hook #\u0026#39;spacemacs/toggle-evil-safe-lisp-structural-editing-on-register-hook-clojure-mode) func # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 ;; toggle reader macro sexp comment ;; toggles the #_ characters at the start of an expression (defun clojure-toggle-reader-comment-sexp () (interactive) (let* ((point-pos1 (point))) (evil-insert-line 0) (let* ((point-pos2 (point)) (cmtstr \u0026#34;#_\u0026#34;) (cmtstr-len (length cmtstr)) (line-start (buffer-substring-no-properties point-pos2 (+ point-pos2 cmtstr-len))) (point-movement (if (string= cmtstr line-start) -2 2)) (ending-point-pos (+ point-pos1 point-movement 1))) (if (string= cmtstr line-start) (delete-char cmtstr-len) (insert cmtstr)) (goto-char ending-point-pos))) (evil-normal-state)) ;; ;; Assign keybinding to the toggle-reader-comment-sexp function (define-key global-map (kbd \u0026#34;C-#\u0026#34;) \u0026#39;clojure-toggle-reader-comment-sexp) ;; ;; Toggle view of a clojure `(comment ,,,) block\u0026#39; (defun clojure-hack/toggle-comment-block (arg) \u0026#34;Close all top level (comment) forms. With universal arg, open all.\u0026#34; (interactive \u0026#34;P\u0026#34;) (save-excursion (goto-char (point-min)) (while (search-forward-regexp \u0026#34;^(comment\\\\\u0026gt;\u0026#34; nil \u0026#39;noerror) (call-interactively (if arg \u0026#39;evil-open-fold \u0026#39;evil-close-fold))))) (evil-define-key \u0026#39;normal clojure-mode-map \u0026#34;zC\u0026#34; \u0026#39;clojure-hack/toggle-comment-block \u0026#34;zO\u0026#34; (lambda () (interactive) (clojure-hack/toggle-comment-block \u0026#39;open))) end # 1 ) Cider # john\u0026rsquo;s doom 을 보면 아래와 같이 popup-rule 이 잡혀있다. 둠에서는 이렇게 쉽다니 스맥스도 어렵지 않다. shackle, poppler 와 같은 패키지를 이야기하지만 배포판을 쓰는 경우라면 해당 배포판의 룰을 따르는게 맞다. 아니면 Emacs 기본 함수를 메뉴얼보고 사용하면 된다. 다행히 popwin 을 설정하면 된다. 아래와 같이 설정해야 한다. regexp t 를 설정 안하면 인식이 안된다. 이 정도면 충분하다. 그리고 stick nil 을 설정했다. 이건 상황 보면서 바꾸면 된다. 아무튼 popwin 을 쓰게 되어 다행이다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 (defun jh-clojure/post-init-cider () ;;; Clojure (clojure-mode and accoutrements) ;; NOTE 2022-11-21: for the linter (clj-kondo), refer to the Flymake ;; NOTE 2022-11-23: This is not final. I will iterate on it over ;; time as I become more familiar with the requirements. (setq cider-repl-result-prefix \u0026#34;;; =\u0026gt; \u0026#34; cider-eval-result-prefix \u0026#34;\u0026#34; cider-connection-message-fn nil ; cute, but no! cider-repl-prompt-function #\u0026#39;my/cider-repl-prompt cider-use-overlays nil ; echo area is fine cider-repl-display-help-banner nil) (defun my/cider-repl-prompt (namespace) \u0026#34;Return a prompt string that mentions NAMESPACE.\u0026#34; (format \u0026#34;%s🦄 \u0026#34; (cider-abbreviate-ns namespace))) ) cider corfu bugfix # 1 2 3 4 5 6 (with-eval-after-load \u0026#39;cider ;; Spacemacs bug fix (evil-define-key \u0026#39;insert cider-repl-mode-map (kbd \u0026#34;C-j\u0026#34;) \u0026#39;corfu-next (kbd \u0026#34;C-k\u0026#34;) \u0026#39;corfu-previous) ) OFF cider company bugfix # 1 2 3 4 5 6 ;; (with-eval-after-load \u0026#39;cider ;; ;; Spacemacs bug fix ;; (evil-define-key \u0026#39;insert cider-repl-mode-map ;; (kbd \u0026#34;C-j\u0026#34;) \u0026#39;company-select-next ;; (kbd \u0026#34;C-k\u0026#34;) \u0026#39;company-select-previous) ;; ) "},{"id":12,"href":"/configs/emacs/jh-coding/","title":"jh-coding layer","section":"menu/Dotfiles/dot-emacs","content":" jh-coding Goals # 설정 파일 및 Emacs 활용에 필요한 코드 관련 레이어 및 패키지.\nLayer # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (configuration-layer/declare-layer-dependencies \u0026#39;( (emacs-lisp :packages (not company counsel-gtags emr)) ;; For common-lisp dev. work with slime ;; you should install latest stable \u0026#39;sbcl\u0026#39; first ;; (common-lisp ;; :packages (not helm counsel-gtags slime-company)) csv ; Tools to work with comma separate values e.g. data science data graphviz ; graphviz - open-source graph declaration system (json :packages (not company)) (yaml :variables yaml-enable-lsp nil) ;; semantic-web ;; linting, style checking, formatting supports (shell-scripts :packages (not counsel-gtags company company-shell fish-mode) :variables shell-scripts-format-on-save t shell-scripts-backend \u0026#39;lsp) ;; (julia :variables ;; ;; julia-mode-enable-ess t ; use \u0026#39;ess\u0026#39; layer ;; julia-backend \u0026#39;lsp) ;; (ruby :variables ;; ruby-backend \u0026#39;robe ; default \u0026#39;robe or \u0026#39;lsp ;; ruby-test-runner \u0026#39;ruby-test ; default ;; ruby-version-manager nil ; rbenv, rvm, chruby ;; ruby-prettier-on-save t ; default nil ;; ) ;; (go :variables ;; go-backend \u0026#39;lsp ;; go-format-before-save t ;; go-tab-width 4) (html :packages (not company company-web) :variables ;; web-fmt-tool \u0026#39;prettier web-mode-markup-indent-offset 2 web-mode-css-indent-offset 2 web-mode-code-indent-offset 2 ;; css-indent-offset 2 ) ;; (rust :variables ;; rust-format-on-save t ;; rust-backend \u0026#39;lsp) ;; sql )) Packages # Packages # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (defconst jh-coding-packages \u0026#39;( ;;;; 새로 등록하는 패키지 ;; eglot ;; eldoc-box ;; xref ;; flymake ;; treesit treeview ; for inspector in emacs-lisp layer format-all ;; apheleia ;; scopeline ;;;; emacs 29 (emacsql-sqlite-builtin :toggle (version\u0026lt; \u0026#34;29.0.50\u0026#34; emacs-version)) ;; Emacs 29 ;; emacsql-sqlite-builtin ;; treesit-auto ;; (treesit-auto :toggle (version\u0026lt;= \u0026#34;29.0.50\u0026#34; emacs-version)) ;; (combobulate ;; :toggle (version\u0026lt; \u0026#34;29.0.50\u0026#34; emacs-version) ;; :location (recipe :fetcher github :repo \u0026#34;mickeynp/combobulate\u0026#34;)) ;; (evil-ts ;; :toggle (version\u0026lt; \u0026#34;29.0.50\u0026#34; emacs-version) ;; :location (recipe :fetcher github :repo \u0026#34;foxfriday/evil-ts\u0026#34;)) )) emacs-lisp layer elisp # 현재 설정 참고할 것 그리고 아래 가이드 문서 준수 할 것\nelisp pkg dev \u0026ndash; alphapapa disable emr on layer treeview # 1 2 3 (defun jh-coding/init-treeview () (use-package treeview :defer t) ) format-all # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 (defun jh-coding/init-format-all () (use-package format-all :ensure :defer 5 :hook ( (prog-mode . format-all-mode) (yaml-mode . format-all-mode) (format-all-mode . format-all-ensure-formatter)) ) ) ;; (use-package apheleia ;; :ensure ;; :config ;; ;; (setf (alist-get \u0026#39;isort apheleia-formatter) ;; ;; \u0026#39;(\u0026#34;isort\u0026#34; \u0026#34;--stdout\u0026#34; \u0026#34;-\u0026#34;)) ;; ;; (setf (alist-get \u0026#39;python-mode apheleia-mode-alist) ;; ;; \u0026#39;(isort black)) ;; (apheleia-global-mode +1) ;; ) sqlite-builtin # 1 2 (defun jh-coding/init-emacsql-sqlite-builtin () (use-package emacsql-sqlite-builtin :ensure)) TODO Clue # [2023-05-29 Mon 07:51] https://github.com/AmaiKinono/clue\nClue is a tool for helping you take notes while reading code. Code reading is all about finding connections between different locations in a project. With clue, you can take notes about these connections in plain text (or your favorite markup language), and insert links to take you to these locations.\n코드를 읽으면서 메모를 남긴다. 이거 말고도 전통적인 방법이 있을 것 같은데? 그거 부터 찾아보았으면 한다. projectile 에 이미 있거나 붙어있는 기능으로 사용하면 좋겠다.\n"},{"id":13,"href":"/configs/emacs/jh-completion/","title":"jh-completion layer","section":"menu/Dotfiles/dot-emacs","content":" jh-completion Goals # compleseus layer corfu misc reload emacs and test Layer # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (configuration-layer/declare-layer-dependencies \u0026#39;( ;; auto-yasnippet yasnippet yasnippet-snippets (auto-completion :packages (hippie-exp smartparens yasnippet)) (compleseus :variables compleseus-engine \u0026#39;vertico vertico-resize \u0026#39;grow-only marginalia-align \u0026#39;left completion-ignore-case nil ; default nil read-file-name-completion-ignore-case nil ; default nil ) )) Packages # Packages # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: ;;;; Package Lists (defconst jh-completion-packages \u0026#39;( ;; 재정의 패키지 embark consult ;; 새로 등록하는 패키지 ;; consult-eglot ;; consult-dir corfu cape tempel (cape-yasnippet :location (recipe :fetcher github :repo \u0026#34;elken/cape-yasnippet\u0026#34;)) ;; (tabnine-capf :location (recipe :fetcher github ;; :repo \u0026#34;50ways2sayhard/tabnine-capf\u0026#34; ;; :files (\u0026#34;*.el\u0026#34; \u0026#34;*.sh\u0026#34;))) ;; (vertico-buffer ;; :location (recipe :fetcher url ;; :url \u0026#34;https://raw.githubusercontent.com/minad/vertico/main/extensions/vertico-buffer.el\u0026#34;)) ;; (mini-popup :location (recipe :fetcher github :repo \u0026#34;minad/mini-popup\u0026#34;)) ;; (vertico-posframe :location (recipe :fetcher github :repo \u0026#34;tumashu/vertico-posframe\u0026#34;)) ;; (vertico-multiform ;; :location (recipe :fetcher url ;; :url \u0026#34;https://raw.githubusercontent.com/minad/vertico/main/extensions/vertico-multiform.el\u0026#34;)) )) Compleseus Layer vectico with orderless and marginalia # 이거 모르면 자동완성 덕분에(?) 애먹는다. 자동완성 무시하고 입력 값만 사용! M-RET vertico-exit-input\nCompleseus 레이어 문서를 보면 vectico 패밀리 패키지가 잘 정리되어 있다. 몇 가지 수정 사항만 여기에 다룬다.\nGitHub - minad/vertico: vertico.el - VERTical Interactive COmpletion 이만한 패키지가 어디 있겠나!\nvertico-buffer: vertico-buffer-mode to display Vertico in a separate buffer. vertico-directory: Commands for Ido-like directory navigation. vertico-indexed: vertico-indexed-mode to select indexed candidates with prefix arguments. vertico-mouse: vertico-mouse-mode to support for scrolling and candidate selection. vertico-multiform: Configure Vertico modes per command or completion category. vertico-quick: Commands to select using Avy-style quick keys. vertico-repeat: The command vertico-repeat repeats the last completion session. vertico-reverse: vertico-reverse-mode to reverse the display. vertico-unobtrusive: vertico-unobtrusive-mode displays only the topmost candidate. vertico-flat: vertico-flat-mode to enable a flat, horizontal display. vertico-grid: vertico-grid-mode to enable a grid display. Actions via embark # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ;;;; Embark (defun jh-completion/post-init-embark () (require \u0026#39;embark) ;; By default, embark doesn\u0026#39;t know how to handle org-links. Let\u0026#39;s provide a way. (defun ash/org-link () \u0026#34;Get the link from an org-link.\u0026#34; (require \u0026#39;s) (let ((context (org-element-context))) (cond ((and (eq (car context) \u0026#39;link) (equal (plist-get (cadr context) :type) \u0026#34;file\u0026#34;)) (cons \u0026#39;file (plist-get (cadr context) :path))) ((and (eq (car context) \u0026#39;link) (member (plist-get (cadr context) :type) \u0026#39;(\u0026#34;http\u0026#34; \u0026#34;https\u0026#34;))) (cons \u0026#39;url (concat (plist-get (cadr context) :type) \u0026#34;:\u0026#34; (s-trim-right (plist-get (cadr context) :path))))) (t nil)))) (add-to-list \u0026#39;embark-target-finders \u0026#39;ash/org-link) ) Corfu Completion UI # 2023-05-04 전체적으로 튜닝 /home/junghan/sync/man/dotsamples/vanilla/chrisbarrett-dotfiles/config.org\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 ;;;; Corfu (defun jh-completion/init-corfu () (use-package corfu :after evil-collection :demand t :bind (:map corfu-map (\u0026#34;M-.\u0026#34; . corfu-move-to-minibuffer) ;; (\u0026#34;M-d\u0026#34; . corfu-show-documentation) (\u0026#34;M-l\u0026#34; . \u0026#39;corfu-show-location) ) :custom (corfu-auto t) ; Enable auto completion (corfu-cycle t) ;; Enable cycling for `corfu-next/previous\u0026#39; ;; (corfu-min-width 25) ; default 15 (corfu-auto-prefix 1) (corfu-auto-delay 0.20) ;; (corfu-count 14) ;; (corfu-scroll-margin 4) ;; Also here to be extra-safe that this is set when `corfu-popupinfo\u0026#39; is ;; loaded. I do not want documentation shown in both the echo area and in ;; the `corfu-popupinfo\u0026#39; popup. ;; (corfu-echo-documentation nil) ;; (corfu-bar-width 0.5) ;; /home/junghan/sync/man/dotsamples/vanilla/jwiegley-dot-files/init.org ;; (corfu-separator ?\\s) ;; Orderless field separator : SPC ;; ;; (corfu-quit-at-boundary nil) ;; Never quit at completion boundary ;; ;; (corfu-quit-no-match nil) ;; Never quit, even if there is no match ;; (corfu-quit-no-match \u0026#39;separator) ;; or t ;; ;; (corfu-preview-current nil) ;; Disable current candidate preview ;; ;; (corfu-preselect \u0026#39;prompt) ;; Preselect the prompt ;; (corfu-on-exact-match nil) ;; Configure handling of exact matches :init ;; TAB cycle if there are only few candidates ;; (setq completion-cycle-threshold 3) (setq completion-cycle-threshold nil) ; Always show candidates in menu ;; Enable indentation+completion using the TAB key. ;; `completion-at-point\u0026#39; is often bound to M-TAB. (setq tab-always-indent \u0026#39;complete) ;; (setq completion-ignore-case t) ;; (setq read-buffer-completion-ignore-case t) ;; (setq read-file-name-completion-ignore-case t) ;; (setq-default case-fold-search t) ; For general regexp (setq read-file-name-completion-ignore-case t) (require \u0026#39;corfu-history) (require \u0026#39;corfu-popupinfo) (set-face-attribute \u0026#39;corfu-popupinfo nil :height 0.95) ;; (setq corfu-echo-documentation nil) (setq corfu-popupinfo-delay 0.2) ; 0.5 ;; (setq corfu-popupinfo-max-width 70) ;; (setq corfu-popupinfo-max-height 20) :config (with-eval-after-load \u0026#39;evil (define-key corfu-map (kbd \u0026#34;C-j\u0026#34;) \u0026#39;corfu-next) (define-key corfu-map (kbd \u0026#34;C-k\u0026#34;) \u0026#39;corfu-previous) ;; C-n and C-p are defaults next/previous (define-key corfu-map (kbd \u0026#34;M-n\u0026#34;) \u0026#39;corfu-popupinfo-scroll-up) (define-key corfu-map (kbd \u0026#34;M-p\u0026#34;) \u0026#39;corfu-popupinfo-scroll-down) (define-key corfu-map (kbd \u0026#34;M-h\u0026#34;) \u0026#39;corfu-popupinfo-toggle) (define-key corfu-map (kbd \u0026#34;C-SPC\u0026#34;) \u0026#39;corfu-insert-separator) ; also use M-SPC (define-key corfu-map (kbd \u0026#34;C-g\u0026#34;) \u0026#39;corfu-quit) (define-key corfu-popupinfo-map (kbd \u0026#34;C-v\u0026#34;) \u0026#39;corfu-popupinfo-scroll-up) (define-key corfu-popupinfo-map (kbd \u0026#34;M-v\u0026#34;) \u0026#39;corfu-popupinfo-scroll-down) ) (evil-define-key \u0026#39;insert corfu-map (kbd \u0026#34;C-v\u0026#34;) \u0026#39;corfu-popupinfo-scroll-up ; remap (kbd \u0026#34;M-v\u0026#34;) \u0026#39;corfu-popupinfo-scroll-down ) ;; (defun corfu-move-to-minibuffer () ;; (interactive) ;; (let (completion-cycle-threshold completion-cycling) ;; (apply #\u0026#39;consult-completion-in-region completion-in-region--data))) ;; (defun corfu-enable-in-minibuffer () ;; \u0026#34;Enable Corfu in the minibuffer if `completion-at-point\u0026#39; is bound.\u0026#34; ;; (when (where-is-internal #\u0026#39;completion-at-point (list (current-local-map))) ;; ;; (setq-local corfu-auto nil) Enable/disable auto completion ;; (corfu-mode 1))) ;; (add-hook \u0026#39;minibuffer-setup-hook #\u0026#39;corfu-enable-in-minibuffer) ;; Show \u0026#34;eldoc\u0026#34; documentation immediately after the user confirms a candidate ; with \u0026#34;corfu\u0026#34; https://github.com/minad/corfu/issues/80 (with-eval-after-load \u0026#39;eldoc (eldoc-add-command #\u0026#39;corfu-insert) ) (global-corfu-mode) (corfu-history-mode 1) ;; define @ jh-base.org / pre-init-savehist ;; (add-to-list \u0026#39;savehist-additional-variables \u0026#39;corfu-history) (corfu-popupinfo-mode) ;; (with-eval-after-load \u0026#39;evil-collection ;; (advice-add \u0026#39;evil-collection-corfu-setup :after ;; (defun resert-corfu-esc () ;; (general-def \u0026#39;insert corfu-map \u0026#34;\u0026lt;escape\u0026gt;\u0026#34; \u0026#39;nil)))) ) ) ;; Setup lsp to use corfu for lsp completion ;; (defun kb/corfu-setup-lsp () ;; \u0026#34;Use orderless completion style with lsp-capf instead of the ;; default lsp-passthrough.\u0026#34; ;; (setf (alist-get \u0026#39;styles (alist-get \u0026#39;lsp-capf completion-category-defaults)) ;; \u0026#39;(orderless))) ;; (add-hook \u0026#39;lsp-completion-mode-hook #\u0026#39;kb/corfu-setup-lsp) ; use corfu for lsp completion Cape Completion At Point Extensions # [2023-02-13 Mon 02:48] work with company backend GitHub - minad/cape: 🦸cape.el - Completion At Point Exten\u0026hellip;\n2023-05-05 동작한다. 2023-05-04 여기에 사전 다루는게 다 들어 있다. /agzam-dot-doom/modules/custom/completion/autoload/minad-capf.el /agzam-dot-doom/modules/custom/completion/config.el\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 ;;;; CAPE : Completion At Point Extensions (defun jh-completion/init-cape-yasnippet () (use-package cape-yasnippet) ) (defun jh-completion/init-cape () (use-package cape :demand t :config (require \u0026#39;cape-yasnippet) ;; Enhances speed on large projects, for which many buffers may be open. ;; (setq cape-dabbrev-check-other-buffers nil) ; default t (setq cape-dabbrev-min-length 3) ;; 최소한으로 열어 두고 필요할 때 호출해서 확인한다. ;; Add `completion-at-point-functions\u0026#39;, used by `completion-at-point\u0026#39;. ;; (add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-line) ; useless ;; (add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-abbrev) (defun cape-common-setup () (add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-dabbrev) (add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-file) (add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-history) (add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-yasnippet) ) (defun cape-text-mode-setup () (add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-ispell) ;; (add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-dict) ; useless ) (defun cape-prog-mode-setup () (add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-symbol) (add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-keyword) ) ;; 2023-05-05 로컬 후크가 아니라 바로 모드 훅으로 잡아 놔야 한다. (dolist (mode-hook \u0026#39;(prog-mode-hook text-mode-hook conf-mode-hook)) (add-hook mode-hook #\u0026#39;cape-common-setup)) (add-hook \u0026#39;text-mode-hook \u0026#39;cape-text-mode-setup) (add-hook \u0026#39;prog-mode-hook \u0026#39;cape-prog-mode-setup) (define-prefix-command \u0026#39;my-cape-map) (define-key global-map (kbd \u0026#34;M-c\u0026#34;) \u0026#39;my-cape-map) (let ((map my-cape-map)) (define-key map (kbd \u0026#34;p\u0026#34;) \u0026#39;completion-at-point) (define-key map (kbd \u0026#34;t\u0026#34;) \u0026#39;complete-tag) (define-key map (kbd \u0026#34;d\u0026#34;) \u0026#39;cape-dabbrev) (define-key map (kbd \u0026#34;e\u0026#34;) \u0026#39;hippie-expand) (define-key map (kbd \u0026#34;h\u0026#34;) \u0026#39;cape-history) (define-key map (kbd \u0026#34;y\u0026#34;) \u0026#39;cape-yasnippet) (define-key map (kbd \u0026#34;f\u0026#34;) \u0026#39;cape-file) (define-key map (kbd \u0026#34;k\u0026#34;) \u0026#39;cape-keyword) (define-key map (kbd \u0026#34;s\u0026#34;) \u0026#39;cape-symbol) (define-key map (kbd \u0026#34;a\u0026#34;) \u0026#39;cape-abbrev) (define-key map (kbd \u0026#34;l\u0026#34;) \u0026#39;cape-line) (define-key map (kbd \u0026#34;w\u0026#34;) \u0026#39;cape-dict) (define-key map (kbd \u0026#34;r\u0026#34;) \u0026#39;cape-rfc1345) (define-key map (kbd \u0026#34;\\\\\u0026#34;) \u0026#39;cape-tex) ) ;;;; https://github.com/minad/cape#company-adapter ;; The advices are only needed on Emacs 28 and older. (when (\u0026lt; emacs-major-version 29) ; emacs 28 ;; Silence the pcomplete capf, no errors or messages! (advice-add \u0026#39;pcomplete-completions-at-point :around #\u0026#39;cape-wrap-silent) ;; Ensure that pcomplete does not write to the buffer ;; and behaves as a pure `completion-at-point-function\u0026#39;. (advice-add \u0026#39;pcomplete-completions-at-point :around #\u0026#39;cape-wrap-purify)) ) ) TODO cape-yasnippet # M-/ Expand a snippet if text before point \u0026hellip; SPC i s List all current yasnippets 스니펫이 제대로 동작하는가 확인해봐라. yasnippet-snippets-1.0 clojure-snippets-20220914.950\nauto-coimpletion 레이어에 스니펫을 다 빼고 따로 넣어야 한다. 그리고 Tempel 로 넘어가자.\nDeprecate in favour of tempel.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ;; yasnippet globally on and check yas-snippet-dirs ;; (\u0026#34;/home/junghan/.spacemacs.d/snippets\u0026#34; ;; \u0026#34;/home/junghan/spacemacs/core/../private/snippets/\u0026#34; ;; \u0026#34;/home/junghan/spacemacs/layers/+completion/auto-completion/local/snippets\u0026#34; ;; \u0026#34;/home/junghan/spacemacs/elpa/29.0/develop/clojure-snippets-20220914.950/snippets\u0026#34; ;; yasnippet-snippets-dir) ;; (use-package yasnippet ;; :config ;; (yas-reload-all) ;; (add-to-list \u0026#39;yas-snippet-dirs \u0026#34;~/.config/emacs-vanilla/snippets\u0026#34;) ;; (yas-global-mode 1)) (defun jh-completion/init-cape-yasnippet () (use-package cape-yasnippet :after cape yasnippet :config (defun cape-yasnippet-setup-capf () ;; Add the Tempel Capf to `completion-at-point-functions\u0026#39;. ;; `tempel-expand\u0026#39; only triggers on exact matches. Alternatively use ;; `tempel-complete\u0026#39; if you want to see all matches, but then you ;; should also configure `tempel-trigger-prefix\u0026#39;, such that Tempel ;; does not trigger too often when you don\u0026#39;t expect it. NOTE: We add ;; `tempel-expand\u0026#39; *before* the main programming mode Capf, such ;; that it will be tried first. ;; Tempel Capf를 `completion-at-point-functions\u0026#39;에 추가하십시오. `tempel-expand\u0026#39;는 ;; 정확히 일치하는 경우에만 트리거됩니다. 또는 모든 일치 항목을 보려면 ;; `tempel-complete\u0026#39;를 사용하지만 예상하지 못한 경우 Tempel이 너무 자주 트리거되지 ;; 않도록 `tempel-trigger-prefix\u0026#39;도 구성해야 합니다. 참고: 기본 프로그래밍 모드인 ;; Capf *앞에* `tempel-expand\u0026#39;를 추가하여 먼저 시도되도록 합니다. (setq-local completion-at-point-functions (cons #\u0026#39;cape-yasnippet completion-at-point-functions))) ;; Setup completion at point - 먼저 실행 되게 해야하는구나. 끈다. ;; (defun tempel-setup-capf () ;; (add-to-list \u0026#39;completion-at-point-functions #\u0026#39;tempel-expand)) (add-hook \u0026#39;text-mode-hook \u0026#39;cape-yasnippet-setup-capf) (add-hook \u0026#39;prog-mode-hook \u0026#39;cape-yasnippet-setup-capf) )) ;; To avoid auto-expanding snippets ;; (plist-put cape-yasnippet--properties :exit-function #\u0026#39;always) ;; (defun +cape-yasnippet--setup-h () ;; (when (and (bound-and-true-p yas-minor-mode)) ;; (add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-yasnippet t))) ;; (dolist (mode-hook \u0026#39;(prog-mode-hook text-mode-hook conf-mode-hook)) ;; (add-hook mode-hook #\u0026#39;+cape-yasnippet--setup-h))) Tempel Simple templates for Emacs # 재미있는 템플릿 활용법을 알게되었다. GitHub - minad/tempel: TempEl - Simple templates for Emacs\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 ;;;; Tempel ;; Template-based in-buffer completion (tempel.el) ;; NOTE 2023-01-19: Check the `templates\u0026#39; (defun jh-completion/init-tempel () (use-package tempel :after cape :bind ((\u0026#34;M-+\u0026#34; . tempel-complete) ;; Alternative tempel-expand (\u0026#34;M-*\u0026#34; . tempel-insert)) :init ;; (setq tempel-trigger-prefix \u0026#34;\u0026lt;\u0026#34;) ; conflits with evil-shift (setq tempel-path (expand-file-name \u0026#34;tempel-templates.eld\u0026#34; dotspacemacs-directory)) :config ;; Setup completion at point (defun tempel-setup-capf () ;; Add the Tempel Capf to `completion-at-point-functions\u0026#39;. ;; `tempel-expand\u0026#39; only triggers on exact matches. Alternatively use ;; `tempel-complete\u0026#39; if you want to see all matches, but then you ;; should also configure `tempel-trigger-prefix\u0026#39;, such that Tempel ;; does not trigger too often when you don\u0026#39;t expect it. NOTE: We add ;; `tempel-expand\u0026#39; *before* the main programming mode Capf, such ;; that it will be tried first. ;; Tempel Capf를 `completion-at-point-functions\u0026#39;에 추가하십시오. `tempel-expand\u0026#39;는 ;; 정확히 일치하는 경우에만 트리거됩니다. 또는 모든 일치 항목을 보려면 ;; `tempel-complete\u0026#39;를 사용하지만 예상하지 못한 경우 Tempel이 너무 자주 트리거되지 ;; 않도록 `tempel-trigger-prefix\u0026#39;도 구성해야 합니다. 참고: 기본 프로그래밍 모드인 ;; Capf *앞에* `tempel-expand\u0026#39;를 추가하여 먼저 시도되도록 합니다. (setq-local completion-at-point-functions (cons #\u0026#39;tempel-expand completion-at-point-functions))) ;; Setup completion at point - 먼저 실행 되게 해야하는구나. 끈다. ;; (defun tempel-setup-capf () ;; (add-to-list \u0026#39;completion-at-point-functions #\u0026#39;tempel-expand)) (add-hook \u0026#39;text-mode-hook \u0026#39;tempel-setup-capf) (add-hook \u0026#39;prog-mode-hook \u0026#39;tempel-setup-capf) (defun tempel-hippie-try-expand (old) \u0026#34;Integrate with hippie expand. Just put this function in `hippie-expand-try-functions-list\u0026#39;.\u0026#34; (if (not old) (tempel-expand t) (undo 1))) (add-to-list \u0026#39;hippie-expand-try-functions-list #\u0026#39;tempel-hippie-try-expand t) ;; Use concrete keys because of org mode ;; \u0026#34;M-RET\u0026#34; #\u0026#39;tempel-done ;; \u0026#34;M-{\u0026#34; #\u0026#39;tempel-previous ;; \u0026#34;M-}\u0026#34; #\u0026#39;tempel-next ;; \u0026#34;M-\u0026lt;up\u0026gt;\u0026#34; #\u0026#39;tempel-previous ;; \u0026#34;M-\u0026lt;down\u0026gt;\u0026#34; #\u0026#39;tempel-next (define-key tempel-map (kbd \u0026#34;RET\u0026#34;) #\u0026#39;tempel-done) (define-key tempel-map (kbd \u0026#34;C-j\u0026#34;) #\u0026#39;tempel-next) (define-key tempel-map (kbd \u0026#34;C-k\u0026#34;) #\u0026#39;tempel-previous) ) ) Turn off Auto-preview using Consult # preview 설정을 변경하려고 한다. 애용하는 consult-line 의 경우 자동 preview 때문에 반응이 늦다. preview-key 를 누를 경우만 보이도록 하자. 다음 키를 이용하면 훨씬 효율적으로 탐색할 수 있다.\n2023-02-01 consult-preview 엄청난 문제가 있었다. invalid-key 가 발생하는데 해결은 minad 패키지를 모두 gnu 버전으로 pinned 했다. 업데이트 자주 하는 게 정답이 아니다.\n2023-02-08 버전 업을 하면 문제가 발생했다. 아래 키 바인딩이 문제였다. 아래와 같이 설정해서 해결했다.\n2023-03-06 compleseus 설정이 바뀌었다. 나의 키바인딩이 더 나은 것 같다. 아래와 같이 일부 수정한다.\n2023-04-30 커스텀을 바쿤다. 기본으로\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 ;;;; Consult (defun jh-completion/pre-init-consult () (spacemacs|use-package-add-hook consult :post-config (consult-customize consult-theme :preview-key \u0026#39;(\u0026#34;M-.\u0026#34; \u0026#34;C-SPC\u0026#34; :debounce 3.0 any) ; 2 seconds ;; For `consult-line\u0026#39; change the prompt and specify multiple preview ;; keybindings. Note that you should bind \u0026lt;S-up\u0026gt; and \u0026lt;S-down\u0026gt; in the ;; `minibuffer-local-completion-map\u0026#39; or `vertico-map\u0026#39; to the commands which ;; select the previous or next candidate. consult-buffer consult-ripgrep consult-git-grep consult-grep consult-bookmark consult-yank-pop ;; add more consult functions consult-recent-file consult-xref consult-org-heading consult-outline ; 2023-05-23 ;; consult--source-recent-file consult--source-project-recent-file consult--source-bookmark spacemacs/compleseus-search-auto spacemacs/compleseus-search-dir spacemacs/compleseus-find-file ; 2023-05-14 추가 ;; spacemacs/compleseus-search-project-el ; 2023-05-23 ;; spacemacs/compleseus-search-project-el-auto ; 2023-05-23 spacemacs/embark-preview ; 2023-05-23 spacemacs/compleseus-search-default consult-line ; :prompt \u0026#34;Consult-line: \u0026#34; :preview-key \u0026#39;(\u0026#34;M-.\u0026#34; \u0026#34;C-SPC\u0026#34; ;; :debounce 0.3 \u0026#34;C-M-j\u0026#34; \u0026#34;C-M-k\u0026#34; ; conflict puni :debounce 0.3 \u0026#34;\u0026lt;up\u0026gt;\u0026#34; \u0026#34;\u0026lt;down\u0026gt;\u0026#34; \u0026#34;C-n\u0026#34; \u0026#34;C-p\u0026#34; )) ) ) "},{"id":14,"href":"/configs/emacs/jh-editing/","title":"jh-editing layer","section":"menu/Dotfiles/dot-emacs","content":" jh-editing Goals # 편집은 쓰고, 찾고, 수정하고, 나아가 퍼블리시까지 포함한다. 단계를 나눠서 정리하면 좋겠다. 퍼블은 지식 관리자에서 한다\nspacemacs-editing spacemacs-editing-visual spacemacs-evil evil-snipe multi-cursors copy-as-format Layer # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (configuration-layer/declare-layer-dependencies \u0026#39;( copy-as-format ;; `g r\u0026#39; menu in Emacs normal state ;; \u0026#39;evil-mc\u0026#39; vs. \u0026#39;mc\u0026#39; (multiple-cursors :variables multiple-cursors-backend \u0026#39;mc mc/cmds-to-run-once \u0026#39;(upcase-region)) (xclipboard :variables xclipboard-enable-cliphist t) (spacemacs-editing ;; not password-generator drag-stuff undo-tree :packages (aggressive-indent dired-quick-sort editorconfig eval-sexp-fu smartparens spacemacs-whitespace-cleanup pcre2el string-edit-at-point uuidgen evil-easymotion expand-region hexl ws-butler unkillable-scratch hungry-delete persistent-scratch string-inflection avy link-hint lorem-ipsum evil-swap-keys )) (spacemacs-editing-visual :packages (hide-comnt rainbow-delimiters volatile-highlights writeroom-mode term-cursor )) (spacemacs-evil :packages (evil-anzu evil-args evil-collection evil-escape evil-exchange evil-iedit-state evil-indent-plus evil-lion evil-nerd-commenter evil-matchit evil-numbers evil-surround evil-textobj-line evil-unimpaired evil-visual-mark-mode evil-visualstar evil-tutor ;; evil-lisp-state evil-cleverparens ;; evil-goggles eldoc hs-minor-mode) :variables spacemacs-evil-collection-allowed-list \u0026#39;(dired wdired quickrun ediff ; delete \u0026#39;eww\u0026#39; xref eglot flymake tar-mode speedbar tab-bar man outline dashboard shortdoc info tar-mode thread ;; BUILT-IN devdocs corfu youtube-dl rg deadgrep leetcode dired-sidebar disk-usage ;; wgrep emms ebuku )) (evil-snipe :variables evil-snipe-enable-alternate-f-and-t-behaviors t) ;; vim-empty-lines ; Never! )) Packages # Packages # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (defconst jh-editing-packages \u0026#39;( ;; 재정의 패키지 xref evil-escape ;; evil-visualstar ;; 새로 등록하는 패키지 visual-regexp rg ; ripgrep tool with wgrep affe ; async fuzzy finder deadgrep ; ripgrep tool find-file-in-project unfill undo-fu puni ;; fd-dired ;; undo-fu-session ;; vundo ;; (holymotion :location (recipe :fecther github :repo \u0026#34;Overdr0ne/holymotion\u0026#34;)) ;; evil-multiedit ;; pulsar ;; paren-face )) xref built-in # 1 2 3 (defun jh-editing/post-init-xref () (setq xref-file-name-display \u0026#39;project-relative) (setq xref-search-program \u0026#39;ripgrep)) ; default grep Undo-fu and Vundo # [2022-12-14 Wed 09:37] undo-tree 가 성능의 문제를 주기에 undo-fu 를 기본으로 하고 undo-fu-session 을 고려 하고자 한다.\nbuilt-in undo/redo (28 ~) undo-fu undo-tree 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 (defun jh-editing/init-undo-fu () ;; Increase undo history limits even more (use-package undo-fu :ensure t :config ;; C-r 은 isearch-backward 가 기본 (define-key evil-normal-state-map \u0026#34;u\u0026#34; \u0026#39;undo-fu-only-undo) (define-key evil-normal-state-map \u0026#34;\\C-r\u0026#34; \u0026#39;undo-fu-only-redo) ;; Undo-fu customization options ;; Undoing with a selection will use undo within that region. (setq undo-fu-allow-undo-in-region t) ;; Use the `undo-fu-disable-checkpoint\u0026#39; command instead of Ctrl-G `keyboard-quit\u0026#39; for non-linear behavior. (setq undo-fu-ignore-keyboard-quit t) ;; By default while in insert all changes are one big blob. Be more granular (setq evil-want-fine-undo t) ) ) ;; (use-package undo-fu-session :after undo-fu ;; :functions undo-fu-session-global-mode ;; :config (undo-fu-session-global-mode)) ;; visualize undo-tree ;; (use-package vundo ;; :defer t ;; :init ;; (defconst +vundo-unicode-symbols ;; \u0026#39;((selected-node . ?●) ;; (node . ?○) ;; (vertical-stem . ?│) ;; (branch . ?├) ;; (last-branch . ?╰) ;; (horizontal-stem . ?─))) ;; :config ;; (setq vundo-glyph-alist +vundo-unicode-symbols ;; vundo-compact-display t ;; vundo-window-max-height 6) ;; (spacemacs/set-leader-keys \u0026#34;tV\u0026#34; \u0026#39;vundo) ;; ) Let\u0026rsquo;s Be Evil # 수정해보자. [2022-12-16 Fri 07:26]\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 (defun jh-editing/init-unfill () (require \u0026#39;unfill) (global-set-key (kbd \u0026#34;C-M-q\u0026#34;) \u0026#39;unfill-paragraph)) ;; DONE isearch minibuffer 에서 이동할 방법이 없어서 끈다. ;; Emacs 기본 C-f/b forward-char backward-char 가 가능한지 검토 바람 ;; copy from DW ;; (defun dw/dont-arrow-me-bro () ;; (interactive) ;; (message \u0026#34;Arrow keys are bad, you know?\u0026#34;)) ;; ;; Disable arrow keys in normal and visual modes ;; (define-key evil-normal-state-map (kbd \u0026#34;\u0026lt;left\u0026gt;\u0026#34;) \u0026#39;dw/dont-arrow-me-bro) ;; (define-key evil-normal-state-map (kbd \u0026#34;\u0026lt;right\u0026gt;\u0026#34;) \u0026#39;dw/dont-arrow-me-bro) ;; (define-key evil-normal-state-map (kbd \u0026#34;\u0026lt;down\u0026gt;\u0026#34;) \u0026#39;dw/dont-arrow-me-bro) ;; (define-key evil-normal-state-map (kbd \u0026#34;\u0026lt;up\u0026gt;\u0026#34;) \u0026#39;dw/dont-arrow-me-bro) ;; (evil-global-set-key \u0026#39;motion (kbd \u0026#34;\u0026lt;left\u0026gt;\u0026#34;) \u0026#39;dw/dont-arrow-me-bro) ;; (evil-global-set-key \u0026#39;motion (kbd \u0026#34;\u0026lt;right\u0026gt;\u0026#34;) \u0026#39;dw/dont-arrow-me-bro) ;; (evil-global-set-key \u0026#39;motion (kbd \u0026#34;\u0026lt;down\u0026gt;\u0026#34;) \u0026#39;dw/dont-arrow-me-bro) ;; (evil-global-set-key \u0026#39;motion (kbd \u0026#34;\u0026lt;up\u0026gt;\u0026#34;) \u0026#39;dw/dont-arrow-me-bro) ;; C-g 기본 함수는 keyboard-quit ;; C-g back to normal state ;; (define-key evil-insert-state-map (kbd \u0026#34;C-g\u0026#34;) \u0026#39;evil-normal-state) evil-escape # 1 2 3 4 5 6 7 8 9 10 11 (defun jh-editing/post-init-evil-escape () ;; evil-escape - switch between insert and normal state ;; fd는 ㄹㅇ일 때 적용이 안되니 ,.을 입력 시 escape하도록 바꿈. ;; unordered로 해보니 minor-mode를 열기도 해서 아예 논란이 없도록 바꿈. (setq-default evil-escape-key-sequence \u0026#34;,.\u0026#34;) (setq-default evil-escape-unordered-key-sequence nil) (setq-default evil-escape-delay 1.0) ;; 0.5, default 0.1 ;; (setq-default evil-escape-inhibit-functions nil) (evil-escape-mode) ;; (add-to-list \u0026#39;evil-escape-excluded-major-modes \u0026#39;code-review-mode) ) Search/Symbol # rg ripgrep and wgrep # URL: https://github.com/dajva/rg.el Usage — rg.el 2.3.0 documentation\n설정은 간단하게\n1 2 3 4 5 6 7 8 9 10 11 ;;;;; ripgrep + wgrep (defun jh-editing/init-rg () (use-package rg :after consult :config (rg-enable-default-bindings) ;; use =C-c s= (global-set-key (kbd \u0026#34;M-s r\u0026#34;) \u0026#39;rg-menu) (global-set-key (kbd \u0026#34;M-s g\u0026#34;) \u0026#39;consult-ripgrep) (spacemacs/set-leader-keys \u0026#34;sr\u0026#34; \u0026#39;rg-menu) (spacemacs/set-leader-keys \u0026#34;sg\u0026#34; \u0026#39;consult-ripgrep) )) READ Usages\n메뉴로 가서 따라 해본다. -h 입력하면 hidden 폴더 검색한다. .emacs.d 는 hidden 폴더니까 옵션 없으면 검색 안된다. .git 폴더는 기본 제외 된다. 옵션이 있다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 -*- mode: rg; default-directory: \u0026#34;~/sync/man/dotsamples/vanilla/\u0026#34; -*- rg started at Wed Apr 19 17:46:19 /usr/bin/rg --color=always --colors=match:fg:red --colors=path:fg:magenta --colors=line:fg:green --colors=column:none -n --column -i --hidden --heading --no-config --type=elisp -e ekg File: ahyatt-dotfiles/.emacs.d/init.el 430 30 (pretty-hydra-define hydra-ekg () 432 12 ((\u0026#34;t\u0026#34; ekg-show-notes-for-today \u0026#34;today\u0026#34; :exit t) 433 12 (\u0026#34;g\u0026#34; ekg-show-notes-with-tag \u0026#34;tag\u0026#34; :exit t) 434 12 (\u0026#34;r\u0026#34; ekg-show-notes-latest-captured \u0026#34;latest\u0026#34; :exit t) 435 12 (\u0026#34;b\u0026#34; ekg-embedding-show-similar-to-current-buffer \u0026#34;similar to buffer\u0026#34; :exit t) 436 12 (\u0026#34;s\u0026#34; ekg-embedding-search \u0026#34;search\u0026#34; :exit t)) 438 12 ((\u0026#34;c\u0026#34; ekg-capture) 516 18 (\u0026#34;k\u0026#34; hydra-ekg/body \u0026#34;ekg\u0026#34; :exit t) 828 14 (use-package ekg 829 15 :straight \u0026#39;(ekg :type git :host github :repo \u0026#34;ahyatt/ekg\u0026#34;) 831 13 (\u0026#34;\u0026lt;f11\u0026gt;\u0026#34; \u0026#39;ekg-capture) 835 6 (ekg-capture-url (ash/get-current-url) (ash/get-current-title)))) 1147 24 (tab-bar-rename-tab \u0026#34;ekg\u0026#34; 2) rg finished (15 matches found) at Wed Apr 19 17:46:19 Edit and apply (wgrep)\n[2023-05-03 Wed 14:02] rg 로 검색한 다음에 수정을 어떻게 하는가?\nC-c C-p wgrep-mode 로 바꿔주고나서 수정하고 Z Z 입력하면 적용된다. 엄청난 팁이다. 아마도 Embark 등 시나리오에서도 가능할 것 같다. 개념을 몰라서 못했던 것이다.\nEdit and apply (wgrep) : The results buffer supports inline editing via the wgrep package. This is setup automatically when rg is loaded. e (wgrep-change-to-wgrep-mode) Make the search results editable by enabling wgrep mode. When done press C-c C-c to commit your changes to the underlying files or C-c C-k to drop the changes.\ndeadgrep # 보다 커스텀이 가능한 ripgrep 이 필요하다. 예를 들어 . 폴더를 제외하거나 특정 폴더를 제외하는 검색이 되어야 한다.\n1 2 3 4 5 6 7 (defun jh-editing/init-deadgrep () (use-package deadgrep :after consult :config (spacemacs/set-leader-keys \u0026#34;sR\u0026#34; \u0026#39;deadgrep) (global-set-key (kbd \u0026#34;M-s R\u0026#34;) \u0026#39;deadgrep)) ) find-file-in-project # find files with \u0026lsquo;fd\u0026rsquo;\n1 2 3 4 5 6 7 8 9 10 (defun jh-editing/init-find-file-in-project () ;; In emacs, run M-x find-file-in-project-by-selected to find matching files. ;; Alternatively, run M-x find-file-in-project to list all available files in ;; the project. (require \u0026#39;find-file-in-project) (setq ffip-use-rust-fd t) (spacemacs/declare-prefix \u0026#34;sP\u0026#34; \u0026#34;find-file✩\u0026#34;) (spacemacs/set-leader-keys \u0026#34;sPc\u0026#34; \u0026#39;find-file-in-current-directory-by-selected) (spacemacs/set-leader-keys \u0026#34;sPp\u0026#34; \u0026#39;find-file-in-project-by-selected) ) affe # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 ;;;;;; async fuzzy finder (defun jh-editing/init-affe () (use-package affe :after consult orderless :demand t :config ;; Use orderless to compile regexps (defun +affe-orderless-regexp-compiler (input _type _ignorecase) (setq input (orderless-pattern-compiler input)) (cons input (lambda (str) (orderless--highlight input str)))) (setq affe-regexp-compiler #\u0026#39;+affe-orderless-regexp-compiler) (global-set-key (kbd \u0026#34;M-s a\u0026#34;) \u0026#39;affe-grep) (global-set-key (kbd \u0026#34;M-s A\u0026#34;) \u0026#39;affe-find) (spacemacs/set-leader-keys \u0026#34;sa\u0026#34; \u0026#39;affe-grep) (spacemacs/set-leader-keys \u0026#34;sA\u0026#34; \u0026#39;affe-find) ;; Manual preview keys (consult-customize affe-grep affe-find :preview-key \u0026#39;(\u0026#34;M-n\u0026#34; \u0026#34;M-p\u0026#34;)) )) Visual regexp # 정규식 관련 패키지. 연습하라! Regex Search and Replace in Emacs | Irreal 위 글을 보고 고민하던 차에 추가해놓는다. (참고 영상) Learn two ways to perform a string replacement with visual feedback - YouTube\nvisual-regexp GitHub - benma/visual-regexp.el: A regexp/replace command for Emacs with inte\u0026hellip;\nvisual-regexp-steroids GitHub - benma/visual-regexp-steroids.el: Extends visual-regexp to support ot\u0026hellip;\nhelm-regex : 설치되어 있네?! 35.3 Regular Expressions (EMACS Manual) Regular Expressions (GNU Emacs Lisp Reference Manual) 1 2 3 4 5 6 7 8 9 10 11 (defun jh-editing/init-visual-regexp () ;; EMACS-style regex support (require \u0026#39;visual-regexp) (define-key global-map (kbd \u0026#34;C-c v r\u0026#34;) \u0026#39;vr/replace) (define-key global-map (kbd \u0026#34;C-c v q\u0026#34;) \u0026#39;vr/query-replace) ) ;; (setq vr/match-separator-use-custom-face t) ;; if you use multiple-cursors, this is for you: ;; (define-key global-map (kbd \u0026#34;C-c v m\u0026#34;) \u0026#39;vr/mc-mark) ;; C-M-r isearch-backward-regexp : default binding ;; C-M-s isearch-forward-regexp puni for replacing smartparens # Puni Configurations # There’s a lot of really good editing tools. Puni is a more simple and modern approach to structured editing, so let\u0026rsquo;s use that. I used to use smartparens, but it had a lot of issues where expressions becoming unbalanced in strict mode, which is annoying, because then you have to get out of strict-mode to fix it.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 (defun jh-editing/init-puni () (use-package puni :demand :diminish \u0026#34;\u0026#34; :hook (((calc-mode term-mode vterm-mode) . puni-disable-puni-mode) ; org-mode (puni-mode . electric-pair-mode)) :init ;; The default `puni-mode-map\u0026#39; respects \u0026#34;Emacs conventions\u0026#34;. We don\u0026#39;t, so ;; it\u0026#39;s better to simply clear and rewrite it. (setcdr puni-mode-map nil) (bind-keys :map puni-mode-map (\u0026#34;C-M-a\u0026#34; . puni-beginning-of-sexp) (\u0026#34;C-M-e\u0026#34; . puni-end-of-sexp) ;; (\u0026#34;C-\u0026#34; . sp-down-sexp) ;; (\u0026#34;C-\u0026#34; . sp-up-sexp) ;; (\u0026#34;M-\u0026#34; . sp-backward-down-sexp) ;; (\u0026#34;M-\u0026#34; . sp-backward-up-sexp) (\u0026#34;C-M-f\u0026#34; . puni-forward-sexp) (\u0026#34;C-M-b\u0026#34; . puni-backward-sexp) ;; (\u0026#34;C-M-n\u0026#34; . sp-next-sexp) ;; (\u0026#34;C-M-p\u0026#34; . sp-previous-sexp) ;; (\u0026#34;C-S-f\u0026#34; . sp-forward-symbol) ;; (\u0026#34;C-S-b\u0026#34; . sp-backward-symbol) (\u0026#34;C-\u0026lt;right\u0026gt;\u0026#34; . puni-slurp-forward) (\u0026#34;C-M-\u0026lt;right\u0026gt;\u0026#34; . puni-slurp-backward) (\u0026#34;C-\u0026lt;left\u0026gt;\u0026#34; . puni-barf-forward) (\u0026#34;C-M-\u0026lt;left\u0026gt;\u0026#34; . puni-barf-backward) (\u0026#34;C-M-?\u0026#34; . puni-convolute) ;; puni-transpose (\u0026#34;C-M-t\u0026#34; . transpose-sexp) ;; (\u0026#34;C-x C-t\u0026#34; . sp-transpose-hybrid-sexp) (\u0026#34;C-M-k\u0026#34; . kill-sexp) (\u0026#34;M-k\u0026#34; . backward-kill-sexp) ;; (\u0026#34;C-\u0026#34; . puni-backward-kill-word) (\u0026#34;M-)\u0026#34; . puni-syntactic-forward-punct) (\u0026#34;M-(\u0026#34; . puni-syntactic-backward-punct) ;; splicing (\u0026#34;C-M-\u0026lt;delete\u0026gt;\u0026#34; . puni-splice-killing-forward) (\u0026#34;C-M-\u0026lt;backspace\u0026gt;\u0026#34; . puni-splice-killing-backword) (\u0026#34;C-c DEL\u0026#34; . puni-force-delete) ;; (\u0026#34;C-M-d\u0026#34; . puni-forward-delete-char) ;; (\u0026#34;C-M-k\u0026#34; . puni-kill-line) ;; (\u0026#34;C-M-K\u0026#34; . puni-backward-kill-line) ;; (\u0026#34;C-M-w\u0026#34; . puni-kill-region) ;; (\u0026#34;C-M-w\u0026#34; . sp-copy-sexp) ;; (\u0026#34;C-M-d\u0026#34; . delete-sexp) ;; ([remap puni-backward-kill-word] . backward-kill-word) (\u0026#34;C-M-z\u0026#34; . puni-squeeze) ; unwrap (\u0026#34;C-c (\u0026#34; . puni-wrap-round) (\u0026#34;C-c [\u0026#34; . puni-wrap-square) (\u0026#34;C-c {\u0026#34; . puni-wrap-curly) ) :config (puni-global-mode t) ) ) ;; :config ;; (defun puni-kill-thing-at-point (\u0026amp;optional arg) ;; \u0026#34;Kill the next puni based thing at point\u0026#34; ;; (interactive) ;; (unless buffer-read-only ;; (puni-expand-region) ;; (kill-region (region-beginning) (region-end)))) ;; (defun puni-clone-thing-at-point (\u0026amp;optional arg) ;; \u0026#34;Clone the next puni based thing at point\u0026#34; ;; (interactive) ;; (save-excursion ;; (puni-expand-region) ;; (kill-ring-save (region-beginning) (region-end))) ;; (yank) ;; (default-indent-new-line)) ;; ;;;; Better Killing And Yanking ;; (setq rectangle-mark-mode nil) ;; (setq *last-kill-was-rectangle* rectangle-mark-mode) ;; (defun remember-last-kill-type (\u0026amp;rest d) ;; (setq *last-kill-was-rectangle* rectangle-mark-mode)) ;; ;; (advice-add \u0026#39;kill-region :before #\u0026#39;remember-last-kill-type) ;; ;; (advice-add \u0026#39;kill-ring-save :before #\u0026#39;remember-last-kill-type) ;; ;; (advice-add \u0026#39;kill-rectangle :before #\u0026#39;remember-last-kill-type) ;; (defun my/kill-region (BEG END \u0026amp;optional REGION) ;; (interactive (list (mark) (point) \u0026#39;region)) ;; (cond ;; (rectangle-mark-mode (kill-rectangle ;; (region-beginning) (region-end))) ;; (mark-active (kill-region ;; (region-beginning) (region-end))) ;; (t (backward-kill-sexp 1)))) ;; (defun my/yank (\u0026amp;optional arg) (interactive) ;; (if *last-kill-was-rectangle* ;; (yank-rectangle) ;; (yank arg))) ;; Avoid terminal binding conflict ;; (unless my/is-termux ;; (bind-key (kbd \u0026#34;M-[\u0026#34;) #\u0026#39;puni-splice \u0026#39;puni-mode-map) ;; (bind-key (kbd \u0026#34;M-]\u0026#34;) #\u0026#39;puni-split \u0026#39;puni-mode-map)) Keybindings # 1 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- Redefine global-key # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 ;; Info 모드 Node 이동 ;; (evil-define-key \u0026#39;(motion normal visual) Info-mode-map ;; \u0026#34;^\u0026#34; \u0026#39;Info-up ;; \u0026#34;C-n\u0026#34; \u0026#39;Info-prev ;; \u0026#34;C-p\u0026#34; \u0026#39;Info-next ;; \u0026#34;M-n\u0026#34; \u0026#39;Info-forward-node ;; \u0026#34;M-p\u0026#34; \u0026#39;Info-backward-node ;; ) ;; o :: ace-link-info 이거면 충분하다. ;; /home/junghan/sync/man/dotsamples/spacemacs/spacemacs-thanhvg/doc/DOCUMENTATION.org ;; (define-key evil-insert-state-map (kbd \u0026#34;C-]\u0026#34;) \u0026#39;forward-char) ;; Replace Emacs Tabs key bindings with Workspace key bindings (with-eval-after-load \u0026#39;evil-maps ;; 편집 창 포커스 이동을 간단하게 (define-key evil-normal-state-map (kbd \u0026#34;\u0026lt;SPC\u0026gt; \u0026lt;right\u0026gt; \u0026#34;) \u0026#39;evil-window-right) (define-key evil-normal-state-map (kbd \u0026#34;\u0026lt;SPC\u0026gt; \u0026lt;left\u0026gt; \u0026#34;) \u0026#39;evil-window-left) (define-key evil-normal-state-map (kbd \u0026#34;\u0026lt;SPC\u0026gt; \u0026lt;up\u0026gt; \u0026#34;) \u0026#39;evil-window-up) (define-key evil-normal-state-map (kbd \u0026#34;\u0026lt;SPC\u0026gt; \u0026lt;down\u0026gt; \u0026#34;) \u0026#39;evil-window-down) ;; replace \u0026#34;.\u0026#34; search with consul-line in Evil normal state ;; use default \u0026#34;/\u0026#34; evil search (evil-global-set-key \u0026#39;normal \u0026#34;.\u0026#34; \u0026#39;consult-line) ;; (evil-global-set-key \u0026#39;normal \u0026#34;.\u0026#34; \u0026#39;spacemacs/consult-line) ;; TODO disable evil-mc key-binding with meta ;; 내 커스텀 키로 이용한다. evil-mc 를 어떻게 할지 고민 ;; (with-eval-after-load \u0026#39;evil-mc ;; (evil-define-key \u0026#39;(insert normal visual) evil-mc-key-map (kbd \u0026#34;M-n\u0026#34;) nil) ;; (evil-define-key \u0026#39;(insert normal visual) evil-mc-key-map (kbd \u0026#34;M-p\u0026#34;) nil) ;; (evil-define-key \u0026#39;(normal visual) evil-mc-key-map (kbd \u0026#34;C-n\u0026#34;) nil) ;; (evil-define-key \u0026#39;(normal visual) evil-mc-key-map (kbd \u0026#34;C-p\u0026#34;) nil) ;; (evil-define-key \u0026#39;(normal visual) evil-mc-key-map (kbd \u0026#34;C-t\u0026#34;) nil) ;; (evil-define-key \u0026#39;(normal visual) evil-mc-key-map (kbd \u0026#34;C-M-j\u0026#34;) nil) ;; (evil-define-key \u0026#39;(normal visual) evil-mc-key-map (kbd \u0026#34;C-M-k\u0026#34;) nil) ;; ) (define-key evil-normal-state-map (kbd \u0026#34;C-a\u0026#34;) \u0026#39;evil-beginning-of-line) (define-key evil-normal-state-map (kbd \u0026#34;C-e\u0026#34;) \u0026#39;evil-end-of-line-or-visual-line) (define-key evil-insert-state-map (kbd \u0026#34;C-a\u0026#34;) \u0026#39;evil-beginning-of-line) (define-key evil-insert-state-map (kbd \u0026#34;C-e\u0026#34;) \u0026#39;evil-end-of-line-or-visual-line) ;; =C-w= \u0026#39;insert \u0026#39;evil-delete-backward-word ;; =C-w= \u0026#39;visual \u0026#39;evil-window-map ) Rebind C-u # [2022-12-16 Fri 07:23] Since I let evil-mode take over C-u for buffer scrolling, I need to re-bind the universal-argument command to another key sequence. I\u0026rsquo;m choosing C-M-u for this purpose.\n1 (global-set-key (kbd \u0026#34;C-M-u\u0026#34;) \u0026#39;universal-argument) TODO Xref keybindings # Xref (GNU Emacs Manual) From a development perspective, moving to core allows us to work on Eglot in tandem with other related packages already in Emacs, such as Flymake, ElDoc, Xref, Project. [2022-12-27 Tue 15:03]\n위는 eglot 리포에서 가져온 것이다. 이 부분도 파악이 필요하다.\n1 2 3 ;; (spacemacs/set-leader-keys \u0026#34;jd\u0026#34; \u0026#39;xref-find-definitions) ;; (spacemacs/set-leader-keys \u0026#34;jD\u0026#34; \u0026#39;xref-pop-marker-stack) ;; (spacemacs/set-leader-keys \u0026#34;j?\u0026#34; \u0026#39;xref-find-references) "},{"id":15,"href":"/configs/emacs/jh-javascript/","title":"jh-javascript layer","section":"menu/Dotfiles/dot-emacs","content":" jh-javascript Goals # javascript, typescript, react 관련 설정.\nLayer # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (configuration-layer/declare-layer-dependencies \u0026#39;( (javascript :packages (not counsel-gtags company web-beautify) :variables js2-mode-show-strict-warnings nil javascript-repl \u0026#39;nodejs javascript-import-tool \u0026#39;import-js ;; javascript-fmt-tool \u0026#39;prettier ;; javascript-fmt-on-save t javascript-backend \u0026#39;lsp js2-basic-offset 2 js-indent-level 2 js2-include-node-externs t javascript-lsp-linter nil) (typescript :variables typescript-backend \u0026#39;lsp) react )) Packages # Packages # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (defconst jh-javascript-packages \u0026#39;( ;; 재정의 패키지 )) Config # 1 2 3 4 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- (setq org-babel-js-function-wrapper \u0026#34;process.stdout.write(require(\u0026#39;util\u0026#39;).inspect(function(){\\n%s\\n}(), { maxArrayLength: null, maxStringLength: null, breakLength: Infinity, compact: true }))\u0026#34;) "},{"id":16,"href":"/configs/emacs/jh-misc/","title":"jh-misc layer","section":"menu/Dotfiles/dot-emacs","content":" jh-misc Goals # Quickurl, Games, Search, Finance, Wakatime, Telegram, Discord, Matrix, IRC, Screenshot 등을 지원한다.\nLayer # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (configuration-layer/declare-layer-dependencies \u0026#39;( (spacemacs-misc :packages (not dumb-jump)) ; devdocs, request ;; games search-engine quickurl openai (finance :variable ledger-post-amount-alignment-column 68) )) Packages # Packages # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (defconst jh-misc-packages \u0026#39;( activity-watch-mode frameshot gif-screencast (screenshot :location (recipe :fetcher github :repo \u0026#34;tecosaur/screenshot\u0026#34; :files (\u0026#34;*.el\u0026#34; \u0026#34;*.org\u0026#34;))) wakatime-mode atomic-chrome elcord redacted telega ;; Terminal Mode corfu-terminal (term-keys :location (recipe :fetcher github :repo \u0026#34;junghan0611/term-keys\u0026#34;)) (xclip :toggle (version\u0026lt; \u0026#34;29.0.50\u0026#34; emacs-version)) ;; Emacs 29 )) TODO ledger cape # CAPE 로 연동해서 처리해야 한다. 뭐가 되었든간에 Spacemacs 베이스로 가져가는게 좋겠다. company 와 연동이 되니까 잘 쓰면 좋은 일이다.\n1 2 3 4 ;; (defun finance/post-init-company () ;; (spacemacs|add-company-backends ;; :backends company-capf ;; :modes ledger-mode)) Atomic-chrome # Atomic Chrome is an extension that allows to edit browser text fields in Emacs. Despite its name, it also works for Firefox with GhostText, which is what I use.\n2023-05-11 엄청 편하다. 좋다.\n1 2 3 4 5 6 7 (defun jh-misc/init-atomic-chrome () (use-package atomic-chrome :if (not (or my/remote-server my/is-termux)) :defer 10 :commands (atomic-chrome-start-server) :hook (after-init . atomic-chrome-start-server) )) Redacted # 1 2 3 4 5 (defun jh-misc/init-redacted () (use-package redacted :defer (spacemacs/defer) :commands (redacted-mode)) ) Screencast gif-screencast # Call `gif-screencast\u0026rsquo; to start a recording. A screenshot is taken for every user action. Call `gif-screencast-stop\u0026rsquo; (\u0026lt;f9\u0026gt; by default) to finish recording and create the GIF result.\ngif-screencast-program: scrot gif-screencast-convert-program: convert (from the ImageMagick suite) Optional: gif-screencast-optimize-program: Gifsicle\n1 sudo apt-get install scrot gifsicle Ambrevar / emacs-gif-screencast · GitLab\n1 2 (defun jh-misc/init-gif-screencast () (require \u0026#39;gif-screencast)) frameshot and screenshot # 1 2 3 4 5 6 7 8 (defun jh-misc/init-frameshot () (use-package frameshot :ensure :defer 10) ) ;; This makes it a breeze to take lovely screenshots. (defun jh-misc/init-screenshot () (use-package screenshot :ensure :defer 10) ) TimeTracking activity-watch-mode # 1 2 3 4 5 6 7 8 9 (defun jh-misc/init-activity-watch-mode () (use-package activity-watch-mode :defer (spacemacs/defer) :config (defun spacemacs/activitywatch-dashboard () (interactive) (browse-url \u0026#34;http://localhost:5600\u0026#34;)) (global-activity-watch-mode 1) )) Emacs with kitty terminal # slimmer emacs with kitty 이 글을 보고 kitty 로 이맥스를 사용하고 싶었다. 한영 키가 매끄럽지 않아서 문제 였는데 해결을 했다.\ncorfu-terminal # 1 2 3 4 5 6 7 8 9 (defun jh-misc/init-corfu-terminal () (use-package corfu-terminal :unless window-system :after corfu :config (unless (display-graphic-p) ; terminal (add-hook \u0026#39;corfu-mode-hook \u0026#39;corfu-terminal-mode) ) )) term-keys # 2023-03-13 드디어 동작한다. kitty 를 활용 할 수 있다. (잘 안쓰겠지만)\n1 2 3 4 5 6 7 8 (defun jh-misc/init-term-keys () (use-package term-keys :unless window-system :ensure :config (unless (display-graphic-p) (term-keys-mode t)) )) xclip # 1 2 3 4 5 6 (defun jh-misc/init-xclip () (use-package xclip :unless window-system :config (unless (display-graphic-p) (xclip-mode 1)))) wakatime-mode # [2023-04-29 Sat 18:38] 이게 속편할 수 있다. 이맥스만 뽑아내면 된다면!\n$ python3 -c \u0026ldquo;$(wget -q -O - https://raw.githubusercontent.com/wakatime/vim-wakatime/master/scripts/install_cli.py)\u0026rdquo;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 (defun jh-misc/init-wakatime-mode () (use-package wakatime-mode :if (and (or (string= (system-name) \u0026#34;jhnuc\u0026#34;) (string= (system-name) \u0026#34;junghan-laptop\u0026#34;) ) (not my/slow-ssh) (not my/remote-server)) ;; :init ;; (add-hook \u0026#39;prog-mode-hook \u0026#39;wakatime-mode) ;; (add-hook \u0026#39;text-mode-hook \u0026#39;wakatime-mode) :config (advice-add \u0026#39;wakatime-init :after (lambda () (setq wakatime-cli-path (expand-file-name \u0026#34;~/.wakatime/wakatime-cli\u0026#34;)))) ;; wakatime-api-key \u0026#34;your-api-key\u0026#34; in permachine.el (defun spacemacs/wakatime-dashboard () (interactive) (browse-url \u0026#34;https://wakatime.com/dashboard\u0026#34;)) (global-wakatime-mode) )) telega telegram client # 1 2 3 4 5 6 7 8 (defun jh-misc/init-telega () (use-package telega :commands telega :config (setf (alist-get 2 telega-avatar-factors-alist) \u0026#39;(0.45 . 0.1)) (setq telega-chat-fill-column 60) ) ) Funcs # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- (defun magit-commit-generic-update () (interactive) (magit-commit-create \u0026#39;(\u0026#34;-m\u0026#34; \u0026#34;Updates\u0026#34;))) (with-eval-after-load \u0026#39;transient (with-eval-after-load \u0026#39;magit (transient-append-suffix \u0026#39;magit-commit \u0026#34;c\u0026#34; \u0026#39;(\u0026#34;g\u0026#34; \u0026#34;Commit with generic message\u0026#34; magit-commit-generic-update)))) (defun my/screenshot-svg () \u0026#34;Save a screenshot of the current frame as an SVG image. Saves to a temp file and puts the filename in the kill ring.\u0026#34; ;; Taken from here ;; https://www.reddit.com/r/emacs/comments/idz35e/emacs_27_can_take_svg_screenshots_of_itself/g2c2c6y/ (interactive) (let* ((filename (make-temp-file \u0026#34;Emacs\u0026#34; nil \u0026#34;.svg\u0026#34;)) (data (x-export-frames nil \u0026#39;svg))) (with-temp-file filename (insert data)) (kill-new filename) (message filename))) (defun serve-current-buffer (\u0026amp;optional port) \u0026#34;Serve current buffer.\u0026#34; (interactive) (ws-start (lambda (request) (with-slots (process headers) request (ws-response-header process 200 \u0026#39;(\u0026#34;Content-type\u0026#34; . \u0026#34;text/html; charset=utf-8\u0026#34;)) (process-send-string process (let ((html-buffer (htmlize-buffer))) (prog1 (with-current-buffer html-buffer (buffer-string)) (kill-buffer html-buffer)))))) (or port 9010))) Keybindings # 1 2 3 4 5 6 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- (spacemacs/set-leader-keys \u0026#34;aW\u0026#34; \u0026#39;spacemacs/wakatime-dashboard) (spacemacs/set-leader-keys \u0026#34;aA\u0026#34; \u0026#39;spacemacs/activitywatch-dashboard) (spacemacs/set-leader-keys \u0026#34;Tr\u0026#34; \u0026#39;redacted-mode) "},{"id":17,"href":"/configs/emacs/jh-navigation/","title":"jh-navigation layer","section":"menu/Dotfiles/dot-emacs","content":" jh-navigation Goals # Spacemacs-navigation 을 수정하며 몇 가지 추가 레이어 구성 및 패키지 추가\nLayer # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (configuration-layer/declare-layer-dependencies \u0026#39;( spacemacs-navigation fasd ;; evil-better-jumper imenu-list ;; outshine ; DONE replaced by \u0026#39;outli\u0026#39; (treemacs :variables treemacs-position \u0026#39;left treemacs-width 40 treemacs-use-filewatch-mode t treemacs-use-follow-mode t treemacs-lock-width t treemacs-indentation 1 treemacs-use-all-the-icons-theme nil treemacs-use-icons-dired nil ) (ranger :variables ranger-show-preview t ranger-show-hidden t ranger-cleanup-eagerly t ranger-cleanup-on-disable t ranger-ignored-extensions \u0026#39;(\u0026#34;mkv\u0026#34; \u0026#34;flv\u0026#34; \u0026#34;iso\u0026#34; \u0026#34;mp4\u0026#34;)) ) ) Packages # Packages # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (defconst jh-navigation-packages \u0026#39;( ;; reconfigure packages winum imenu-list dumb-jump goto-last-change ;; additional packages outline (outli :location (recipe :fetcher github :repo \u0026#34;jdtsmith/outli\u0026#34;)) (loccur :location (recipe :fetcher github :repo \u0026#34;thanhvg/loccur\u0026#34;)) burly dired-subtree dired-open dired-git-info dired-du dired-posframe dired-sidebar dired-narrow ;; diredfl ;; dired-recent ;; dired-rsync ;; (hydra-posframe :location (recipe :fetcher github :repo \u0026#34;Ladicle/hydra-posframe\u0026#34;)) ) ) README spacemacs-navigation layer # Spacemacs 네비게이션 레이어에서 제공하는 패키지들을 잘 파악해야 한다. ace-link, ace-window, auto-highlight-symbol, centered-cursor-mode compile, doc-view, view, golden-ratio, grep, info+, restart-emacs smooth-scrolling, symbol-overlay, winum\n물론 추가로 필요한 패키지들을 정의할 필요가 있다.\nM-s (search-map) and M-g (goto-map) bindings evil-easymotion Winum # spacemacs-navigation layer 에 winum 이 들어있지만 설정이 부족하다. 특히, 바닐라 모드 라인에 번호가 있었으면 한다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 (defun jh-navigation/post-init-winum () (defun my/winum-assign-custom () (cond ;; 0 treemacs, 9 goto minibuffer ((equal (buffer-name) \u0026#34;*Flycheck errors*\u0026#34;) 7) ((equal (buffer-name) \u0026#34;*Calculator*\u0026#34;) 6)) ) (set-face-attribute \u0026#39;winum-face nil :weight \u0026#39;bold) (add-to-list \u0026#39;winum-assign-functions #\u0026#39;my/winum-assign-custom) (define-key winum-keymap [remap winum-select-window-9] #\u0026#39;spacemacs/switch-to-minibuffer-window) (setq winum-scope \u0026#39;frame-local winum-auto-assign-0-to-minibuffer nil winum-reverse-frame-list nil) (winum-mode 1) ) imenu-list # 1 2 3 4 (defun jh-navigation/post-init-imenu-list () (setq imenu-list-auto-resize nil) (setq imenu-list-size 45) ) Goto-last-change and Evil-goto # 1 2 3 4 5 6 7 8 9 10 (defun jh-navigation/init-goto-last-change () (require \u0026#39;goto-last-change) (global-unset-key (kbd \u0026#34;C-x ;\u0026#34;)) ; default - comment-set-column (global-set-key (kbd \u0026#34;C-x ,\u0026#34;) \u0026#39;goto-last-change) (global-set-key (kbd \u0026#34;C-x ;\u0026#34;) \u0026#39;goto-last-change-reverse) ) ;; goto-chg 패키지에서 아래 함수 제공 ;; evil-goto-last-change-reverse (g ,) ;; evil-goto-last-change (g ;) dumb-jump # 코지 이맥스의 설정을 확인하라. consult 로 대체되면 빼고.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 (defun jh-navigation/init-dumb-jump () (use-package dumb-jump :commands (dumb-jump-hydra/body) :custom (dumb-jump-selector \u0026#39;completing-read) :init ;; Use as xref backend (with-eval-after-load \u0026#39;xref (add-hook \u0026#39;xref-backend-functions #\u0026#39;dumb-jump-xref-activate 101)) (global-set-key (kbd \u0026#34;M-g j\u0026#34;) \u0026#39;dumb-jump-hydra/body) (spacemacs/set-leader-keys \u0026#34;j/\u0026#34; \u0026#39;dumb-jump-hydra/body) :config ;; Define Hydra keybinding (from the repo\u0026#39;s examples) (defhydra dumb-jump-hydra (:color amaranth :columns 3) \u0026#34;Dumb Jump.\u0026#34; (\u0026#34;j\u0026#34; dumb-jump-go \u0026#34;Go\u0026#34;) (\u0026#34;o\u0026#34; dumb-jump-go-other-window \u0026#34;Other window\u0026#34;) (\u0026#34;e\u0026#34; dumb-jump-go-prefer-external \u0026#34;Go external\u0026#34;) (\u0026#34;x\u0026#34; dumb-jump-go-prefer-external-other-window \u0026#34;Go external other window\u0026#34;) (\u0026#34;i\u0026#34; dumb-jump-go-prompt \u0026#34;Prompt\u0026#34;) (\u0026#34;l\u0026#34; dumb-jump-quick-look \u0026#34;Quick look\u0026#34;) (\u0026#34;b\u0026#34; dumb-jump-back \u0026#34;Back\u0026#34;) (\u0026#34;q\u0026#34; nil \u0026#34;Quit\u0026#34; :color blue)) )) Burly Frame/window Bookmark # 북마크 관리 차원에서 어떻게 할지 만들자. GitHub - alphapapa/burly.el: Save and restore frames and windows with their b\u0026hellip;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 (defun jh-navigation/init-burly () (use-package burly :after bookmark :demand :defer 5 :init (setq burly-tabs-mode nil) :config ;; M-m 누르면 Spacemacs Root 키바인딩 -- b I 누르면 된다. 이게 더 분류상 편하다. (spacemacs/declare-prefix \u0026#34;bM\u0026#34; \u0026#34;burly-bookmark-map\u0026#34;) (spacemacs/set-leader-keys \u0026#34;bMw\u0026#34; \u0026#39;burly-bookmark-windows) (spacemacs/set-leader-keys \u0026#34;bMo\u0026#34; \u0026#39;burly-open-bookmark) (spacemacs/set-leader-keys \u0026#34;bMl\u0026#34; \u0026#39;burly-open-last-bookmark) )) TODO loccur # 테스트 필요하다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 ;;;;; loccur (defun jh-navigation/init-loccur () (use-package loccur :defer t :config (spacemacs/declare-prefix \u0026#34;sv\u0026#34; \u0026#34;loccur\u0026#34;) (spacemacs/set-leader-keys \u0026#34;svv\u0026#34; \u0026#39;loccur-current \u0026#34;svl\u0026#34; \u0026#39;loccur-previous-match \u0026#34;svo\u0026#34; \u0026#39;loccur) ) ) Extra Power Dired # 파일 매니저는 Dired 로 충분하다만\u0026hellip; 아래와 같은 패키지들은 도움이 된다.\ndired-subtree # dired-subtree is a package that enables managing Dired buffers in a tree-like manner. By default evil-collection maps dired-subtree-toggle to TAB.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 (defun jh-navigation/init-dired-subtree () (use-package dired-subtree :demand :after dired :config (bind-key \u0026#34;\u0026lt;tab\u0026gt;\u0026#34; #\u0026#39;dired-subtree-toggle dired-mode-map) ) (defun my/dired-create-empty-file-subtree () (interactive) (let ((default-directory (dired-current-directory))) (dired-create-empty-file (read-file-name \u0026#34;Create empty file: \u0026#34;)))) ) dired-open # 1 2 3 4 5 6 7 8 9 (defun jh-navigation/init-dired-open () (use-package dired-open :demand :after dired :commands (dired-open-xdg) :config (setq dired-open-extensions \u0026#39;((\u0026#34;png\u0026#34; . \u0026#34;feh\u0026#34;) (\u0026#34;mkv\u0026#34; . \u0026#34;mpv\u0026#34;))) )) dired-git-info # Display git info, such as the last commit for file and stuff. It\u0026rsquo;s pretty useful but also slows down Dired a bit, hence I don\u0026rsquo;t turn it out by default.\n1 2 3 4 5 6 7 8 9 10 11 12 13 (defun jh-navigation/init-dired-git-info () (use-package dired-git-info :if (not my/slow-ssh) :demand :after dired :config ;; show git information (spacemacs/set-leader-keys-for-major-mode \u0026#39;dired-mode \u0026#34;I\u0026#34; \u0026#39;dired-git-info-mode) (define-key dired-mode-map \u0026#34;)\u0026#34; \u0026#39;dired-git-info-mode) ;; disabled by performance issues ;; (add-hook \u0026#39;dired-after-readin-hook \u0026#39;dired-git-info-auto-enable) )) dired-du # dired-du is a package that shows directory sizes\n1 2 3 4 5 6 7 8 9 10 (defun jh-navigation/init-dired-du () (use-package dired-du :demand :after dired :commands (dired-du-mode) :config (setq dired-du-size-format t) (spacemacs/set-leader-keys-for-major-mode \u0026#39;dired-mode \u0026#34;D\u0026#34; \u0026#39;dired-du-mode) )) dired-posframe # 1 2 3 4 5 6 7 8 9 10 11 (defun jh-navigation/init-dired-posframe () (use-package dired-posframe :demand :after dired :config ;; show current file with posframe ;; (add-hook \u0026#39;dired-mode-hook \u0026#39;dired-posframe-mode) (spacemacs/set-leader-keys-for-major-mode \u0026#39;dired-mode \u0026#34;P\u0026#34; \u0026#39;dired-posframe-mode) ;; (define-key dired-mode-map (kbd \u0026#34;C-*\u0026#34;) \u0026#39;dired-posframe-show) ; not working )) dired-narrow # vifm-like filter\n1 2 3 4 5 6 7 8 (defun jh-navigation/init-dired-narrow () (use-package dired-narrow :demand :after dired :commands dired-narrow :config (bind-key \u0026#34;\u0026lt;escape\u0026gt;\u0026#34; #\u0026#39;keyboard-quit dired-narrow-map) )) dired-sidebar # dired-sidebar enables opening Dired in sidebar. For me, with dired-subtree this makes dired a better option than Treemacs.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 (defun jh-navigation/init-dired-sidebar () (use-package dired-sidebar :after dired :demand :commands dired-sidebar-toggle-sidebar :init (add-hook \u0026#39;dired-sidebar-mode-hook (lambda () (unless (file-remote-p default-directory) (auto-revert-mode)))) :config ;; (setq dired-sidebar-width 40) (setq dired-sidebar-theme \u0026#39;nerd) ;; ascii ;; ---------------------- (setq dired-sidebar-use-custom-modeline nil) ; never !! (setq dired-sidebar-use-custom-font nil) ;; ---------------------- (setq dired-sidebar-use-magit-integration nil) ; default t (push \u0026#39;toggle-window-split dired-sidebar-toggle-hidden-commands) (push \u0026#39;rotate-windows dired-sidebar-toggle-hidden-commands) (setq dired-sidebar-subtree-line-prefix \u0026#34;__\u0026#34;) (setq dired-sidebar-use-term-integration t) ;; (setq dired-sidebar-follow-file-at-point-on-toggle-open nil) (spacemacs/set-leader-keys-for-major-mode \u0026#39;dired-mode \u0026#34;S\u0026#34; \u0026#39;dired-sidebar-toggle-sidebar) (spacemacs/set-leader-keys \u0026#34;oS\u0026#34; \u0026#39;dired-sidebar-toggle-sidebar) (global-set-key (kbd \u0026#34;M-g s\u0026#34;) \u0026#39;dired-sidebar-toggle-sidebar) (define-key dired-sidebar-mode-map \u0026#34;l\u0026#34; \u0026#39;dired-sidebar-find-file) (define-key dired-sidebar-mode-map \u0026#34;h\u0026#34; \u0026#39;dired-sidebar-up-directory) (define-key dired-sidebar-mode-map \u0026#34;=\u0026#34; \u0026#39;dired-narrow) ) ) ;; (with-eval-after-load \u0026#39;winum ;; (define-key winum-keymap ;; [remap winum-select-window-8] #\u0026#39;my/dired-sidebar-toggle) ;; (define-key winum-keymap ;; [remap winum-select-window-9] #\u0026#39;spacemacs/treemacs-project-toggle)) Outline-Mode # Outline mode (built-in) # 1 2 3 4 5 6 7 8 9 10 11 (defun jh-navigation/init-outline () (use-package outline :demand :init (setq outline-minor-mode-highlight nil) ; emacs28 (setq outline-minor-mode-cycle t) ; emacs28 (setq outline-minor-mode-use-buttons nil) ; emacs29---bless you for the nil option! ;; (setq outline-minor-mode-use-margins nil) ; as above ;; (define-key global-map (kbd \u0026#34;\u0026lt;f10\u0026gt;\u0026#34;) #\u0026#39;outline-minor-mode) ) ) Outli - Simple outline mode # GitHub - jdtsmith/outli: Simple comment-based outlines fo\u0026hellip;\noutshine 보다는 빌트인을 활용한 심플한 패키지를 선호한다. 대체해도 문제가 없다.\n1 2 3 4 5 6 7 8 9 (defun jh-navigation/init-outli () (use-package outli :after outline :defer 10 ;; :after lispy ; only if you use lispy; it also sets speed keys on headers! :bind (:map outli-mode-map ; convenience key to get back to containing heading (\u0026#34;C-c o\u0026#34; . (lambda () (interactive) (outline-back-to-heading)))) :hook ((prog-mode text-mode) . outli-mode)) ; or whichever modes you prefer ) Keybindings # 1 2 3 4 5 6 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; evil-jump or better-jumper (spacemacs/set-leader-keys \u0026#34;j.\u0026#34; \u0026#39;evil-jump-forward) (spacemacs/set-leader-keys \u0026#34;j,\u0026#34; \u0026#39;evil-jump-backward) (global-set-key (kbd \u0026#34;\u0026lt;f7\u0026gt;\u0026#34;) \u0026#39;imenu-list-smart-toggle) "},{"id":18,"href":"/configs/emacs/jh-org/","title":"jh-org layer","section":"menu/Dotfiles/dot-emacs","content":" jh-org Goals # org 관련 패키지들 모듬. 워크플로우는 별도로 파일 관리함.\nLayers # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (configuration-layer/declare-layer-dependencies \u0026#39;( (spacemacs-org :packages (default-org-config)) ; done (org ;; evil-org org-present ;; evil-surround gnuplot htmlize ob org-contrib org-download org-mime ;; org-pomodoro org-cliplink org-rich-yank org-epub ;; org-twbs org-gfm ox-hugo org-sticky-header ;; org-roam org-roam-ui ox-asciidoc org-journal :packages (not helm helm-org-rifle emoji-cheat-sheet-plus company company-emoji persp-mode) :variables org-enable-hugo-support t org-enable-roam-support t org-enable-roam-protocol t org-enable-roam-ui t org-enable-org-journal-support t org-want-todo-bindings t ; use evil-binding (t, T, M-t) org-enable-github-support t ; gfm markdown support org-enable-epub-support t org-enable-transclusion-support t org-enable-reveal-js-support t org-enable-asciidoc-support t org-enable-org-contacts-support t org-enable-modern-support t ;; should be nil org-enable-appear-support nil ; 2023-06-17 nil ;; ;; org-appear-trigger \u0026#39;manual ; for evil editing org-enable-sticky-header nil ; replace with my breadcrumbs org-todo-dependencies-strategy nil ; \u0026#39;naive-auto org-enable-valign nil ; performance issue, should be nil org-enable-trello-support nil ; should be nil ;; TODO 디렉토리 패스는 환경 변수 이용 할 것! org-directory \u0026#34;~/sync/org/\u0026#34; ;; org-directory (file-truename \u0026#34;~/sync/org/\u0026#34;) org-roam-directory (concat org-directory \u0026#34;roam/\u0026#34;) org-note-directory (concat org-directory \u0026#34;roam/\u0026#34;) org-user-agenda-files (list (concat org-directory \u0026#34;workflow/\u0026#34;)) org-agenda-files org-user-agenda-files org-workflow-directory (concat org-directory \u0026#34;workflow/\u0026#34;) org-contacts-files (list (concat org-directory \u0026#34;workflow/contacts.org\u0026#34;)) org-inbox-file (concat org-directory \u0026#34;workflow/inbox.org\u0026#34;) org-default-notes-file org-inbox-file org-log-file (concat org-directory \u0026#34;workflow/log.org\u0026#34;) org-agenda-diary-file org-log-file org-projectile-file (concat org-directory \u0026#34;workflow/project.org\u0026#34;) ;; org-download org-download-method \u0026#39;directory org-download-heading-lvl nil org-download-timestamp \u0026#34;%Y%m%d-%H%M-\u0026#34; org-download-image-dir \u0026#34;imgs\u0026#34; ;; org-download-image-org-width 640 org-download-image-attr-list \u0026#39;(\u0026#34;#+attr_html: :width 100% :align center\u0026#34; \u0026#34;#+caption: \u0026#34; \u0026#34;#+attr_org: :width 800px\u0026#34;) ;; org-cliplink-max-length 60 ; 80 ) ) ) Packages # Packages # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (defconst jh-org-packages \u0026#39;( org-journal ; TODO 삭제할 것! citar citar-embark ;; Additional Packages org-modern (org-modern-indent :location (recipe :fetcher github :repo \u0026#34;jdtsmith/org-modern-indent\u0026#34;)) (org-remoteimg :location (recipe :fetcher github :repo \u0026#34;gaoDean/org-remoteimg\u0026#34;)) orglink org-gcal ; sync google-calendar ;; org-hyperscheduler org-super-agenda ob-translate ob-mermaid ob-d2 org-make-toc ;; toc-org org-auto-tangle ;; org-tree-slide ;; (org-tufte :location (recipe :fetcher github :repo \u0026#34;Zilong-Li/org-tufte\u0026#34;)) org-remark ;; org-reverse-datetree org-drill ;; (org-fc :location (recipe :fetcher github :repo \u0026#34;l3kn/org-fc\u0026#34;)) (org-web-tools :location (recipe :fetcher github :repo \u0026#34;alphapapa/org-web-tools\u0026#34; :files (\u0026#34;*.el\u0026#34; \u0026#34;*.org\u0026#34;))) ;; org-kanban (org-glossary :location (recipe :fetcher github :repo \u0026#34;tecosaur/org-glossary\u0026#34; :files (\u0026#34;*.el\u0026#34; \u0026#34;*.org\u0026#34; \u0026#34;*.texi\u0026#34;))) (org-pandoc-import :location (recipe :fetcher github :repo \u0026#34;tecosaur/org-pandoc-import\u0026#34; :files (\u0026#34;*.el\u0026#34; \u0026#34;*.org\u0026#34; \u0026#34;filters\u0026#34; \u0026#34;preprocessors\u0026#34;))) ;; titlecase ;; (pdftotext :location (recipe :fetcher github :repo \u0026#34;tecosaur/pdftotext.el\u0026#34; ;; :files (\u0026#34;*.el\u0026#34; \u0026#34;*.org\u0026#34;))) ;; (orgdiff :location (recipe :fetcher github :repo \u0026#34;tecosaur/orgdiff\u0026#34; ;; :files (\u0026#34;*.el\u0026#34; \u0026#34;*.org\u0026#34;))) ;; (org-link-base :location (recipe ;; :fetcher github :repo \u0026#34;cashpw/org-link-base\u0026#34;)) )) TODO org-journal # 오랫동안 사귀었던 정든 내 친구야. 이제 안녕!\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 (defun jh-org/post-init-org-journal () (setq org-journal-dir (expand-file-name \u0026#34;~/sync/org/logseq/journals\u0026#34;)) (setq org-journal-find-file \u0026#39;find-file-at-point) ; default \u0026#39;find-file-other-window (setq org-journal-file-format \u0026#34;%Y_%m_%d.org\u0026#34;) (setq org-journal-date-format \u0026#34;%Y-Week-%U %y-%m-%d (%A)\u0026#34;) ;; org-journal-tag-alist ; default nil ;; (setq org-journal-file-header ;; \u0026#34;:PROPERTIES:\\n:SUBTITLE:\\n:END:\\n\\n\u0026#34;) ; default \u0026#34;\u0026#34; ;; (setq org-journal-follow-mode t) (setq org-journal-time-prefix \u0026#34;** \u0026#34;) (defun my/daily-fortune() (when (executable-find \u0026#34;fortune\u0026#34;) (insert \u0026#34;\\n\u0026#34;) (insert (string-join (mapcar (lambda (l) (concat \u0026#34; \u0026#34; l)) (string-lines (shell-command-to-string \u0026#34;fortune\u0026#34;))) \u0026#34;\\n\u0026#34;))) ) (add-hook \u0026#39;org-journal-after-header-create-hook \u0026#39;my/daily-fortune) ;; (setq org-journal-time-format \u0026#34;\u0026#34;) ) org-glossary # https://github.com/tecosaur/org-glossary/blob/master/org-glossary.org 문서를 읽고 사용해보세요\nOther than hooking this to org-mode, we also want to set a collection root and improve the LaTeX usage references with cleveref\u0026rsquo;s \\labelcpageref command.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 (defun jh-org/init-org-glossary () (use-package org-glossary :ensure :after org :config (setq org-glossary-collection-root \u0026#34;~/sync/org/roam/terms/\u0026#34;) ;; (setq org-glossary-global-terms nil) (add-hook \u0026#39;org-mode-hook \u0026#39;org-glossary-mode) )) ;; sample from tecosaur/org-glossary ;; (defun +org-glossary--latex-cdef (backend info term-entry form \u0026amp;optional ref-index plural-p capitalized-p extra-parameters) ;; (org-glossary--export-template ;; (if (plist-get term-entry :uses) ;; \u0026#34;*%d*\\\\emsp{}%v\\\\ensp{}@@latex:\\\\labelcpageref{@@%b@@latex:}@@\\n\u0026#34; ;; \u0026#34;*%d*\\\\emsp{}%v\\n\u0026#34;) ;; backend info term-entry ref-index ;; plural-p capitalized-p extra-parameters)) ;; (org-glossary-set-export-spec ;; \u0026#39;latex t ;; :backref \u0026#34;gls-%K-use-%r\u0026#34; ;; :backref-seperator \u0026#34;,\u0026#34; ;; :definition-structure #\u0026#39;+org-glossary--latex-cdef) org-drill # 1 2 (defun jh-org/init-org-drill () (use-package org-drill :after org :defer 20)) Utility # org-remoteimg # GUI 모드에서만 동작한다. 터미널에서는 kitty 그래픽 프로토콜을 이용하는 방법도 있다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 (defun jh-org/init-org-remoteimg () (use-package org-remoteimg :if window-system :after org :config ;; optional: set this to wherever you want the cache to be stored ;; (setq url-cache-directory \u0026#34;~/.cache/emacs/url\u0026#34;) (setq org-display-remote-inline-images \u0026#39;cache) ;; enable caching ;; or this if you don\u0026#39;t want caching ;; (setq org-display-remote-inline-images \u0026#39;download) ;; or this if you want to disable this plugin ;; (setq org-display-remote-inline-images \u0026#39;skip) ;; this is a emacs built-in feature ;; (setq url-automatic-caching t) )) orglink # [2023-04-19 Wed 21:31] This library implements support for some Org Mode link types in other major modes. Links can be opened and edited like in Org Mode.\nTo use enable `global-orglink-mode\u0026rsquo; and customize `orglink-activate-in-modes\u0026rsquo;. Or use the buffer local `orglink-mode\u0026rsquo;. Do the latter now to linkify these examples:\n1 2 3 4 5 6 (defun jh-org/init-orglink () (use-package orglink :after org :config (add-hook \u0026#39;spacemacs-post-user-config-hook #\u0026#39;global-orglink-mode) )) org-remark # hightlight and annotating\n1 2 (defun jh-org/init-org-remark () (use-package org-remark)) org-web-tools # org-web-tools url https://github.com/alphapapa/org-web-tools org-protocol-capture-html : clipboard GitHub - alphapapa/org-protocol-capture-html: Capture HTML from the browser s\u0026hellip;\nalphapapa/org-web-tools#45 handling same-page relative links, such as footnotes\n위의 이슈를 확인한다. 코드 동작은 따로 확인해봐야 한다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 (defun jh-org/init-org-web-tools () (use-package org-web-tools :config ;; (require \u0026#39;org-protocol-capture-html) ;; 클립보드에 복사 된 url 을 org 로 가져온다. footnote 는 개선 되야 한다. (defun org-web-tools--convert-fns-relative () \u0026#34;Convert ^{n} format footnotes in document to org syntax.\u0026#34; (interactive) (save-match-data (while (re-search-forward \u0026#34;\\\\^{\\\\([[:digit:]]+\\\\)}\u0026#34; nil t) (let ((match (match-string 1))) (replace-match (format \u0026#34;[fn:%s]\u0026#34; match)))))) (defun org-web-tools--convert-fns-relative-alt () \u0026#34;Convert [[#enN]][N]] format footnotes in document to org syntax.\u0026#34; (interactive) (save-match-data (while (re-search-forward \u0026#34;\\\\[\\\\[#\\\\(en\\\\|fn\\\\)\\\\([[:digit:]]+\\\\)\\\\]\\\\[[[:digit:]\\\\|↩]+\\\\]\\\\]\u0026#34; nil t) ;; NB: 2 here not 1! cd also use (or) and test for first group containing digits (let ((match (match-string 2)) (match-type (match-string 1))) (replace-match (format \u0026#34;[fn:%s]\u0026#34; match)) ;; org-fns must be at bol to work: (when (and (equal match-type \u0026#34;fn\u0026#34;) ;only for fns in footnotes section (not (bolp))) (backward-sexp) ; move point to before org fn\u0026#39;s \u0026#34;[\u0026#34; (kill-line -0)))))) ; kill backward to bol )) org-pandoc-import # The basic \u0026ldquo;get me out of here\u0026rdquo; \u0026mdash; org-pandoc-import-{to,as}-org allows you to easily convert supported non-org files to an org file/buffer with Pandoc \u0026ldquo;I don\u0026rsquo;t even want to see non-org files\u0026rdquo; \u0026mdash; org-pandoc-import-transient-mode is for you (via file handlers) intercepts requests for non-org files it knows it can convert uses org-pandoc-import-to-org to convert the file to a temporary org file opens this org file instead exports back to the original non-org file on save 1 2 3 (defun jh-org/init-org-pandoc-import () (use-package org-pandoc-import :defer t)) org-auto-tangles # 1 2 3 4 5 6 7 (defun jh-org/init-org-auto-tangle () (use-package org-auto-tangle :defer t :after org :hook (org-mode . org-auto-tangle-mode) :init (setq org-auto-tangle-default t))) org-make-toc and toc-org # 문서 상단에 프로퍼티로 TOC 를 포함하는 헤딩을 만들면 업데이트 해준다. 사용법은 여기에 https://github.com/alphapapa/org-make-toc Hook 로 넣지 않고, 필요할 때 수동으로 호출 한다.\n2023-03-31 toc-org 는 spacemacs-org 레이어에 있는데 따로 설정한다. 제대로 사용 못해봤다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 (defun jh-org/init-org-make-toc () (use-package org-make-toc :defer t)) ;; (add-hook \u0026#39;org-mode-hook \u0026#39;org-make-toc-mode) ; 수동으로 호출하자. ;; (defun jh-org/init-toc-org () ;; (use-package toc-org () :defer t)) ;; (if (require \u0026#39;toc-org nil t) ;; (progn ;; (setq toc-org-max-depth 5) ;; ;; (add-hook \u0026#39;org-mode-hook \u0026#39;toc-org-mode) ;; ;; (add-hook \u0026#39;markdown-mode-hook \u0026#39;toc-org-mode) ;; ;; (define-key markdown-mode-map (kbd \u0026#34;\\C-c\\C-o\u0026#34;) \u0026#39;toc-org-markdown-follow-thing-at-point) ;; ) ;; (warn \u0026#34;toc-org not found\u0026#34;)) org-babel # ob-translate\n1 2 3 4 (defun jh-org/init-ob-translate () (use-package ob-translate :config (setq ob-translate:default-dest \u0026#34;ko\u0026#34;))) 1 Doom is a configuration framework for GNU Emacs tailored for Emacs bankruptcy veterans who want less framework in their frameworks, a modicum of stability (and reproducibility) from their package manager, and the performance of a hand rolled config (or better). It can be a foundation for your own config or a resource for Emacs enthusiasts to learn more about our favorite operating system. ob-mermaid\n2023-03-23 스페이스맥스에 restclient 레이어에 이미 있다.\nMermaid is a tool for drawing systems diagrams. NOTE: The variable ob-mermaid-cli-path needs to be set in the config (because it will change from system to system).\nnpm install -g @mermaid-js/mermaid-cli mmdc -i input.mmd -o output.svg 1 2 3 4 5 6 7 (defun jh-org/init-ob-mermaid () (use-package ob-mermaid :ensure t :config (setq ob-mermaid-cli-path \u0026#34;~/.asdf/shims/mmdc\u0026#34;) ) ) ob-d2\n[2023-06-16 Fri 12:47] https://github.com/xcapaldi/ob-d2\n1 2 3 4 5 6 7 (defun jh-org/init-ob-d2 () (use-package ob-d2 :ensure t :config (setq ob-d2-command \u0026#34;~/.local/bin/d2\u0026#34;) ) ) org-modern # 2023-04-16 다시 한번 재확인. 쓰지 말자! 터미널 모드 호환 문제. 2023-04-30 GUI 모드에서만 사용하자\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 (defun jh-org/post-init-org-modern () (setq ;; Edit settings org-catch-invisible-edits \u0026#39;show-and-error ;; org-special-ctrl-a/e t ;; Org styling, hide markup etc. ;; org-hide-emphasis-markers t ;; org-pretty-entities t ; nil ) (setq org-modern-hide-stars nil) ; default -- \u0026#39;leading (setq org-modern-label-border \u0026#39;auto) ; 0.1 - 0.4 -- auto (setq org-modern-block-fringe 0) ; 0 - 16 - default 0 (setq org-modern-table-vertical 1 org-modern-table-horizontal 0.2 org-modern-horizontal-rule (make-string 36 ?─)) (setq org-modern-statistics nil) (setq org-modern-tag nil) (setq org-modern-footnote nil) (setq org-modern-list \u0026#39;((?+ . \u0026#34;◦\u0026#34;) (?- . \u0026#34;–\u0026#34;) (?* . \u0026#34;★\u0026#34;))) ; BLACK STAR (setq org-modern-checkbox nil) ; conflict org-pretty-symbol ;; (setq org-modern-checkbox ;; \u0026#39;((?X . \u0026#34;☒\u0026#34;) ; completed ;; ;; (?- . #(\u0026#34;□–\u0026#34; 0 2 (composition ((2))))) ;; (?- . \u0026#34;◩\u0026#34;) ; progress ;; (?\\? . \u0026#34;▣\u0026#34;) ; hold pause ;; (?\\s . \u0026#34;☐\u0026#34;))) ; todo (setq org-modern-todo nil) (setq org-modern-star nil) (setq org-modern-table nil) (setq org-modern-keyword nil) (setq org-modern-priority nil) (setq org-modern-block-name nil) (setq org-modern-timestamp nil) ;; I don\u0026#39;t use those in documents anyway, and if I ever do I need to ;; remember what their standard looks are. (setq org-modern-internal-target nil) (setq org-modern-radio-target nil) (unless (display-graphic-p) ; disable on terminal (remove-hook \u0026#39;org-mode-hook #\u0026#39;org-modern-mode)) (remove-hook \u0026#39;org-agenda-finalize-hook #\u0026#39;org-modern-agenda) ) (defun jh-org/init-org-modern-indent () (use-package org-modern-indent :config (when (display-graphic-p) ; gui-mode (add-hook \u0026#39;org-mode-hook #\u0026#39;org-modern-indent-mode 90) ; late hook ))) citations with citar # Citations in org-mode: Org-cite and Citar | Kristoffer Balintona Citations are built into org mode, but it\u0026rsquo;s nice to have a way to complete them.\nCitar 과 빌트인으로 다 커버한다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 (defun jh-org/init-citar () (use-package citar :ensure ;; :hook (org-mode . citar-capf-setup) :init (require \u0026#39;oc) (setq config-bibfiles (list \u0026#34;~/sync/org/bib/zotero-biblatex.bib\u0026#34;)) (setq citar-bibliography config-bibfiles) ;; use #+cite_export: csl apa.csl (setq org-cite-csl-styles-dir \u0026#34;~/sync/logseq/zotero/styles\u0026#34;) (setq citar-notes-paths \u0026#39;(\u0026#34;~/sync/org/roam/notes/\u0026#34;)) (setq org-cite-global-bibliography config-bibfiles) (setq org-cite-insert-processor \u0026#39;citar) (setq org-cite-follow-processor \u0026#39;citar) (setq org-cite-activate-processor \u0026#39;citar) (require \u0026#39;all-the-icons) (setq citar-symbols `((file ,(all-the-icons-faicon \u0026#34;file-pdf-o\u0026#34; :face \u0026#39;all-the-icons-green :v-adjust -0.1) . \u0026#34; \u0026#34;) (note ,(all-the-icons-material \u0026#34;speaker_notes\u0026#34; :face \u0026#39;all-the-icons-blue :v-adjust -0.3) . \u0026#34; \u0026#34;) (link ,(all-the-icons-octicon \u0026#34;link\u0026#34; :face \u0026#39;all-the-icons-orange :v-adjust 0.01) . \u0026#34; \u0026#34;))) (setq citar-symbol-separator \u0026#34; \u0026#34;) ) ) (defun jh-org/init-citar-embark () (use-package citar-embark :after citar embark :ensure :config (citar-embark-mode 1))) org-super-agenda # 활용 가능성이 많은데 여기 룰에 따라야 한다.\n1 2 3 4 5 (defun jh-org/init-org-super-agenda () (use-package org-super-agenda :after org :demand) ) Funcs # 1 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- get-id-to-clipboard # Improving my Orgmode workflow | König von Haunstetten org-capture 는 work.org 로 모인다. 투두, 노트 뭐 등등 다 refile 파일로 모은다. refile 에는 할일이 쌓인다. agenda 를 열면 한눈에 파악 할 수 있다. 오직 refile 만 일단 보는 것이다. 물론 일정기간(2 주) 뭐 등등 처리 못하는 일은 따로 분류 한다. 그리고 refile 에 글어온 TODO 는 org-journal 에 리스트로 남긴다.\n거기에 복붙하고 처리하면 된다. ID 가 생성되면 좋은 점이 있다. caldav 가 가능하다는 점이다. 굳이 그럴 필요가 있나 싶지만. 헤딩만 똑같게 해주면 보는 것도 쉬울 것이다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 (defun my/get-id-to-clipboard() \u0026#34;Copy an ID link with the headline to killring, if no ID is there then create a new unique ID. This function works only in org-mode or org-agenda buffers. The purpose of this function is to easily construct id:-links to org-mode items. If its assigned to a key it saves you marking the text and copying to the killring.\u0026#34; (interactive) (when (eq major-mode \u0026#39;org-agenda-mode) ;switch to orgmode (org-agenda-show) (org-agenda-goto)) (when (eq major-mode \u0026#39;org-mode) ; do this only in org-mode buffers (setq mytmphead (nth 4 (org-heading-components))) (setq mytmpid (funcall \u0026#39;org-id-get-create)) (setq mytmplink (format \u0026#34;[[id:%s][%s]]\u0026#34; mytmpid mytmphead)) (kill-new mytmplink) (message \u0026#34;Copied %s to killring (clipboard)\u0026#34; mytmplink) )) (let ((map global-map)) (define-key map (kbd \u0026#34;C-c j g\u0026#34;) \u0026#39;my/get-id-to-clipboard) ) Split and indirect orgtree # 1 2 3 4 5 6 7 8 9 10 11 12 13 ;;;; copy from writers-dot-spacemaccs (defun my/split-and-indirect-orgtree () \u0026#34;Splits window to the right and opens an org tree section in it\u0026#34; (interactive) (split-window-right) (org-tree-to-indirect-buffer) (windmove-right)) (defun my/kill-and-unsplit-orgtree () \u0026#34;Kills the cloned buffer and deletes the window.\u0026#34; (interactive) (kill-this-buffer) (delete-window)) org-toggle-markup # 1 2 3 4 (defun my/org-toggle-emphasis-markers () (interactive) (setq org-hide-emphasis-markers (not org-hide-emphasis-markers)) (font-lock-fontify-buffer :interactively)) open org files # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ;; (defun my/open-org-slipbox-file () ;; (interactive ) ;; (find-file org-slipbox-file)) (defun open-org-inbox-file () \u0026#34;Open `org-inbox-file\u0026#39;\u0026#34; (interactive) (find-file org-inbox-file)) (defalias \u0026#39;open-org-default-notes-file #\u0026#39;open-org-inbox-file \u0026#34;Open `org-default-notes-file\u0026#39;\u0026#34;) (defun org-note-files () \u0026#34;Get the list of `org-mode\u0026#39; file in `org-note-directory\u0026#39;.\u0026#34; (interactive) (find-lisp-find-files org-note-directory \u0026#34;\\.org$\u0026#34;)) (defun org-workflow-files () \u0026#34;Get the list of `org-mode\u0026#39; file in `org-note-directory\u0026#39;.\u0026#34; (interactive) (find-lisp-find-files org-workflow-directory \u0026#34;\\.org$\u0026#34;)) ;; (defun org-super-agenda (\u0026amp;optional arg) ;; (interactive \u0026#34;P\u0026#34;) ;; (org-agenda arg \u0026#34;o\u0026#34;)) align-comments # 1 2 3 4 5 (defun my/align-comments (beginning end) \u0026#34;Align comments in region.\u0026#34; (interactive \u0026#34;*r\u0026#34;) (align-regexp beginning end (concat \u0026#34;\\\\(\\\\s-*\\\\)\u0026#34; (regexp-quote comment-start)) nil 2)) Indent-buffer # 1 2 3 4 (defun my/indent-buffer () \u0026#34;Indent buffer.\u0026#34; (interactive) (indent-region (point-min) (point-max))) comment-or-uncomment-region # 1 2 3 4 5 6 7 (defun my/comment-or-uncomment-region () \u0026#34;Comment or uncomment region with just a character (e.g. \u0026#39;/\u0026#39;). If a region is active call comment-or-uncomment-region, otherwise just insert the given char.\u0026#34; (interactive) (call-interactively (if (region-active-p) \u0026#39;comment-or-uncomment-region \u0026#39;self-insert-command))) org-indent-src-block # 1 2 3 4 5 (defun my/org-indent-src-block () (interactive) (org-edit-special) (my/indent-buffer) (org-edit-src-exit)) org-sort-by-priority # 1 2 3 4 5 6 7 8 (defun my/org-sort-by-priority () \u0026#34;Sort entries in level=2 by priority.\u0026#34; (interactive) (org-map-entries (lambda () (condition-case nil (org-sort-entries nil ?p) (error nil))) \u0026#34;LEVEL=1\u0026#34;) (org-set-startup-visibility)) Easier file links # While org-insert-link is all very well and good, a large portion of the time I want to insert a file, and so it would be good to have a way to skip straight to that and avoid the description prompt. Looking at org-link-parameters, we can see that the \u0026quot;file\u0026quot; link type uses the completion function org-link-complete-file, so let\u0026rsquo;s use that to make a little file-link inserting function.\n1 2 3 4 (defun org-insert-file-link () \u0026#34;Insert a file link. At the prompt, enter the filename.\u0026#34; (interactive) (insert (format \u0026#34;[[%s]]\u0026#34; (org-link-complete-file)))) Removing Links # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 (defun org-delete-link () \u0026#34;Remove the link part of an org-mode link at point and keep only the description\u0026#34; (interactive) (let ((elem (org-element-context))) (when (eq (car elem) \u0026#39;link) (let* ((content-begin (org-element-property :contents-begin elem)) (content-end (org-element-property :contents-end elem)) (link-begin (org-element-property :begin elem)) (link-end (org-element-property :end elem))) (when (and content-begin content-end) (let ((content (buffer-substring-no-properties content-begin content-end))) (delete-region link-begin link-end) (insert (concat content \u0026#34; \u0026#34;)))))))) Previewing Info files # DW 설정인데 확인해볼 것! I\u0026rsquo;m experimenting with generating Texinfo from Org Mode files and I need a way to quickly preview the resulting .info files. This auto-mode-alist entry automatically previews an .info file when visited with find-file:\n1 (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.info\\\\\u0026#39;\u0026#34; . Info-on-current-buffer)) Configs # 1 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- Terminal-mode # org-heading 현재 터미널 모드에서 heading 사이즈 조정을 다 제거한 상태라 별도로 필요가 없다. disable org-appear 1 2 3 4 5 6 ;; (unless (display-graphic-p) ; terminal ;; ;; (setq org-level-color-stars-only t) ;; ;; (setq org-appear-trigger \u0026#39;on-change) ; \u0026#39;manual ;; (setq org-hide-emphasis-markers nil) ;; (remove-hook \u0026#39;org-mode-hook \u0026#39;org-appear-mode) ;; ) Keybindings # Global keybindings # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; 파일 패스 복사 =SPC f y l= (global-set-key (kbd \u0026#34;C-c f\u0026#34;) \u0026#39;spacemacs/copy-file-path) ;; (global-set-key (kbd \u0026#34;C-c F\u0026#34;) \u0026#39;spacemacs/copy-file-path-with-line) (global-set-key (kbd \u0026#34;C-c F\u0026#34;) \u0026#39;spacemacs/projectile-copy-file-path) ;; search to narrow with heading and tag (global-set-key (kbd \u0026#34;C-c g\u0026#34;) \u0026#39;consult-org-heading) ;; Shortcuts to Interactive Functions ;; \u0026#34;C-x n\u0026#34; prefix (global-set-key (kbd \u0026#34;C-x n m\u0026#34;) #\u0026#39;my/split-and-indirect-orgtree) (global-set-key (kbd \u0026#34;C-x n M\u0026#34;) #\u0026#39;my/kill-and-unsplit-orgtree) (spacemacs/set-leader-keys \u0026#34;nm\u0026#34; #\u0026#39;my/split-and-indirect-orgtree) (spacemacs/set-leader-keys \u0026#34;nM\u0026#34; #\u0026#39;my/kill-and-unsplit-orgtree) (global-set-key (kbd \u0026#34;C-c j o t\u0026#34;) \u0026#39;org-make-toc) ;; (global-set-key (kbd \u0026#34;C-c j o s\u0026#34;) \u0026#39;open-org-slipbox-file) (global-set-key (kbd \u0026#34;C-c j o i\u0026#34;) \u0026#39;open-org-inbox-file) ;; (global-set-key (kbd \u0026#34;C-c j o r\u0026#34;) \u0026#39;open-org-refile-file) ;; (global-set-key (kbd \u0026#34;C-c j o p\u0026#34;) \u0026#39;open-org-project-file) (global-set-key (kbd \u0026#34;C-c j o n\u0026#34;) \u0026#39;org-note-files) (global-set-key (kbd \u0026#34;C-c j o w\u0026#34;) \u0026#39;org-workflow-files) (global-set-key (kbd \u0026#34;C-c j o S\u0026#34;) \u0026#39;org-gcal-sync) Spacemacs keybindings # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 (spacemacs/set-leader-keys-for-major-mode \u0026#39;org-mode \u0026#34;TM\u0026#34; \u0026#39;my/org-toggle-markup) (spacemacs/set-leader-keys \u0026#34;tM\u0026#34; #\u0026#39;my/org-toggle-emphasis-markers) (spacemacs/set-leader-keys-for-major-mode \u0026#39;org-mode \u0026#34;E\u0026#34; \u0026#39;org-set-effort) (spacemacs/set-leader-keys-for-major-mode \u0026#39;org-mode \u0026#34;D\u0026#34; \u0026#39;org-deadline) (spacemacs/set-leader-keys-for-major-mode \u0026#39;org-mode \u0026#34;S\u0026#34; \u0026#39;org-schedule) (spacemacs/set-leader-keys-for-major-mode \u0026#39;org-mode \u0026#34;g\u0026#34; \u0026#39;consult-org-heading) (spacemacs/set-leader-keys-for-major-mode \u0026#39;org-journal-mode \u0026#34;g\u0026#34; \u0026#39;consult-org-heading) (spacemacs/set-leader-keys-for-major-mode \u0026#39;org-mode \u0026#34;\\\\\u0026#34; \u0026#39;org-tags-sparse-tree) (spacemacs/set-leader-keys-for-major-mode \u0026#39;org-journal-mode \u0026#34;\\\\\u0026#34; \u0026#39;org-tags-sparse-tree) (spacemacs/set-leader-keys-for-major-mode \u0026#39;org-mode \u0026#34;Tm\u0026#34; \u0026#39;org-toggle-item) (spacemacs/set-leader-keys-for-major-mode \u0026#39;org-journal-mode \u0026#34;Tm\u0026#34; \u0026#39;org-toggle-item) (spacemacs/set-leader-keys-for-major-mode \u0026#39;org-mode \u0026#34;TP\u0026#34; \u0026#39;org-present) ;; (spacemacs/set-leader-keys-for-major-mode \u0026#39;org-mode ;; \u0026#34;ic\u0026#34; \u0026#39;org-bibtex-create) ;; (spacemacs/set-leader-keys-for-major-mode \u0026#39;org-mode ;; \u0026#34;ec\u0026#34; \u0026#39;org-bibtex) custom-functions # 1 2 3 4 (spacemacs/set-leader-keys-for-major-mode \u0026#39;org-mode \u0026#34;R\u0026#34; \u0026#39;org-delete-link) (spacemacs/set-leader-keys-for-major-mode \u0026#39;org-mode \u0026#34;F\u0026#34; \u0026#39;org-insert-file-link) org-web-tools # 1 2 3 4 ;; Display and capture web content with Org-mode (global-set-key (kbd \u0026#34;C-c w r\u0026#34;) \u0026#39;org-web-tools-read-url-as-org) (spacemacs/declare-prefix \u0026#34;Cw\u0026#34; \u0026#34;org-web-tools\u0026#34;) (spacemacs/set-leader-keys \u0026#34;Cwr\u0026#34; \u0026#39;org-web-tools-read-url-as-org) Utilities # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 (define-key org-mode-map (kbd \u0026#34;C-c y\u0026#34;) \u0026#39;org-cliplink) (evil-define-key \u0026#39;(insert) org-mode-map (kbd \u0026#34;C-u\u0026#34;) \u0026#39;undo-fu-only-undo) (evil-define-key \u0026#39;(insert) org-mode-map (kbd \u0026#34;C-r\u0026#34;) \u0026#39;undo-fu-only-redo) ;; (evil-define-key \u0026#39;(insert) org-mode-map (kbd \u0026#34;C-0\u0026#34;) \u0026#39;begginng-of-line) ;; (evil-define-key \u0026#39;(insert) org-mode-map (kbd \u0026#34;C-4\u0026#34;) \u0026#39;end-of-line) ;; flameshot 으로 스크린샷 한 뒤, 바로 붙여넣기 ;; 22/10/04--15:18 :: flameshot 저장하면 자동으로 클립보드에 ;; full-path가 복사된다. imglink 스니펫을 부르고 경로를 복사한다. ;; 스크린샷 및 이미지를 관리하기에 이러한 방법이 더 좋다. (evil-define-key \u0026#39;(normal insert visual) org-mode-map (kbd \u0026#34;C-c M-y\u0026#34;) \u0026#39;org-download-clipboard) ;; (define-key map (kbd \u0026#34;C-c M-y\u0026#34;) \u0026#39;org-download-clipboard) "},{"id":19,"href":"/configs/emacs/jh-org-workflow/","title":"jh-org-workflow","section":"menu/Dotfiles/dot-emacs","content":" 노랑님의 워크플로우 기반 커스텀 GUIDE # 노랑님의 체계를 거의 따라갑니다. 키바인딩도 왠만하면 변경하지 않습니다. 노랑님 시스템에 익숙해 지고 나서, 최근 이맥스의 흐름을 반영하고자 합니다.\n아래는 노랑님의 글을 대충 번역한 것이다. 읽어 보고 한글로 이해 안되면 원문을 보고 수정한다. 이해되는 수준이라면 번역이 별로여도 손대지 않는다. 손대기 시작하면 나의 문장으로 다시 써야 하는데 시간이 오래 걸리는 일이다. Packages donotmove # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (defconst jh-org-workflow-packages \u0026#39;( org )) START post-init-org donotmove # Basic syntax Hotkeys for creating headlines and moving them Basic formatting Links (org-insert-link, org-open-at-point) Tables Bulleted lists, checkboxes (s-M-RET to make new check item) Source blocks Inline code Tasks (C-c C-t, org-todo) Indentation 이슈 (2023-04-16) org-indent-mode 를 사용하면 adapt-indentation 은 자동 비활성화 startup-indent 를 켜면 org-indent-mode 활성화 org-modern, org-modern-indent-mode 는 터미널 모드에서 src block 문제 즉, Simple is Best. org-indent-mode 만 org-mode-hook 으로 추가! Evil Collection [tab] \u0026lsquo;org-cycle [S-tab] \u0026lsquo;org-shifttab \u0026ldquo;{\u0026rdquo; \u0026lsquo;org-backward-paragraph \u0026ldquo;}\u0026rdquo; \u0026lsquo;org-forward-paragraph \u0026ldquo;(\u0026rdquo; \u0026lsquo;org-backward-sentence \u0026ldquo;)\u0026rdquo; \u0026lsquo;org-forward-sentence 1 2 3 ;;;; \u0026#39;post-init-org\u0026#39; Load org-workflow (defun jh-org-workflow/post-init-org () Getting Started # 4 장에서 설정 관련 핵심 철학이 나온다. 파일 구성이다.\nMy day goes generally like this: # Punch in (this starts the clock on the default task) Look at the agenda and make a mental note of anything important to deal with today Read email and news create notes, and tasks for things that need responses with org-capture Check refile tasks and respond to emails Look at my agenda and work on important tasks for today Clock it in Work on it until it is DONE or it gets interrupted Work on tasks Make journal entries (C-c c j) for interruptions Punch out for lunch and punch back in after lunch work on more tasks Refile tasks to empty the list Tag tasks to be refiled with m collecting all tasks for the same target Bulk refile the tasks to the target location with B r Repeat (or refile individually with C-c C-w) until all refile tasks are gone Mark habits done today as DONE Punch out at the end of the work day Keybinding Tables # 1 노랑님 바인딩 예 I have the following custom key bindings set up for my emacs (sorted by frequency).\nKey For Used F12 Agenda (1 key less than C-c a) Very Often C-c b Switch to org file Very Often F11 Goto currently clocked item Very Often C-c c Capture a task Very Often C-F11 Clock in a task (show menu with prefix) Often f9 g Gnus - I check mail regularly Often f5 Show todo items for this subtree Often S-f5 Widen Often f9 b Quick access to bbdb data Often f9 c Calendar access Often C-S-f12 Save buffers and publish current project Often C-c l Store a link for retrieval with C-c C-l Often f8 Go to next org file in org-agenda-files Sometimes f9 r Boxquote selected region Sometimes f9 t Insert inactive timestamp Sometimes f9 v Toggle visible mode (for showing/editing links) Sometimes C-f9 Previous buffer Sometimes C-f10 Next buffer Sometimes C-x n r Narrow to region Sometimes f9 f Boxquote insert a file Sometimes f9 i Info manual Sometimes f9 I Punch Clock In Sometimes f9 O Punch Clock Out Sometimes f9 o Switch to org scratch buffer Sometimes f9 s Switch to scratch buffer Sometimes f9 h Hide other tasks Rare f7 Toggle line truncation/wrap Rare f9 T Toggle insert inactive timestamp Rare C-c a Enter Agenda (minimal emacs testing) Rare Keybinding Codes # Key For Used C-n/p org-next/prev-visible-heading Very Often M-n/p org-next/prev-link Very Often C-c %/\u0026amp; org-mark-ring-push/goto Very Often C-c @ org-mark-subtree M-hjkl org-meta hjkl Very Often 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 ;; from DW (evil-define-key \u0026#39;(normal insert visual) org-mode-map (kbd \u0026#34;C-n\u0026#34;) \u0026#39;org-next-visible-heading) (evil-define-key \u0026#39;(normal insert visual) org-mode-map (kbd \u0026#34;C-p\u0026#34;) \u0026#39;org-previous-visible-heading) ;; =C-c %= org-mark-ring-push, =C-c \u0026amp;= org-mark-ring-goto ;; =C-c @= org-mark-subtree ;; https://orgmode.org/manual/Handling-Links.html ;; (define-key org-mode-map (kbd \u0026#34;C-M-n\u0026#34;) \u0026#39;org-next-link) ;; (define-key org-mode-map (kbd \u0026#34;C-M-p\u0026#34;) \u0026#39;org-previous-link) (global-set-key (kbd \u0026#34;C-c l\u0026#34;) \u0026#39;org-store-link) (global-set-key (kbd \u0026#34;C-c i\u0026#34;) \u0026#39;org-insert-link) (global-set-key (kbd \u0026#34;C-c a\u0026#34;) \u0026#39;org-agenda) (global-set-key (kbd \u0026#34;C-c c\u0026#34;) \u0026#39;org-capture) (global-set-key (kbd \u0026#34;C-c \\\\\u0026#34;) \u0026#39;org-tags-sparse-tree) ;; The following setting is different from the document so that you ;; can override the document org-agenda-files by setting your ;; org-agenda-files in the variable org-user-agenda-files ;; (if (boundp \u0026#39;org-user-agenda-files) ;; (setq org-agenda-files org-user-agenda-files) ;; (setq org-agenda-files (quote (\u0026#34;~/sync/org/workflow\u0026#34;)))) ;; (if (boundp \u0026#39;org-user-agenda-diary-file) ;; (setq org-agenda-diary-file org-user-agenda-diary-file) ;; (setq org-agenda-diary-file \u0026#34;~/org/diary.org\u0026#34;)) ;; (setq org-agenda-files (list \u0026#34;~/sync/org/workflow/\u0026#34;))) ;; (setq org-agenda-files (quote (\u0026#34;~/sync/org/calendar\u0026#34; ;; \u0026#34;~/sync/org/workflow\u0026#34;)))) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.\\\\(org\\\\|org_archive\\\\|txt\\\\)$\u0026#34; . org-mode)) ;; unset old key (global-unset-key (kbd \u0026#34;\u0026lt;f4\u0026gt;\u0026#34;)) (global-unset-key (kbd \u0026#34;\u0026lt;f5\u0026gt;\u0026#34;)) (global-unset-key (kbd \u0026#34;\u0026lt;f9\u0026gt;\u0026#34;)) ;; JUNGHAN (global-set-key (kbd \u0026#34;\u0026lt;f4\u0026gt;\u0026#34;) \u0026#39;org-toggle-link-display) (global-set-key (kbd \u0026#34;\u0026lt;f5\u0026gt;\u0026#34;) \u0026#39;org-toggle-inline-images) ;; Custom Key Bindings ;; (global-set-key (kbd \u0026#34;\u0026lt;f12\u0026gt;\u0026#34;) \u0026#39;org-agenda) ;; (global-set-key (kbd \u0026#34;\u0026lt;f5\u0026gt;\u0026#34;) \u0026#39;bh/org-todo) ;; (global-set-key (kbd \u0026#34;\u0026lt;S-f5\u0026gt;\u0026#34;) \u0026#39;bh/widen) ;; (global-set-key (kbd \u0026#34;\u0026lt;f7\u0026gt;\u0026#34;) \u0026#39;bh/set-truncate-lines) ;; (global-set-key (kbd \u0026#34;\u0026lt;f8\u0026gt;\u0026#34;) \u0026#39;org-cycle-agenda-files) (global-set-key (kbd \u0026#34;\u0026lt;f9\u0026gt; \u0026lt;f9\u0026gt;\u0026#34;) \u0026#39;bh/show-org-agenda) (global-set-key (kbd \u0026#34;\u0026lt;f9\u0026gt; c\u0026#34;) \u0026#39;calendar) ;; (global-set-key (kbd \u0026#34;\u0026lt;f9\u0026gt; f\u0026#34;) \u0026#39;logos-focus-mode) ;; (global-set-key (kbd \u0026#34;\u0026lt;f9\u0026gt; f\u0026#34;) \u0026#39;boxquote-insert-file) ;; (global-set-key (kbd \u0026#34;\u0026lt;f9\u0026gt; g\u0026#34;) \u0026#39;gnus) (global-set-key (kbd \u0026#34;\u0026lt;f9\u0026gt; h\u0026#34;) \u0026#39;bh/hide-other) (global-set-key (kbd \u0026#34;\u0026lt;f9\u0026gt; n\u0026#34;) \u0026#39;bh/toggle-next-task-display) (global-set-key (kbd \u0026#34;\u0026lt;f9\u0026gt; I\u0026#34;) \u0026#39;bh/punch-in) (global-set-key (kbd \u0026#34;\u0026lt;f9\u0026gt; O\u0026#34;) \u0026#39;bh/punch-out) (global-set-key (kbd \u0026#34;\u0026lt;f9\u0026gt; o\u0026#34;) \u0026#39;bh/make-org-scratch) ;; (global-set-key (kbd \u0026#34;\u0026lt;f9\u0026gt; r\u0026#34;) \u0026#39;boxquote-region) (global-set-key (kbd \u0026#34;\u0026lt;f9\u0026gt; s\u0026#34;) \u0026#39;bh/switch-to-scratch) (global-set-key (kbd \u0026#34;\u0026lt;f9\u0026gt; t\u0026#34;) \u0026#39;bh/insert-inactive-timestamp) (global-set-key (kbd \u0026#34;\u0026lt;f9\u0026gt; T\u0026#34;) \u0026#39;bh/toggle-insert-inactive-timestamp) (global-set-key (kbd \u0026#34;\u0026lt;f9\u0026gt; v\u0026#34;) \u0026#39;visible-mode) (global-set-key (kbd \u0026#34;\u0026lt;f9\u0026gt; i\u0026#34;) \u0026#39;org-clock-in) (global-set-key (kbd \u0026#34;\u0026lt;f9\u0026gt; SPC\u0026#34;) \u0026#39;bh/clock-in-last-task) (global-set-key (kbd \u0026#34;C-x n r\u0026#34;) \u0026#39;narrow-to-region) (global-set-key (kbd \u0026#34;C-\u0026lt;f9\u0026gt;\u0026#34;) \u0026#39;previous-buffer) (global-set-key (kbd \u0026#34;C-\u0026lt;f10\u0026gt;\u0026#34;) \u0026#39;next-buffer) (global-set-key (kbd \u0026#34;\u0026lt;f11\u0026gt;\u0026#34;) \u0026#39;org-clock-goto) ;; (global-set-key (kbd \u0026#34;C-s-\u0026lt;f12\u0026gt;\u0026#34;) \u0026#39;bh/save-then-publish) (defun bh/hide-other () (interactive) (save-excursion (org-back-to-heading \u0026#39;invisible-ok) (hide-other) (org-cycle) (org-cycle) (org-cycle))) (defun bh/set-truncate-lines () \u0026#34;Toggle value of truncate-lines and refresh window display.\u0026#34; (interactive) (setq truncate-lines (not truncate-lines)) ;; now refresh window display (an idiom from simple.el): (save-excursion (set-window-start (selected-window) (window-start (selected-window))))) (defun bh/make-org-scratch () (interactive) (find-file \u0026#34;/tmp/publish/scratch.org\u0026#34;) (gnus-make-directory \u0026#34;/tmp/publish\u0026#34;)) (defun bh/switch-to-scratch () (interactive) (switch-to-buffer \u0026#34;*scratch*\u0026#34;)) Junghanacs Keybinding # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 ;; (setq ob-async-no-async-languages-alist \u0026#39;(\u0026#34;gnuplot\u0026#34;)) ; \u0026#34;mermaid\u0026#34; ;; 자주 쓰는 키 바인딩 (evil-define-key \u0026#39;(normal insert visual) org-mode-map (kbd \u0026#34;C-c H\u0026#34;) \u0026#39;org-insert-heading) (evil-define-key \u0026#39;(normal insert visual) org-mode-map (kbd \u0026#34;C-c S\u0026#34;) \u0026#39;org-insert-subheading) ;; insert 모드에서 방향키로 쓰도록 세팅한다. evil-xxx-line 대신 ;; 이맥스 기본 이동으로 세팅 했다. ;; (evil-define-key \u0026#39;(insert) org-mode-map (kbd \u0026#34;C-h\u0026#34;) \u0026#39;left-char) ;; (evil-define-key \u0026#39;(insert) org-mode-map (kbd \u0026#34;C-l\u0026#34;) \u0026#39;right-char) ;; (evil-define-key \u0026#39;(insert) org-mode-map (kbd \u0026#34;C-j\u0026#34;) \u0026#39;next-line) ;; (evil-define-key \u0026#39;(insert) org-mode-map (kbd \u0026#34;C-k\u0026#34;) \u0026#39;previous-line) ;; 이상하게 기존 키 바인딩이 안지워진다. 이건 나중에 다시 하자. ;; (define-key org-mode-map (kbd \u0026#34;M-h\u0026#34;) nil) ;; (define-key org-mode-map (kbd \u0026#34;M-l\u0026gt;\u0026#34;) nil) ;; (keymap-unset-key [M-h] \u0026#34;evil-mode\u0026#34;) ;; (keymap-unset-key [M-l] \u0026#34;evil-mode\u0026#34;) ;; (evil-define-key \u0026#39;(insert) org-mode-map (kbd \u0026#34;M-h\u0026#34;) \u0026#39;delete-backward-char) ;; (evil-define-key \u0026#39;(insert) org-mode-map (kbd \u0026#34;M-l\u0026#34;) \u0026#39;delete-forward-char) ;; 복사한 링크는 아래의 방법으로 넣는다. 깔끔해서 좋다. ;; org-cliplink 는 insert 니까 i를 바인딩한다. org-insert-link를 따른다. (evil-define-key \u0026#39;(normal insert visual) org-mode-map (kbd \u0026#34;C-c M-i\u0026#34;) \u0026#39;org-cliplink) ;; (define-key map (kbd \u0026#34;C-c M-i\u0026#34;) \u0026#39;org-cliplink) ;; M-RET 마이너모드 커맨드 , 와 같음 ;; ordered/unordered list 를 입력 할 때 편함. ;; 체크박스가 있는 경우 M-S-RET org-insert-todo-heading 을 활용. (evil-define-key \u0026#39;(normal insert visual) org-mode-map (kbd \u0026#34;C-M-\u0026lt;return\u0026gt;\u0026#34;) \u0026#39;org-insert-item) ;; 문단을 한 라인으로 합쳐 준다. 구글 번역기 돌릴 때 매우 유용. ;; (evil-define-key \u0026#39;(normal insert visual) org-mode-map (kbd \u0026#34;C-M-q\u0026#34;) \u0026#39;unfill-paragraph) ;; org-timer 도 어젠다에 넣어주고 싶은데?! ;; clock-in 은 되는데 헤딩이 어젠다에 없는거면 소용 없다. ;; 내 생각엔 신경쓰지말고 완료 상태 만드는거에 집중하자. ;; (defun my/org-timer-set-hook () ;; ;; 일단 90분으로 고정 ;; (shell-command-to-string \u0026#34;~/.local/bin/set-timer.sh 90min\u0026#34;) ;; ;; (org-clock-in) ;; ) ;; (defun my/org-timer-stop-hook () ;; (shell-command-to-string \u0026#34;~/.local/bin/reset-timer.sh\u0026#34;) ;; ;; (org-clock-out) ;; ) ;; (defun my/org-timer-done-hook () ;; (shell-command-to-string \u0026#34;~/.local/bin/reset-timer.sh\u0026#34;) ;; ;; (org-clock-out) ;; ) ;; (add-hook \u0026#39;org-timer-set-hook \u0026#39;my/org-timer-set-hook) ;; (add-hook \u0026#39;org-timer-done-hook \u0026#39;my/org-timer-done-hook) ;; (add-hook \u0026#39;org-timer-stop-hook \u0026#39;my/org-timer-stop-hook) ;; my org pomodoro 실행 함수를 만들고, 거기서 셋팅하면 된다. ;; 이맥스 클라이언트로 동작시킬 필요가 없다. ;; (defun my/org-pomodoro() ;; \u0026#34;my/org-pomodoro start w/ clock-in or stop\u0026#34; ;; (interactive) ;; (shell-command-to-string \u0026#34;~/.local/bin/set-timer.sh 25min\u0026#34;) ;; (org-pomodoro) ;; ) ;; (defun my/org-pomodoro-killed () ;; \u0026#34;my org-pomodoro-killed with i3-bar.\u0026#34; ;; (interactive) ;; (shell-command-to-string \u0026#34;~/.local/bin/reset-timer.sh\u0026#34;) ;; (org-pomodoro-killed) ;; ) ;; (defun my/org-pomodoro-finished () ;; \u0026#34;my org-pomodoro-finished with i3-bar.\u0026#34; ;; (interactive) ;; (shell-command-to-string \u0026#34;~/.local/bin/reset-timer.sh\u0026#34;) ;; (org-pomodoro-finished) ;; ) ;; (let ((map global-map)) ;; (define-key map (kbd \u0026#34;C-c j p p\u0026#34;) \u0026#39;my/org-pomodoro) ;; (define-key map (kbd \u0026#34;C-c j p k\u0026#34;) \u0026#39;my/org-pomodoro-killed) ;; (define-key map (kbd \u0026#34;C-c j p f\u0026#34;) \u0026#39;my/org-pomodoro-finished) ;; ) ;; /ahyatt-dotfiles/.emacs.d/emacs.org:214 ;; TEMPORARY, seems like this isn\u0026#39;t getting autoloaded correctly. (require \u0026#39;org-duration) (require \u0026#39;org-element) (setq org-pomodoro-length 25) (setq org-pomodoro-short-break-length 5) (setq org-pomodoro-long-break-length 20) ;; A pomodoro group is for a day, so after 8 hours of no activity, that\u0026#39;s a group. (setq org-pomodoro-expiry-time (* 60 8)) (defun ash/org-pomodoro-til-meeting () \u0026#34;Run a pomodoro until the next 30 minute boundary.\u0026#34; (interactive) (let ((org-pomodoro-length (mod (- 30 (cadr (decode-time (current-time)))) 30))) (org-pomodoro))) ;; I org-clock-in, P org-pomodoro (add-hook \u0026#39;org-agenda-mode-hook #\u0026#39;(lambda () (org-defkey org-agenda-mode-map (kbd \u0026#34;C-c I\u0026#34;) \u0026#39;org-pomodoro)) \u0026#39;append) (setq org-pomodoro-manual-break t) ; manualy break my focus time (setq org-pomodoro-format \u0026#34;⌛ %s\u0026#34;) (setq org-pomodoro-short-break-format \u0026#34;😽 %s\u0026#34; org-pomodoro-long-break-format \u0026#34;🎼 %s\u0026#34;) (setq org-pomodoro-start-sound \u0026#34;~/.spacemacs.d/sounds/focus_bell.wav\u0026#34;) (setq org-pomodoro-short-break-sound \u0026#34;~/.spacemacs.d/sounds/three_beeps.wav\u0026#34;) (setq org-pomodoro-long-break-sound \u0026#34;~/.spacemacs.d/sounds/three_beeps.wav\u0026#34;) (setq org-pomodoro-finished-sound \u0026#34;~/.spacemacs.d/sounds/meditation_bell.wav\u0026#34;) (setq org-pomodoro-audio-player \u0026#34;/usr/bin/aplay\u0026#34;) ;; emacs built-in org-timer (setq org-clock-sound \u0026#34;~/.spacemacs.d/sounds/meditation_bell.wav\u0026#34;) (defun my/play-meditation-bell() \u0026#34;Play meditation-bell\u0026#34; (interactive) (call-process-shell-command \u0026#34;~/.local/bin/play-meditation-bell.sh\u0026#34; nil 0) ; async ) (defun my/play-meditation-bell-short() \u0026#34;Play meditation-bell-short (focus)\u0026#34; (interactive) (call-process-shell-command \u0026#34;~/.local/bin/play-meditation-bell-short.sh\u0026#34; nil 0) ) (global-set-key (kbd \u0026#34;C-c j m\u0026#34;) \u0026#39;my/play-meditation-bell) (add-hook \u0026#39;org-clock-in-hook \u0026#39;my/play-meditation-bell \u0026#39;append) ;; (add-hook \u0026#39;org-clock-out-hook \u0026#39;my/play-meditation-bell \u0026#39;append) ;; (add-hook \u0026#39;org-clock-goto-hook \u0026#39;my/play-meditation-bell \u0026#39;append) ;; (add-hook \u0026#39;org-clock-cancel-hook \u0026#39;my/play-meditation-bell \u0026#39;append) ;; (add-hook \u0026#39;org-capture-mode-hook \u0026#39;my/play-meditation-bell \u0026#39;append) Tasks and States # 재미있는 부분이다. 본 문서에 보면 상태 다이어그램을 보여준다. 따라가자. 아래와 같은 더미 엔트리를 사용해서 개별 파일의 상태를 관리한다. 이는 글로벌 투두 메커니즘에 영향을 주지 않기에 효과적이다.\n키워드는 기존에 내가 사용하던 로그시크 호환과는 약간 다르다. 그리고 NEXT 를 굉장히 효과적으로 관리한다. 전체 그림과 함께 사용해 보아야 한다.\n태스트의 상태도를 그림으로 보여주는데 이미지 여기에 추가하자. 그리고 상태가 트리거 되면 태그가 붙는다.\n1 2 3 4 5 6 7 8 The triggers break down to the following rules: Moving a task to CANCELLED adds a CANCELLED tag Moving a task to WAITING adds a WAITING tag Moving a task to HOLD adds WAITING and HOLD tags Moving a task to a done state removes WAITING and HOLD tags Moving a task to TODO removes WAITING, CANCELLED, and HOLD tags Moving a task to NEXT removes WAITING, CANCELLED, and HOLD tags Moving a task to DONE removes WAITING, CANCELLED, and HOLD tags 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 ;; keys mentioned in brackets are hot-keys for the States ;; ! indicates insert timestamp ;; @ indicates insert note ;; / indicates entering the state (setq org-todo-keywords (quote ((sequence \u0026#34;TODO(t)\u0026#34; \u0026#34;NEXT(n)\u0026#34; \u0026#34;|\u0026#34; \u0026#34;DONE(d)\u0026#34;) (sequence \u0026#34;WAITING(w@/!)\u0026#34; \u0026#34;HOLD(h@/!)\u0026#34; \u0026#34;|\u0026#34; \u0026#34;OFF(o)\u0026#34; \u0026#34;CANCELLED(c@/!)\u0026#34; \u0026#34;PHONE(p)\u0026#34; \u0026#34;MEETING(m)\u0026#34;) (sequence ; from doom-emacs \u0026#34;[ ](T)\u0026#34; ; A task that needs doing \u0026#34;[-](N)\u0026#34; ; Task is in progress \u0026#34;[?](W)\u0026#34; ; Task is being held up or paused \u0026#34;|\u0026#34; \u0026#34;[X](D)\u0026#34;) ; Task was completed ))) (defface my/org-bold-todo \u0026#39;((t :inherit (bold org-todo))) \u0026#34;Face for bold TODO-type Org keywords.\u0026#34;) (defface my/org-bold-done \u0026#39;((t :inherit (bold org-done))) \u0026#34;Face for bold DONE-type Org keywords.\u0026#34;) (defface my/org-bold-shadow \u0026#39;((t :inherit (bold shadow))) \u0026#34;Face for bold and `shadow\u0026#39; Org keywords.\u0026#34;) (defface my/org-todo-special \u0026#39;((t :inherit (font-lock-keyword-face bold org-todo))) \u0026#34;Face for special TODO-type Org keywords.\u0026#34;) (setq org-todo-keyword-faces \u0026#39;( (\u0026#34;TODO\u0026#34; . my/org-bold-todo) ;; (\u0026#34;FIXME\u0026#34; . my/org-bold-todo) (\u0026#34;[ ]\u0026#34; . my/org-bold-todo) (\u0026#34;DONE\u0026#34; . my/org-bold-done) ;; (\u0026#34;FIXED\u0026#34; . my/org-bold-done) (\u0026#34;[X]\u0026#34; . my/org-bold-done) (\u0026#34;CANCELLED\u0026#34; . my/org-bold-done) (\u0026#34;NEXT\u0026#34; . my/org-todo-special) (\u0026#34;READ\u0026#34; . my/org-todo-special) (\u0026#34;[-]\u0026#34; . my/org-todo-special) (\u0026#34;MEETING\u0026#34; . my/org-todo-special) (\u0026#34;PHONE\u0026#34; . my/org-todo-special) (\u0026#34;WAITING\u0026#34; . my/org-bold-shadow) (\u0026#34;HOLD\u0026#34; . my/org-bold-shadow) (\u0026#34;[?]\u0026#34; . my/org-bold-shadow) (\u0026#34;OFF\u0026#34; . my/org-bold-shadow) ) ) ;; from doom-emacs (setq org-eldoc-breadcrumb-separator \u0026#34; → \u0026#34;) (setq org-priority-faces \u0026#39;((?A . error) (?B . warning) (?C . success))) ;; (setq org-use-fast-todo-selection t) ; default auto ;; (setq org-use-fast-tag-selection t) ; default auto ;; Shift 거슬리는 것을 막아주는 아주 요긴한 설정이다. (setq org-treat-S-cursor-todo-selection-as-state-change nil) ;; FIXME org tage state manager (setq org-todo-state-tags-triggers (quote ((\u0026#34;CANCELLED\u0026#34; (\u0026#34;CANCELLED\u0026#34; . t)) (\u0026#34;WAITING\u0026#34; (\u0026#34;WAITING\u0026#34; . t)) (\u0026#34;OFF\u0026#34; (\u0026#34;OFF\u0026#34; . t)) ; added (\u0026#34;HOLD\u0026#34; (\u0026#34;WAITING\u0026#34;) (\u0026#34;HOLD\u0026#34; . t)) (done (\u0026#34;WAITING\u0026#34;) (\u0026#34;HOLD\u0026#34;)) (\u0026#34;TODO\u0026#34; (\u0026#34;WAITING\u0026#34;) (\u0026#34;CANCELLED\u0026#34;) (\u0026#34;HOLD\u0026#34;) (\u0026#34;OFF\u0026#34;)) (\u0026#34;NEXT\u0026#34; (\u0026#34;WAITING\u0026#34;) (\u0026#34;CANCELLED\u0026#34;) (\u0026#34;HOLD\u0026#34;) (\u0026#34;OFF\u0026#34;)) (\u0026#34;DONE\u0026#34; (\u0026#34;WAITING\u0026#34;) (\u0026#34;CANCELLED\u0026#34;) (\u0026#34;HOLD\u0026#34;) (\u0026#34;OFF\u0026#34;)) ))) Adding New Tasks Quickly with org-capture-templates # 내가 쓰던 캡처는 일단 잊어라. 일단 리파일에 집중하고 처리 프로세스를 강화하자. 동작은 다 확인했다. 잘 된다.\nThe %a verb expands to a link to where one was when they called org-capture. This might, for example, be another file or an email.\n%a 동작을 명시하면 =org-capture=를 호출했을 때 있었던 위치에 대한 링크로 확장됩니다. 예를 들어 다른 파일이나 이메일일 수 있습니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol (setq org-capture-templates (quote ( ;; (\u0026#34;t\u0026#34; \u0026#34;todo\u0026#34; entry (file \u0026#34;~/sync/org/workflow/inbox.org\u0026#34;) ;; \u0026#34;* TODO %?\\n%U\\n%a\\n\u0026#34; :clock-in t :clock-resume t) ;; (\u0026#34;s\u0026#34; \u0026#34;slipbox\u0026#34; entry (file \u0026#34;~/sync/org/workflow/inbox.org\u0026#34;) ;; \u0026#34;* %? :NOTE:\\n%U\\n%a\\n\u0026#34; :clock-in t :clock-resume t) ;; (\u0026#34;s\u0026#34; \u0026#34;Memo on Slipbox\u0026#34; entry (file+olp \u0026#34;~/sync/org/workflow/inbox.org\u0026#34; \u0026#34;Slipbox\u0026#34;) ;; \u0026#34;* %u %? \u0026#34; :prepend t) ; 타임스템프 ;; (\u0026#34;l\u0026#34; \u0026#34;Link on Slipbox\u0026#34; entry (file+headline \u0026#34;~/sync/org/workflow/inbox.org\u0026#34; \u0026#34;Slipbox\u0026#34;) ;; \u0026#34;* %a %^g\\n %?\\n %T\\n %i\u0026#34;) ;; (\u0026#34;f\u0026#34; \u0026#34;Fleeting note\u0026#34; entry (file \u0026#34;~/sync/org/workflow/inbox.org\u0026#34;) ;; \u0026#34;* TODO %^{Note title}\\nContext: %U\\n%a\\n%?\u0026#34; :empty-lines-before 1 ) (\u0026#34;f\u0026#34; \u0026#34;Fleeting note (/w Clock)\u0026#34; entry (file+headline \u0026#34;~/sync/org/workflow/inbox.org\u0026#34; \u0026#34;Slipbox\u0026#34;) \u0026#34;* TODO %^{Note title}\\nContext: %U\\n%a\\n%?\u0026#34; :clock-in t :clock-resume t) ;; \u0026#34;* %?\\n%U\\n%a\\n\u0026#34; :clock-in t :clock-resume t) ;; (\u0026#34;p\u0026#34; \u0026#34;org-protocol\u0026#34; entry (file \u0026#34;~/sync/org/workflow/inbox.org\u0026#34;) ;; \u0026#34;* TODO Review %c\\n%U\\n\u0026#34; :immediate-finish t) ;; (\u0026#34;m\u0026#34; \u0026#34;meeting\u0026#34; entry (file \u0026#34;~/sync/org/workflow/inbox.org\u0026#34;) ;; \u0026#34;* MEETING with %? :MEETING:\\n%U\u0026#34; :clock-in t :clock-resume t) ;; (\u0026#34;p\u0026#34; \u0026#34;phone call\u0026#34; entry (file \u0026#34;~/sync/org/workflow/refile.org\u0026#34;) ;; \u0026#34;* PHONE %? :PHONE:\\n%U\u0026#34; :clock-in t :clock-resume t) ;; (\u0026#34;r\u0026#34; \u0026#34;respond\u0026#34; entry (file \u0026#34;~/sync/org/workflow/refile.org\u0026#34;) ;; \u0026#34;* NEXT Respond to %:from on %:subject\\nSCHEDULED: %t\\n%U\\n%a\\n\u0026#34; :clock-in t :clock-resume t :immediate-finish t) ;; habit ;; (\u0026#34;h\u0026#34; \u0026#34;habit\u0026#34; entry (file \u0026#34;~/sync/org/workflow/refile.org\u0026#34;) ;; \u0026#34;* NEXT %?\\n%U\\n%a\\nSCHEDULED: %(format-time-string \\\u0026#34;%\u0026lt;\u0026lt;%Y-%m-%d %a .+1d/3d\u0026gt;\u0026gt;\\\u0026#34;)\\n:PROPERTIES:\\n:STYLE: habit\\n:REPEAT_TO_STATE: NEXT\\n:END:\\n\u0026#34;) ;; 22/11/21--10:43 :: add for awk org-drill ;; (\u0026#34;A\u0026#34; \u0026#34;Awk drill question\u0026#34; entry ;; (file+headline \u0026#34;~/sync/org/git/learn-awk/awk.org\u0026#34; \u0026#34;Drills\u0026#34;) ;; \u0026#34;\\n\\n** %^{Question title} :awk:drill:\\n\\n %^{Question body} \\n\\n*** Answer \\n\\n #+BEGIN_SRC awk :results output code :in-file ./text-files/%^{text file}\\n %^{awk program}\\n #+END_SRC\u0026#34;) ) ) ) ;; 이런 디테일이 중요하더라. 지저분하게 만들지 않도록 하는 팁들. ;; Remove empty LOGBOOK drawers on clock out (defun bh/remove-empty-drawer-on-clock-out () (interactive) (save-excursion (beginning-of-line 0) (org-remove-empty-drawer-at (point)))) (add-hook \u0026#39;org-clock-out-hook \u0026#39;bh/remove-empty-drawer-on-clock-out \u0026#39;append) Refiling Tasks # Refiling tasks 는 쉽습니다. 캡처 모드를 사용하여 내 refile.org 파일에서 많은 새 작업을 수집한 후, 해당하는 조직 파일 및 주제로 이동해야 합니다. 내 모든 활성 조직 파일은 내 org-agenda-files 에 설정하며 어젠다에서 볼 수 있습니다.\n최대 일주일 동안 refile.org 에서 캡처 작업을 수집합니다. 이것들은 이제 내 블록 안건에서 매일 눈에 띄고 보통 낮에 다시 정리합니다. 그리고 나는 refile 작업 목록을 비워 두는 것을 좋아합니다.\n22/11/17\u0026ndash;13:31 :: ido 가 켜지면 compleseus 레이어와 충돌이 난다. 그러느니 안쓰는게 더 현명하다. 아래에 보면 노랑님은 IDO 를 사용해서 리파일 타겟을 선택한다. 내 설정에서는 IDO 를 사용하지 않기 때문에 간단한 방법으로 수정한다. 22/12/03\u0026ndash;16:41 :: 리파일 설정이 안되 있어서 불편해서 다시 왔다. 변경하자.\nTODO 7.1 Refile Setup # 리파일 설정 관련 원문을 먼저 남긴다.\n조직에서 작업을 다시 정리하려면 작업을 다시 정리할 위치를 알려줘야 합니다. 내 설정에서 나는 =org-agenda-files=의 모든 파일을 허용하고 현재 파일은 유효한 refile 대상 목록에 기여합니다.\n나는 최근 IDO 를 사용하여 타겟 파일/헤딩을 직접 완성하고 있습니다. 이전 완료보다 더 빠른 것으로 나타났습니다. 처음에는 IDO 가 마음에 들지 않았지만 설명서를 다시 검토하고 대상 검색을 제한하는 C-SPC=에 대해 배운 후 IDO가 이전의 단계별 설정보다 훨씬 낫다는 것을 알았습니다. 이제 무언가를 다시 파일화하고 싶을 때 =C-c C-w=를 수행하여 다시 파일 프로세스를 시작한 다음 일치하는 대상을 얻기 위해 무언가를 입력한 다음 =C-SPC 일치 항목을 현재 목록으로 제한한 다음 다른 텍스트로 계속 검색합니다. 내가 필요한 대상을 찾기 위해. C-j 또한 현재 완료를 최종 대상으로 선택합니다. 나는 이것을 많이 좋아한다. 여러 하위 트리 또는 프로젝트에서 동일한 제목을 가질 수 있도록 대상에 전체 개요 경로를 표시하고 다시 정리하는 동안 구분할 수 있습니다.\n이제 DONE 상태 작업을 유효한 재파일 대상으로 제외합니다. 이렇게 하면 refile 대상 목록을 적당한 크기로 유지하는 데 도움이 됩니다.\nSystem Maintenance 아래의 norang.org 파일에 작업을 다시 정리하려면 작업에 커서를 놓고 =C-c C-w=를 누르고 =nor C-SPC sys RET=를 입력하면 완료됩니다. IDO 완성으로 대상을 쉽게 찾을 수 있습니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 (setq org-refile-targets (quote ((nil :maxlevel . 1) (org-agenda-files :maxlevel . 1)))) ;; org-refile-targets \u0026#39;((nil :maxlevel . 4) ;; (org-agenda-files :maxlevel . 3)) ;; Use full outline paths for refile targets - we file directly with IDO ;; (setq org-refile-use-outline-path (quote file)) ;; (setq org-refile-use-outline-path t) ; default nil ;; Save Org buffers after refiling! ;; 리파일 후 저장하도록 해야 싱크 문제가 안생긴다. (advice-add \u0026#39;org-refile :after \u0026#39;org-save-all-org-buffers) (setq org-outline-path-complete-in-steps nil) ; default t ;; Allow refile to create parent tasks with confirmation (setq org-refile-allow-creating-parent-nodes (quote confirm)) ;; Exclude DONE state tasks from refile targets ;; (defun bh/verify-refile-target () ;; \u0026#34;Exclude todo keywords with a done state from refile targets\u0026#34; ;; (not (member (nth 2 (org-heading-components)) org-done-keywords))) ;; (setq org-refile-target-verify-function \u0026#39;bh/verify-refile-target) (global-set-key (kbd \u0026#34;C-c r\u0026#34;) \u0026#39;org-refile-hydra/body) (defun fk/org-refile-fixed-location (file headline) \u0026#34;Refile headline without selecting from refile-targets.\u0026#34; (let ((pos (save-window-excursion (find-file file) (org-find-exact-headline-in-buffer headline)))) (org-refile nil nil (list headline file nil pos)))) (defun fk/org-refile-fixed-location-with-closed-timestamp (file headline) \u0026#34;Refile headline without selecting from refile-targets. Add \\\u0026#34;CLOSED\\\u0026#34; timestamp info.\u0026#34; (add-hook \u0026#39;org-after-refile-insert-hook (lambda () (org-add-planning-info \u0026#39;closed (org-current-effective-time))) -100) (fk/org-refile-fixed-location file headline) (remove-hook \u0026#39;org-after-refile-insert-hook (lambda () (org-add-planning-info \u0026#39;closed (org-current-effective-time))))) (defun fk/org-refile-done () (interactive) (fk/org-refile-fixed-location-with-closed-timestamp \u0026#34;archive.org\u0026#34; \u0026#34;Done\u0026#34;)) (defun fk/org-refile-trash () (interactive) (fk/org-refile-fixed-location-with-closed-timestamp \u0026#34;archive.org\u0026#34; \u0026#34;Trash\u0026#34;)) (defhydra org-refile-hydra (:color red :hint nil) \u0026#34; ^Move^ ^Todo^ ^IAM^ ^Archive^ ---------------------------------------------------------------------- _n_: Next _p_: Project _E_: Emacs _d_: Done _p_: Previous _e_: Emacs _P_: Presentation _x_: Trash ^^ _w_: Work _T_: Tech _s_: Schedule _1_: Low Priority _h_: Personal _H_: Home ^^ _2_: Medium Priority _f_: Family _W_: Watch ^^ _3_: High Priority ^^ _R_: Read ^^ ^^ ^^ _O_: Other ^^ _c_: Set Time Effort ^^ ^^ _a_: Set Tags ^^ ^^ \u0026#34; ;; Move (\u0026#34;n\u0026#34; next-line) (\u0026#34;p\u0026#34; previous-line) (\u0026#34;1\u0026#34; (lambda () (interactive) (org-priority ?C))) (\u0026#34;2\u0026#34; (lambda () (interactive) (org-priority ?B))) (\u0026#34;3\u0026#34; (lambda () (interactive) (org-priority ?A))) (\u0026#34;c\u0026#34; org-set-effort) (\u0026#34;a\u0026#34; org-set-tags-command) ;; Todo (\u0026#34;p\u0026#34; (lambda () (interactive) (fk/org-refile-fixed-location \u0026#34;project.org\u0026#34; \u0026#34;TODOS\u0026#34;))) (\u0026#34;e\u0026#34; (lambda () (interactive) (fk/org-refile-fixed-location \u0026#34;Emacs.org\u0026#34; \u0026#34;TODOS\u0026#34;))) (\u0026#34;w\u0026#34; (lambda () (interactive) (fk/org-refile-fixed-location \u0026#34;Junghanacs.org\u0026#34; \u0026#34;TODOS\u0026#34;))) (\u0026#34;h\u0026#34; (lambda () (interactive) (fk/org-refile-fixed-location \u0026#34;personal.org\u0026#34; \u0026#34;TODOS\u0026#34;))) (\u0026#34;f\u0026#34; (lambda () (interactive) (fk/org-refile-fixed-location \u0026#34;family.org\u0026#34; \u0026#34;TODOS\u0026#34;))) ;; IAM (\u0026#34;E\u0026#34; (lambda () (interactive) (fk/org-refile-fixed-location \u0026#34;IAM.org\u0026#34; \u0026#34;Emacs\u0026#34;))) (\u0026#34;P\u0026#34; (lambda () (interactive) (fk/org-refile-fixed-location \u0026#34;IAM.org\u0026#34; \u0026#34;Presentation\u0026#34;))) (\u0026#34;T\u0026#34; (lambda () (interactive) (fk/org-refile-fixed-location \u0026#34;IAM.org\u0026#34; \u0026#34;Tech\u0026#34;))) (\u0026#34;H\u0026#34; (lambda () (interactive) (fk/org-refile-fixed-location \u0026#34;IAM.org\u0026#34; \u0026#34;Home\u0026#34;))) (\u0026#34;W\u0026#34; (lambda () (interactive) (fk/org-refile-fixed-location \u0026#34;IAM.org\u0026#34; \u0026#34;Watch\u0026#34;))) (\u0026#34;R\u0026#34; (lambda () (interactive) (fk/org-refile-fixed-location \u0026#34;IAM.org\u0026#34; \u0026#34;Read\u0026#34;))) (\u0026#34;O\u0026#34; (lambda () (interactive) (fk/org-refile-fixed-location \u0026#34;IAM.org\u0026#34; \u0026#34;Other\u0026#34;))) ;; Archive (\u0026#34;d\u0026#34; fk/org-refile-done) (\u0026#34;x\u0026#34; fk/org-refile-trash) (\u0026#34;s\u0026#34; (lambda () (interactive) (fk/org-refile-fixed-location \u0026#34;archive.org\u0026#34; \u0026#34;Schedule\u0026#34;))) ;; General (\u0026#34;M\u0026#34; org-refile \u0026#34;Refile manually\u0026#34;) (\u0026#34;S\u0026#34; save-buffer \u0026#34;Save buffer\u0026#34;) (\u0026#34;q\u0026#34; nil \u0026#34;Quit\u0026#34; :color blue)) 7.2 Refiling Tasks # Tasks to refile are in their own section of the block agenda. To find tasks to refile I run my agenda view with F12 SPC and scroll down to second section of the block agenda: Tasks to Refile. This view shows all tasks (even ones marked in a done state).\n다시 제출할 작업은 블록 안건의 자체 섹션에 있습니다. 다시 정리할 작업을 찾기 위해 F12 SPC=를 사용하여 내 안건 보기를 실행하고 블록 안건의 두 번째 섹션인 =Refile할 작업=으로 스크롤합니다. 이 보기에는 모든 작업이 표시됩니다(=done 상태로 표시된 작업도 포함).\nBulk refiling in the agenda works very well for multiple tasks going to the same place. Just mark the tasks with m and then B r to refile all of them to a new location. Occasionally I\u0026rsquo;ll also refile tasks as subtasks of the current clocking task using C-2 C-c C-w from the refile.org file.\n의제에서 대량 재작성은 동일한 장소로 이동하는 여러 작업에 매우 적합합니다. 작업을 m=으로 표시한 다음 =B r=로 표시하여 모든 작업을 새 위치로 다시 정리하십시오. 때때로 저는 =refile.org 파일에서 =C-2 C-c C-w=를 사용하여 현재 클럭 작업의 하위 작업으로 작업을 다시 정리합니다.\nRefiling all of my tasks tends to take less than a minute so I normally do this a couple of times a day.\n내 모든 작업을 다시 작성하는 데 1 분도 채 걸리지 않는 경향이 있으므로 보통 하루에 두 번 이 작업을 수행합니다.\n7.3 Refiling Notes # I keep a * Notes headline in most of my org-mode files. Notes have a NOTE tag which is created by the capture template for notes. This allows finding notes across multiple files easily using the agenda search functions.\n나는 대부분의 조직 모드 파일에 * Notes 헤드라인을 유지합니다. 메모에는 메모에 대한 캡처 템플릿에 의해 생성된 NOTE 태그가 있습니다. 이를 통해 안건 검색 기능을 사용하여 여러 파일에서 메모를 쉽게 찾을 수 있습니다.\nNotes created by capture tasks go first to refile.org and are later refiled to the appropriate project file. Some notes that are project related get filed to the appropriate project instead of under the catchall * NOTES task. Generally these types of notes are specific to the project and not generally useful \u0026ndash; so removing them from the notes list when the project is archived makes sense.\n캡처 작업으로 작성된 메모는 먼저 refile.org=로 이동하고 나중에 적절한 프로젝트 파일로 다시 정리됩니다. 프로젝트와 관련된 일부 메모는 catchall =* NOTES 작업 대신 적절한 프로젝트에 보관됩니다. 일반적으로 이러한 유형의 메모는 프로젝트에 따라 다르며 일반적으로 유용하지 않습니다. 따라서 프로젝트가 보관될 때 메모 목록에서 메모를 제거하는 것이 좋습니다.\n7.4 Refiling Phone Calls and Meetings # Phone calls and meetings are handled using capture mode. I time my calls and meetings using the capture mode template settings to clock in and out the capture task while the phone call or meeting is in progress.\n전화 통화 및 회의는 캡처 모드를 사용하여 처리됩니다. 전화 통화 또는 회의가 진행되는 동안 캡처 모드 템플릿 설정을 사용하여 통화 및 회의 시간을 정하여 캡처 작업을 시작 및 종료합니다.\nPhone call and meeting tasks collect in refile.org and are later refiled to the appropriate location. Some phone calls are billable and we want these tracked in the appropriate category. I refile my phone call and meeting tasks under the appropriate project so time tracking and reports are as accurate as possible. 전화 통화 및 회의 작업은 =refile.org=에 수집되고 나중에 적절한 위치에 다시 정리됩니다. 일부 전화 통화는 청구 가능하며 적절한 카테고리에서 추적하기를 원합니다. 시간 추적 및 보고서가 최대한 정확하도록 적절한 프로젝트에서 전화 통화 및 회의 작업을 다시 정리합니다.\nCustom agenda views # 여기서 보여주는 바대로 움직이자고 워크플로우가 존재한다. 슈퍼어젠다가 있던 뭐던 간에 워크플로우가 있어야 된다.\nOverview # 블락 어젠다 뷰에 나의 영혼을 맡긴다. 여기에는 나의 하루의 모든 것을 담았다. 노랑님이 작성한 시점은 09 년도다. 문서를 보면 나의 느린 Eee PC 를 고려했다는 이야기가 나온다. 서브 노트북으로 사용하신 것 같은데 나도 써봤다. 어젠다에서 다루게 결국 실시간 텍스트 파싱인데 처참한 싱글 스레드 성능으로 답이 없을게다. 지금이라고 천지가 개벽했나? 아니다. 조금 더 유연해졌을 뿐이다.\n노랑님은 일전에 커스텀 뷰에 많은 필터 함수를 만들어서 사용했었다. 그러나 오그 모드가 개선되면서 많은 기능이 포함 되었다. 아마도 지금 시점에서는 커스텀 함수 없이도 노랑님의 워크플로우가 가능할 것 같다. 나중에 내가 할 숙제이다. \u0026ndash; 오그 모드 분석과 super-agenda 파악 해 볼 것\nREAD 관련 참고 코드 알파파파님 슈퍼 어젠다 https://github.com/alphapapa/org-super-agenda 다 커버할 수 있을 것 같은데, 손대려면 일이 크다.\n베당님 워크플로우 https://github.com/vedang/org-mode-crate 본 문서로 검색하면 자료가 꽤 나온다. 이맥서들이 한번씩 거쳐갔을 문서니까 대부분 올드해서 관심이 안간다. 베당님은 나와 똑같은 짓을 하고 있었다. 업뎃을 계속하고 있으니 보자. 뭘 튜닝을 한 것인가?\n많이 내려놨구나. 최신 오그모드를 반영해서 좋다. 특히, 뒤쪽에 퍼블리시 파트는 역시 날려버리는게 옳다. 본질에 집중했다.\n여기서 옮겨 올 부분도 있다. 다 넣을게 아니라 빼야 된다.\n;; A big thanks to Bernt Hansen for providing an awesome guide to ;; beginners so that we can harness the power of org-mode. Almost all of the ;; customization here, and my complete day-to-day workflow, ;; is based on his document about org-mode which can be ;; found here: http://doc.norang.ca/org-mode.html\n1 2 3 4 5 6 7 8 9 10 11 12 Custom agenda views are used for: - Single block agenda shows the following + overview of today + Finding tasks to be refiled + Finding stuck projects + Finding NEXT tasks to work on + Show all related tasks + Reviewing projects + Finding tasks waiting on something + Findings tasks to be archived - Finding notes - Viewing habits 노랑님의 블록 어젠다의 기능은 위와 같다.\nCode Block # 어젠다 관련하여 옮기고 튜닝하는 코드\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 ;; ex) 2022-09-19 (월) (setq org-agenda-format-date \u0026#34;%Y-%m-%d (%a)\u0026#34;) ;; Do not dim blocked tasks (setq org-agenda-dim-blocked-tasks nil) ;; Compact the block agenda view ;; t :: block saparator turns off (setq org-agenda-compact-blocks nil) (advice-add \u0026#39;org-agenda-exit :after #\u0026#39;org-save-all-org-buffers) ;; Custom agenda command definitions (setq org-agenda-custom-commands (quote ((\u0026#34;N\u0026#34; \u0026#34;Notes\u0026#34; tags \u0026#34;NOTE\u0026#34; ((org-agenda-overriding-header \u0026#34;Notes\u0026#34;) (org-tags-match-list-sublevels t))) (\u0026#34;h\u0026#34; \u0026#34;Habits\u0026#34; tags-todo \u0026#34;STYLE=\\\u0026#34;habit\\\u0026#34;\u0026#34; ((org-agenda-overriding-header \u0026#34;Habits\u0026#34;) (org-agenda-sorting-strategy \u0026#39;(todo-state-down effort-up category-keep)))) ;; Review JH (\u0026#34;r\u0026#34; \u0026#34;Agenda review\u0026#34; ((agenda \u0026#34;\u0026#34; ((org-agenda-span 7))) (stuck \u0026#34;\u0026#34;) (todo \u0026#34;NEXT\u0026#34;) (todo \u0026#34;TODO\u0026#34;) (todo \u0026#34;HOLD\u0026#34;)) ((org-agenda-archives-mode t) (org-agenda-compact-blocks nil) (org-agenda-show-all-dates nil))) (\u0026#34; \u0026#34; \u0026#34;Agenda\u0026#34; ((agenda \u0026#34;\u0026#34; nil) (tags \u0026#34;REFILE\u0026#34; ((org-agenda-overriding-header \u0026#34;Tasks to Refile\u0026#34;) (org-tags-match-list-sublevels nil))) (tags-todo \u0026#34;-CANCELLED/!\u0026#34; ((org-agenda-overriding-header \u0026#34;Stuck Projects\u0026#34;) (org-agenda-skip-function \u0026#39;bh/skip-non-stuck-projects) (org-agenda-sorting-strategy \u0026#39;(category-keep)))) (tags-todo \u0026#34;-HOLD-CANCELLED/!\u0026#34; ((org-agenda-overriding-header \u0026#34;Projects\u0026#34;) (org-agenda-skip-function \u0026#39;bh/skip-non-projects) (org-tags-match-list-sublevels \u0026#39;indented) (org-agenda-sorting-strategy \u0026#39;(category-keep)))) (tags-todo \u0026#34;-CANCELLED/!NEXT\u0026#34; ((org-agenda-overriding-header (concat \u0026#34;Project Next Tasks\u0026#34; (if bh/hide-scheduled-and-waiting-next-tasks \u0026#34;\u0026#34; \u0026#34; (including WAITING and SCHEDULED tasks)\u0026#34;))) (org-agenda-skip-function \u0026#39;bh/skip-projects-and-habits-and-single-tasks) (org-tags-match-list-sublevels t) (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-sorting-strategy \u0026#39;(todo-state-down effort-up category-keep)))) (tags-todo \u0026#34;-REFILE-CANCELLED-WAITING-HOLD/!\u0026#34; ((org-agenda-overriding-header (concat \u0026#34;Project Subtasks\u0026#34; (if bh/hide-scheduled-and-waiting-next-tasks \u0026#34;\u0026#34; \u0026#34; (including WAITING and SCHEDULED tasks)\u0026#34;))) (org-agenda-skip-function \u0026#39;bh/skip-non-project-tasks) (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-sorting-strategy \u0026#39;(category-keep)))) (tags-todo \u0026#34;-REFILE-CANCELLED-WAITING-HOLD/!\u0026#34; ((org-agenda-overriding-header (concat \u0026#34;Standalone Tasks\u0026#34; (if bh/hide-scheduled-and-waiting-next-tasks \u0026#34;\u0026#34; \u0026#34; (including WAITING and SCHEDULED tasks)\u0026#34;))) (org-agenda-skip-function \u0026#39;bh/skip-project-tasks) (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-sorting-strategy \u0026#39;(category-keep)))) (tags-todo \u0026#34;-CANCELLED+WAITING|HOLD/!\u0026#34; ((org-agenda-overriding-header (concat \u0026#34;Waiting and Postponed Tasks\u0026#34; (if bh/hide-scheduled-and-waiting-next-tasks \u0026#34;\u0026#34; \u0026#34; (including WAITING and SCHEDULED tasks)\u0026#34;))) (org-agenda-skip-function \u0026#39;bh/skip-non-tasks) (org-tags-match-list-sublevels nil) (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks))) (tags \u0026#34;-REFILE/DONE\u0026#34; ((org-agenda-overriding-header \u0026#34;Tasks to Archive\u0026#34;) (org-agenda-skip-function \u0026#39;bh/skip-non-archivable-tasks) (org-tags-match-list-sublevels nil)))) nil)))) (defun bh/org-auto-exclude-function (tag) \u0026#34;Automatic task exclusion in the agenda with / RET\u0026#34; (and (cond ((string= tag \u0026#34;hold\u0026#34;) t) ((string= tag \u0026#34;farm\u0026#34;) t)) (concat \u0026#34;-\u0026#34; tag))) (setq org-agenda-auto-exclude-function \u0026#39;bh/org-auto-exclude-function) Setup :: Views # 노랑님의 블록 어젠다는 기본 뷰와 프로젝트 뷰가 있다. 기본 커스텀 뷰로 들어가면, 위에 언급한 모든 내용을 쭉 보여준다. 프로젝트 뷰는 P 를 입력하면 보인다. (몰랐다\u0026hellip;) 프로젝트 관련 태스크를 집중하여 보여준다.\n노랑님은 어젠다에서 탑다운으로 일을 하는 편이라고 한다. 그냥 보여주는게 아니라 데드라인, 스케줄 등으로 정렬 된 것이다. 물론 커스텀 가능하다. 필터링을 하거나.\n그래서 노랑님의 My day goes generally like this: 가 나온 것이다. 맨 위에 아마 넣었을 텐데 너무 위대하니 또 넣자. 보고 또 보고 해보면서 익히고 나에게 맞춰야 한다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 My day goes generally like this: - Punch in (this starts the clock on the default task) - Look at the agenda and make a mental note of anything important to deal with today - Read email and news - create notes, and tasks for things that need responses with org-capture - Check refile tasks and respond to emails - Look at my agenda and work on important tasks for today - Clock it in - Work on it until it is =DONE= or it gets interrupted - Work on tasks - Make journal entries (=C-c c j=) for interruptions - Punch out for lunch and punch back in after lunch - work on more tasks - Refile tasks to empty the list - Tag tasks to be refiled with =m= collecting all tasks for the same target - Bulk refile the tasks to the target location with =B r= - Repeat (or refile individually with =C-c C-w=) until all refile tasks are gone - Mark habits done today as DONE - Punch out at the end of the work day What do I work on next? # 데일리 어젠다 뷰에서 오늘이나 이전에 예정된 태스크로 시작하라. 그 다음엔 Next Tasks 목록을 뒤져서 다음 할 일을 찾는다. 나는 작업 중인 프로젝트들을 시작할 때 \u0026lsquo;오늘\u0026rsquo;로 스케줄을 설정하는 편이다. 이렇게 설정하면 어젠다를 열 때 마다 계속 상기시켜 주니까.\n그리고, 나는 대개 오늘 어젠다에 1-2 개 프로젝트만 스케줄을 설정하고, 중요하지 않게 되었거나 오늘 관심이 가질 필요 없는 일정은 스케줄에서 제거한다.\n작업할 새 작업을 찾을 때 일반적으로 =F12 SPC=를 눌러 블록 안건을 얻고 다음 순서를 따릅니다.\nPick something off today\u0026rsquo;s agenda deadline for today (do this first - it\u0026rsquo;s not late yet) deadline in the past (it\u0026rsquo;s already late) a scheduled task for today (it\u0026rsquo;s supposed to be done today) a scheduled task that is still on the agenda deadline that is coming up soon pick a NEXT task If you run out of items to work on look for a NEXT task in the current context pick a task from the Tasks list of the current project. Why keep it all on the NEXT list? # 나는 더 GTD 한 스타일로 방법을 바꿨다. 이제 NEXT 목록을 적극 사용합니다. 중단된 프로젝트는 NEXT 작업을 표시하거나, 생성해야 하기 때문에 NEXT 키워드가 있는 프로젝트만 태스크를 어젠다에 표기 한다.\nNEXT 태스크는 1) 지금 작업이 가능한 상태인 녀석들이며, 2) 일부 프로젝트에서는 논리적 다음 순서 또는 단계를 의미하기도 한다.\n나는 많은 일을 하고 시간을 측정하고 싶지만 실제로 시작/끝나지 않는 일에 대해 특별한 키워드 ONGOING=을 사용했습니다. 나는 시간을 기록하고 싶은 것을 쉽게 찾기 위해 끌어올 수 있는 =ONGOING 작업에 대한 특별한 의제 보기를 가지고 있었습니다.\n그 이후로 나는 ONGOING todo 키워드를 사용하지 않게 되었습니다. NEXT 작업을 표시하는 안건 보기를 사용하면 시간을 정할 항목을 쉽게 선택할 수 있습니다. 그리고 작업을 찾을 때 ONGOING 목록을 봐야 하는지 아니면 NEXT 목록을 봐야 하는지 기억할 필요가 없습니다. 출근합니다. NEXT 목록은 기본적으로 \u0026lsquo;현재 상태\u0026rsquo;(프로젝트를 진행시키는 모든 작업)입니다. 가능한 한 빨리 작업할 항목을 찾고 실제로 작업을 수행하고 싶습니다. 시간을 기록해야 하는 작업을 찾기 위해 조직 파일을 뒤지는 데 시간을 낭비하지 않습니다.\nNEXT 목록에서 작업을 삭제하려면 작업을 TODO 상태로 되돌리기만 하면 됩니다.\nReading email, newsgroups, and cohnversation on IRC # When reading email, newsgroups, and conversations on IRC I just let the default task (normally ** Organization) clock the time I spend on these tasks. To read email I go to Gnus and read everything in my inboxes. If there are emails that require a response I use org-capture to create a new task with a heading of \u0026lsquo;Respond to \u0026lt;user\u0026gt;\u0026rsquo; for each one. This automatically links to the email in the task and makes it easy to find later. Some emails are quick to respond to and some take research and a significant amount of time to complete. I clock each one in it\u0026rsquo;s own task just in case I need that clocked time later. The capture template for Repond To tasks is now scheduled for today so I can refile the task to the appropriate org file without losing the task for a week.\nNext, I go to my newly created tasks to be refiled from the block agenda with F12 a and clock in an email task and deal with it. Repeat this until all of the \u0026lsquo;Respond to \u0026lt;user\u0026gt;\u0026rsquo; tasks are marked DONE.\nI read email and newgroups in Gnus so I don\u0026rsquo;t separate clocked time for quickly looking at things. If an article has a useful piece of information I want to remember I create a note for it with C-c c n and enter the topic and file it. This takes practically no time at all and I know the note is safely filed for later retrieval. The time I spend in the capture buffer is clocked with that capture note.\nFiltering # [2022-11-17 Thu 05:38] 너무 많은 작업, 너무 적은 시간. 주어진 시간에 수백 개의 작업이 있습니다(현재 373 개). 보고 싶은 것들이 너무 많아서 부담스러울 수 있습니다. 이것은 의제 필터링이 하루를 절약하는 곳입니다.\n오전 11 시 53 분이고 점심 시간 직전에 작업 모드에 있습니다. 지금은 업무와 관련 없는 작업을 보고 싶지 않습니다. 나도 점심시간 직전에 큰 프로젝트를 하고 싶지 않아\u0026hellip; 그래서 목록에서 떼어낼 수 있는 작은 작업을 찾아야 한다.\n어떻게 해야 할까요? 블록 아젠다에서 NEXT 작업 목록을 가져온 다음 필터링을 통해 범위를 좁힙니다. 작업은 예상 노력에 따라 NEXT 안건 보기에서 정렬되므로 짧은 작업이 먼저 표시됩니다. 맨 위에서 시작하여 아래로 작업하면 됩니다. 표시되는 안건 작업을 =/ + 1=을 사용하여 10 분 이하의 예상 작업으로 제한할 수 있으며 점심 식사를 위해 출발하기 전에 남은 시간에 맞는 작업을 선택할 수 있습니다.\nAutomatically removing context based task with / RET # [2022-11-17 Thu 14:07] =/ RET=를 사용하여 컨텍스트 기반 작업을 자동으로 제거\n=/ RET=는 정말 유용합니다. 이 멋진 기능은 John Wiegley 에 의해 조직 모드에 추가되었습니다. 사용자가 제공한 기능을 기반으로 필터링하여 작업을 자동으로 제거합니다.\n직장에서는 관리자가 할당한 프로젝트가 있습니다. 때때로 우선 순위가 변경되고 프로젝트가 미래의 어느 시점으로 지연됩니다. 즉, 이 작업을 즉시 중단해야 합니다. 프로젝트 작업을 HOLD=로 설정하고 다른 작업을 합니다. =/ RET 필터는 HOLD 작업 및 하위 작업을 제거합니다(태그 상속으로 인해).\n집에는 farm 태그가 붙은 몇 가지 작업이 있습니다. 물리적으로 가족 농장에 있을 때 이러한 작업을 수행해야 하기 때문입니다. 자주 방문하지 않기 때문에 시스템의 자동 제외 태그 목록에 farm=을 추가했습니다. 물리적으로 그곳에 있을 때 =/ TAB farm RET=을 사용하여 =farm 작업으로 항상 명시적으로 필터링할 수 있습니다.\n=/ RET=이 위의 설명을 기반으로 작업을 필터링할 수 있도록 다음과 같은 설정이 있습니다. bh/org-auto-exclude-function 이 이 역할을 합니다.\nTime Clocking # 어메이징한 것이 뭐냐? 시간 기록 관리 아니겠는가? 여기 코드만 딸랑 넣어 놨는데 원래 문서에는 장대한 설명이 있다. 그걸 알아야/해봐야 의미가 있다. 아니면 다 필요 없는 코드다.\n시퀀스가 있다. 그걸 생각하고 써야 하는데, 그래서 키 바인딩도 그대로 가는 것이다. 왜? 문서에서 키바인딩만 나와 있는데 헷갈리니까 그냥 따라하는거다.\n원문 요약 :: punch-in, punch-out # 인정합니다. 오그 모드의 =타임 클락킹=은 가히 환상적입니다. 나는 일에 모든 것들을 클락킹 합니다. 오그 모드는 이 과정을 정말 쉽게 만들어 줍니다. 나는 부족한 것 보다 과하게라도 시간 기록을 하는 걸 선호합니다. 그러기에 쉽게 할 수 있어야 합니다.\n기록하는 것은 지난 날을 회상하는 것도 가능하겠지만, 내가 어디에 시간을 많이 쓰고 있는지라든가 중요한 프로젝트에 얼마나 리소스를 투입하고 있는지 알게 해준다. 이는 무언가를 하는데 있어서 얼마나 시간이 필요한지 예측하는데 도움이 된다. 기록 할수록 나의 시간 감각, 측정 능력이 개선 된다.\n여기서 나는 펀치 인/아웃이라는 개념을 활용한다. 일을 시작 할 때 인, 점심 먹을 때 아웃, 돌아와서 인, 집에 갈때 아웃. 펀치 인을 하는 동안 모든 시간이 기록 된다.\n펀치 인을 하면 =기본 태스크=로 시간이 할당 된다. 특정 태스크에 클락 인을 하고 끝내면 다시 기본 태스크로 시간이 할당 된다. 이렇게 해야 시간을 잃지 않을 수 있다.\nMy clocking setup basically works like this:\nPunch in (start the clock) This clocks in a predefined task by org-id that is the default task to clock in whenever the clock normally stops\nClock in tasks normally, and let moving to a DONE state clock out clocking out automatically clocks time on a parent task or moves back to the predefined default task if no parent exists.\nContinue clocking whatever tasks you work on Punch out (stop the clock) 워크 시퀀스 예제 # 1 2 3 4 5 6 * TODO Project A ** NEXT TASK 1 ** TODO TASK 2 ** TODO TASK 3 * Tasks ** TODO Some miscellaneous task 위를 보면 프로젝트 A 에 1, 2, 3 태스크가 있다. 1 에 다음이 있는 것으로 1 을 해야 한다. 그리고 태스트들의 하위로 소소한 태스크가 하나 할 일로 남겨져 있다. 이에 대해서 다음 시퀀스로 진행을 한다. 이게 오늘 할 일인가? 아무튼\u0026hellip; \u0026gt;\u0026gt; 일을 쪼개는 것도 참 중요하다!\nF9-I : punch-in\nF12-SPC : org-agenda 의 custom-view 보기 여기서 \u0026lsquo;TODO Some miscellaneous task\u0026rsquo;를 다음에 처리하려고 한다. I=를 입력하여 =clock-in 하자. SPC ? 로 키맵을 보면 그렇게 매핑되어 있다. 따로 해줄 필요 없다. 아니면 Alt+SPC 눌러서 트랜지언트 맵을 보고 호출해도 된다. 이건 스맥스에서 만들어 놓은 것이다. 아무튼, 클락인이 되면 모드라인에 표기가 된다. 그리고 해당 태스크는 TODO -\u0026gt; NEXT 로 상태가 변경 된다. NEXT 가 마치 DOING 같네.\nF11=로 현재 태스크로 이동 후, =C-c C-t d 완료 상태로 변경 모드라인에 시간은 흐르고 파일은 이래 저래 작업하고 있을 것이다. 그렇다면, 현재 클락인된 태스크로 이동하는 가장 빠른 방법은 F11 이다. 키바인딩에 매핑해 놓았다. 그러면 해당 위치로 이동한다. 완료로 바꿔야지?\n완료로 바꾸는 방법은 위에 씌여 있는 이맥스다운 방법과 =t=를 입력하여 바꾸는 방법이 있다. 그리고 쉬프트와 방향키로 바꾸는 방법이 있다. 관련 설정을 꺼놨는데도 이게 여전히 먹힌다. 신중하게 상태 변경을 하는게 좋다. 태그 밎 타임 로깅이 바뀌기 때문에 지저분해진다. 꼬이는 거다. 나는 가장 불편한 방법으로 쓰련다.\n완료하고 나면, 다시 기본 클럭으로 돌아간다. 훌륭하다. 아 근대 어젠다 구성이 별로네. 시간 단위 정보를 보여주는게 거의 없다. \u0026ndash;\u0026gt; 캡처로 할 일 만들었다. 캡처하고 나니까 다시 기본 클락 으로 복귀. 훌륭하구만.\n이제 프로젝트 A 의 1 번 태스크를 클락인 하자. I 누르면 클락인이다. 너무 쉽게 되니까 조심스럽네. 그렇다면 다 했다고 치고 완료해보라. F11, C-c C-t d 이다. 키바인딩 구리다. 내 키보드는 F 키도 없는데. 그래도 안 바꾼다. 밀고 가자. 완료하고 나면, 클락은 프로젝트 A 로 이동한다. 보자. 뭘 해야 하나?\n아 잠시만, 태스트 1 은 처음 상태가 NEXT 였다. 클락인해도 그대로다. 태스크 2 를 클락인 했다. 상태는 NEXT 로 변경되고 모드라인데 작업 시간이 표기 된다. 완료 하자.\n잠시만, 현재 클락은 어디에 있는가? 프로젝트 A 다. 지금 상황에서 태스트 3 을 끝내면 클락은 다시 기본으로 돌아간다. 근데 이게 프로젝트인데, 한 자리에서 다 끝낼 수가 있나?\n다른 태스크를 보자. 어젠다에서 뒤져보자. 리파일에 있는 그냥 테스트 TODO 를 클락인 했다. \u0026ldquo;테스트로 생성합니다.\u0026ldquo;라는 태스크다. 이건 아마 완료하면 기본 클락으로 돌아갈 것이다. 프로젝트가 아니기 때문이다.\n프로젝트는 따로 구분하는 메커니즘은 두지 않는다고 했다. 문서에 보면 서브 테스크가 있는 것은 프로젝트라고 한다. Stuck Project 가 아래 GTD 에서 다룬다. 그리고 커스텀 어젠다에서도 표기를 강하게(?) 해준다.\n이게 뭐냐? 스턱 프로젝트는 서브 태스크 중에 NEXT 가 없는 케이스에 해당 한다. 처음에는 뭔가 싶었는데\u0026hellip; NEXT 가 없다는 것은 현재 작업 중이거나 다음에 할 태스크라고 명시해 놓은게 없다는 말이다. 납득이 완전 된다. 클락인하면 NEXT 로 바뀌니까 NEXT 는 작업 중인 태스크도 된다. 그러다가 퇴근하면 NEXT 상태로 클락아웃 된 것이다. 이게 아니여도 다음에 작업하기 위해서 NEXT 로 지정해 놓을 수도 있을 것이다. (NEXT 로 바꾸는 것 자체는 아무런 사이드 효과가 없다.)\n뭐든 간에 TODO 만 있다는 것은 목표만 나열한 것과도 같다. 내가 잘하는 짓이다. TODO 가 산더미이고 완료되는게 없는 상태. 스턱된거다.\n장난 아니다. 내용도 엄청 많은데. 실습해가면서 해봐야 한다. 이거 빡시다.\nClocking in # Setting a default clock task # 내 todo.org 파일에는 기본 ** Organization 작업이 있는데, 이 작업은 기타 시계 시간을 설정하는 경향이 있습니다. 이것이 =F9-I=로 근무일을 시작할 때 시작하는 작업입니다. 조직 파일을 재구성하고, 이메일을 읽고, 받은 편지함을 비우고, 특정 프로젝트와 관련되지 않은 다른 계획 작업을 수행하는 동안 이 작업에 시간을 할애할 것입니다. 이 조직 작업에서 기본 작업으로 모든 시계를 펀치 인합니다.\nUsing the clock history to clock in old tasks # 시계 기록을 사용하여 이전 작업 기록\n시계 기록을 사용하여 시간을 기록한 이전 작업에서 시계를 다시 시작하거나 이전에 시간을 기록한 작업으로 바로 이동할 수 있습니다.\n나는 이것을 주로 뭔가에 의해 중단된 것을 기록하는 데 사용합니다.\n다음 시나리오를 고려하십시오.\nYou are working on and clocking Task A (Organization) You get interrupted and switch to Task B (Document my use of org-mode) You complete Task B (Document my use of org-mode) Now you want to go back to Task A (Organization) again to continue This is easy to deal with.\nClock in Task A, work on it Go to Task B (or create a new task) and clock it in When you are finished with Task B hit C-u C-c C-x C-i i 이렇게 하면 다음과 같은 시계 이력 선택 창이 표시되고 중단된 [i] 항목이 선택됩니다.\nClock history selection buffer for C-u C-c C-x C-i 아. org-journal-mode 라는게 있다. 그리고 지금은 아. org-capture-mode 겠구나. 아무튼 교육 프로그램에서 이맥스를 데일리로 써야 하는게 급선무라면 일단 기록을 해야 한다. 가장 좋은 것은 내가 쓰는 것 처럼 시간 입력에 따라서 뭔가를 쓰는 것이다. 그게 많거나 적거나 중요하지 않고 그냥 쓰는 것이다.\n쓰다가 괜찮으면 캡처로 할 일을 만들어서 배치하고, 아니면 그냥 적어 놓고 끝. 다시 보지는 않기 마련인데. 그게 참 아쉬운 부분이긴 하겠다.\n다행히 org-journal-mode 의 장점은 검색에 있다. 스트링 검색을 지원하기 때문에 주, 월, 년 단위로 디테일하게 조절해 가면서 지난 기록의 텍스트를 검색할 수 있다. 그러다가 걸리면 보면 되겠지. 아니면 언제 뭐 했나 궁금하기도 할 것이고.\n아직 검토는 못했지만, 정해진 포멧으로 작성기 때문에 무엇이든 검색할 수 있다. 예를 들어, 지난 3 개월간 평일 오전에 주로 뭘 하는가 보려면 지난 3 개월, 오전 12 시까지의 기록을 버퍼에 뽑아 주면 된다. 그러면 보고나서 필요하면 별도로 저장할수도 있고 여기에서 더 가공을 하고 싶다면 embark 로 버퍼로 뽑고 거기서 추가적인 필터를 하면 될 것이다. 모든 데이터는 텍스트이고 날짜, 시간 정보가 있기 때문에 가공할 수 있다. 텍스트 모아봐야 공간을 차지 할 것도 없다. 검색 할 때마가 텍스트 파싱이 필요하기에 시간이 걸리는 일이 겠지만 그래서 더 자유롭기도 한 것이다. 그리고 정해진 양식이 있기에 복잡도는 크지 않다.\n그래서 초보자들이 이맥스 편집, 라이프 매니징, 워크 플로우, 캡처 등을 차분하게 익숙해지려면 저널을 쓰기를 권하고 싶다. 아니 권해야 한다. 텍스트 편집에 익숙해 져야지 그 외에 일도 가능하다. 나도 텍스트 편집 자체에는 별 기능을 이용하는게 없다. 아예 없나? 싶다. 더 빠르게 뭘 하겠다는 생각도 없다. 입력하는 것 뿐이다. 앞에 글을 지우지도 않는다. 앞으로만 나아 간다.\n1 2 3 4 5 6 7 8 9 10 11 Default Task [d] norang Organization \u0026lt;-- Task B The task interrupted by starting the last one [i] norang Organization \u0026lt;-- Task B Current Clocking Task [c] org NEXT Document my use of org-mode \u0026lt;-- Task A Recent Tasks [1] org NEXT Document my use of org-mode \u0026lt;-- Task A [2] norang Organization \u0026lt;-- Task B ... [Z] org DONE Fix default section links \u0026lt;-- 35 clock task entries ago Clock Everything - Capture new entry # 모든 것을 기록하려면 모든 것에 대한 작업이 필요합니다. 계획된 프로젝트에는 괜찮지만 중단은 필연적으로 발생하며 해당 중단에 소비한 시간을 기록할 장소가 필요합니다.\n이를 처리하기 위해 우리는 우리가 하려는 일을 기록하기 위해 새로운 캡처 작업을 만듭니다. 워크플로는 다음과 같습니다.\nYou are clocking some task and an interruption occurs Create a quick capture task journal entry C-c c j Type the heading go do that thing (eat lunch, whatever) file it C-c C-c, this restores the clock back to the previous clocking task clock something else in or continue with the current clocking task 이것은 조직 파일 레이아웃에서 이 작업이 실제로 속한 위치와 같은 세부 정보를 무시하고 작업을 완료할 수 있음을 의미합니다. 작업을 다시 정리하는 것이 편리할 때 나중에 그룹에서 여러 작업을 다시 정리하면 장기적으로 시간이 절약됩니다.\n커피 브레이크와 같이 흥미롭지 않은 일회성 작업인 경우 diary.org 날짜 트리로 이동하는 캡처 저널 항목을 만듭니다. 실제로 추적하고 완료로 표시하고 일부 프로젝트에 적용해야 하는 작업인 경우 refile.org 에 파일로 저장하는 대신 캡처 작업을 만듭니다.\nFinding tasks to clock in # clock history가 뭔지 모르겠네. 9.2에도 나오는 이야긴데\nTo find a task to work on I use one of the following options (generally listed most frequently used first)\nUse the clock history C-u C-c C-x C-i Go back to something I was clocking that is not finished Pick something off today\u0026rsquo;s block agenda SCHEDULED or DEADLINE items that need to be done soon Pick something off the NEXT tasks agenda view Work on some unfinished task to move to completion Pick something off the other task list Use an agenda view with filtering to pick something to work on Punching in on the task you select will restrict the agenda view to that project so you can focus on just that thing for some period of time.\nEditing clock entries # 로그 모드에 엔트리 나오는게 없는데 어떻게 하는 거야?\n때로는 시계 항목을 편집하여 현실을 반영해야 합니다. 일주일에 2~3 개 항목에 대해 이 작업을 수행합니다.\n때때로 나는 내 컴퓨터에서 떨어져 있기 때문에 제 시간에 작업을 기록할 수 없습니다. 이 경우 이전 클럭 작업이 계속 실행 중이며 잘못된 두 작업의 시간을 계산합니다.\n시간을 기록한 다음 컴퓨터로 돌아가서 올바른 작업을 기록하고 시작 시간과 종료 시간을 편집하여 시계 기록을 수정합니다.\n항목에 대한 시계 라인을 빠르게 방문하려면 의제 로그 모드를 사용하십시오. F12 a l 오늘의 모든 클럭 라인을 보여줍니다. 적절한 클럭 라인으로 빠르게 이동하기 위해 이것을 사용합니다. F11 은 현재 시계가 있는 작업으로 이동하지만 의제 로그 모드는 이전 시계 항목을 찾고 방문하는 데 더 좋습니다.\n=F12 a l=을 사용하여 로그 모드에서 의제를 열고 기록된 시계 시간만 표시합니다. 편집해야 하는 클럭 라인으로 커서를 이동하고 =TAB=을 누르면 됩니다.\n시계 항목을 편집하려면 편집하려는 날짜 부분에 커서를 놓고(마우스가 아닌 키보드를 사용하십시오. 마우스로 타임스탬프를 클릭하면 해당 날짜의 의제로 돌아가기 때문입니다) S를 누르십시오. -\u0026lt;위쪽 화살표\u0026gt; 또는 S-\u0026lt;아래쪽 화살표\u0026gt; 키를 눌러 시간을 변경합니다.\n다음 설정은 시간 편집에서 불연속적인 분 간격을 사용하도록 합니다(반올림 없음). (setq org-time-stamp-rounding-minutes (quote (1 1)))\n이동 화살표 조합으로 시간을 편집하면 시계 라인의 총계도 업데이트되므로 매우 편리합니다.\nI always check that I haven\u0026rsquo;t created task overlaps when fixing time clock entries by viewing them with log mode on in the agenda. There is a new view in the agenda for this \u0026ndash; just hit v c in the daily agenda and clock gaps and overlaps are identified.\n저는 항상 안건에서 로그 모드를 켜고 시계 항목을 확인하여 시간 기록 항목을 수정할 때 작업 중복을 생성하지 않았는지 확인합니다. 이에 대한 의제에 새로운 보기가 있습니다. 일일 의제에서 =v c=를 누르기만 하면 시간 간격과 중복이 식별됩니다.\n내 시계 항목이 가능한 한 정확하기를 원합니다. 다음 설정은 1 분의 클럭킹 간격을 보여줍니다.\n1 2 3 4 5 (setq org-agenda-clock-consistency-checks (quote (:max-duration \u0026#34;4:00\u0026#34; :min-duration 0 :max-gap 0 :gap-ok-around (\u0026#34;4:00\u0026#34;)))) 뽀모도로나 기타 활용하는 패키지들을 언급한다. 왜?! 스맥스에 있는 나의 코드도 여기에 밀어 넣어야 하는데 어디에 넣으려고?!\nCode Block # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 ;; (setq org-clock-idle-time 10) ;; (setq org-clock-reminder-timer (run-with-timer ;; t (* org-clock-idle-time 60) ;; (lambda () ;; (unless (org-clocking-p) ;; (alert \u0026#34;Do you forget to clock-in?\u0026#34; ;; :title \u0026#34;Org Clock\u0026#34;))))) ;; Resume clocking task when emacs is restarted (org-clock-persistence-insinuate) ;; (org-clock-auto-clockout-insinuate) ; off ;; Show lot of clocking history so it\u0026#39;s easy to pick items off the C-F11 list (setq org-clock-history-length 23) ;; Resume clocking task on clock-in if the clock is open (setq org-clock-in-resume t) ;; Separate drawers for clocking and logs (setq org-drawers (quote (\u0026#34;PROPERTIES\u0026#34; \u0026#34;LOGBOOK\u0026#34;))) ;; Save clock data and state changes and notes in the LOGBOOK drawer (setq org-clock-into-drawer t) ;; Sometimes I change tasks I\u0026#39;m clocking quickly - this removes clocked tasks with 0:00 duration (setq org-clock-out-remove-zero-time-clocks t) ;; Clock out when moving task to a done state (setq org-clock-out-when-done t) ;; Save the running clock and all clock history when exiting Emacs, load it on startup (setq org-clock-persist t) ;; Do not prompt to resume an active clock (setq org-clock-persist-query-resume nil) ;; Enable auto clock resolution for finding open clocks (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running)) ;; Include current clocking task in clock reports (setq org-clock-report-include-clocking-task t) (setq bh/keep-clock-running nil) (defun bh/clock-in-to-next (kw) \u0026#34;Switch a task from TODO to NEXT when clocking in. Skips capture tasks, projects, and subprojects. Switch projects and subprojects from NEXT back to TODO\u0026#34; (when (not (and (boundp \u0026#39;org-capture-mode) org-capture-mode)) (cond ((and (member (org-get-todo-state) (list \u0026#34;TODO\u0026#34;)) (bh/is-task-p)) \u0026#34;NEXT\u0026#34;) ((and (member (org-get-todo-state) (list \u0026#34;NEXT\u0026#34;)) (bh/is-project-p)) \u0026#34;TODO\u0026#34;)))) ;; Change tasks to NEXT when clocking in (setq org-clock-in-switch-to-state \u0026#39;bh/clock-in-to-next) (defun bh/find-project-task () \u0026#34;Move point to the parent (project) task if any\u0026#34; (save-restriction (widen) (let ((parent-task (save-excursion (org-back-to-heading \u0026#39;invisible-ok) (point)))) (while (org-up-heading-safe) (when (member (nth 2 (org-heading-components)) org-todo-keywords-1) (setq parent-task (point)))) (goto-char parent-task) parent-task))) (defun bh/punch-in (arg) \u0026#34;Start continuous clocking and set the default task to the selected task. If no task is selected set the Organization task as the default task.\u0026#34; (interactive \u0026#34;p\u0026#34;) (setq bh/keep-clock-running t) (if (equal major-mode \u0026#39;org-agenda-mode) ;; We\u0026#39;re in the agenda (let* ((marker (org-get-at-bol \u0026#39;org-hd-marker)) (tags (org-with-point-at marker (org-get-tags-at)))) (if (and (eq arg 4) tags) (org-agenda-clock-in \u0026#39;(16)) (bh/clock-in-organization-task-as-default))) ;; We are not in the agenda (save-restriction (widen) ;; Find the tags on the current task (if (and (equal major-mode \u0026#39;org-mode) (not (org-before-first-heading-p)) (eq arg 4)) (org-clock-in \u0026#39;(16)) (bh/clock-in-organization-task-as-default))))) (defun bh/punch-out () (interactive) (setq bh/keep-clock-running nil) (when (org-clock-is-active) (org-clock-out)) (org-agenda-remove-restriction-lock)) (defun bh/clock-in-default-task () (save-excursion (org-with-point-at org-clock-default-task (org-clock-in)))) (defun bh/clock-in-parent-task () \u0026#34;Move point to the parent (project) task if any and clock in\u0026#34; (let ((parent-task)) (save-excursion (save-restriction (widen) (while (and (not parent-task) (org-up-heading-safe)) (when (member (nth 2 (org-heading-components)) org-todo-keywords-1) (setq parent-task (point)))) (if parent-task (org-with-point-at parent-task (org-clock-in)) (when bh/keep-clock-running (bh/clock-in-default-task))))))) (defvar bh/organization-task-id \u0026#34;eb155a82-92b2-4f25-a3c6-0304591af2f9\u0026#34;) (defun bh/clock-in-organization-task-as-default () (interactive) (org-with-point-at (org-id-find bh/organization-task-id \u0026#39;marker) (org-clock-in \u0026#39;(16)))) (defun bh/clock-out-maybe () (when (and bh/keep-clock-running (not org-clock-clocking-in) (marker-buffer org-clock-default-task) (not org-clock-resolving-clocks-due-to-idleness)) (bh/clock-in-parent-task))) (add-hook \u0026#39;org-clock-out-hook \u0026#39;bh/clock-out-maybe \u0026#39;append) ;; (require \u0026#39;org-id) ; delete compile error on emacs-29 (defun bh/clock-in-task-by-id (id) \u0026#34;Clock in a task by id\u0026#34; (org-with-point-at (org-id-find id \u0026#39;marker) (org-clock-in nil))) (defun bh/clock-in-last-task (arg) \u0026#34;Clock in the interrupted task if there is one Skip the default task and get the next one. A prefix arg forces clock in of the default task.\u0026#34; (interactive \u0026#34;p\u0026#34;) (let ((clock-in-to-task (cond ((eq arg 4) org-clock-default-task) ((and (org-clock-is-active) (equal org-clock-default-task (cadr org-clock-history))) (caddr org-clock-history)) ((org-clock-is-active) (cadr org-clock-history)) ((equal org-clock-default-task (car org-clock-history)) (cadr org-clock-history)) (t (car org-clock-history))))) (widen) (org-with-point-at clock-in-to-task (org-clock-in nil)))) (setq org-time-stamp-rounding-minutes (quote (1 1))) (setq org-agenda-clock-consistency-checks (quote (:max-duration \u0026#34;4:00\u0026#34; :min-duration 0 :max-gap 0 :gap-ok-around (\u0026#34;4:00\u0026#34;)))) Time reporting and tracking # 고객사 요청에 따라서 작업한 시간 내역을 공유한다면 이 기능 없이 어떻게 가능하겠는가?! 나의 생산성을 검토할 수 있기에 메타 인지에 도움이 된다.\n노랑님의 구성은 10 년 전 오그 모드 버전이다. 10 년 동안 오그 모드가 얼마나 변했겠는가? 더 정교해 졌으리라 믿는데. 사용법을 모른다. 인포 문서봐라!\nCode Block # 9 의 연장선에서 그림을 그리는 코드다. 이게 끝이 아니다. 시간 기록은 나도 열심히 해왔다. 근데 그게 뭐? 의미 있는 정보로 활용한 적은 없다. 그저 기록하고 있다라고 나를 압박하는 것일 뿐.\n사회가 개인화 되고 개인의 역량에 대한 가치로 비용을 정산해야 하는 미래에는 대충 몇시간 했어요 돈 줘요 이렇게는 투명하지 않다.\n시간 리포트를 같이 제출해야 할 것이다. 이게 얼마나 투명하게 할지는 깃헙에 이 데이터를 기록하게 하면 될 것이다. 아무튼 책상에 앉아 있을 때는 기록을 하자.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 ;; Sometimes I change tasks I\u0026#39;m clocking quickly ;; - this removes clocked tasks with 0:00 duration (setq org-clock-out-remove-zero-time-clocks t) ;; Agenda clock report parameters (setq org-agenda-clockreport-parameter-plist (quote (:link t :maxlevel 5 :fileskip0 t :compact t :narrow 80))) ;; from DW ;; (setq org-columns-default-format ;; \u0026#34;%20CATEGORY(Category) %65ITEM(Task) %TODO %6Effort(Estim){:} %6CLOCKSUM(Clock) %TAGS\u0026#34;) ;; from org-mode-crate ;; (setq org-columns-default-format ;; \u0026#34;%50ITEM(Task) %5Effort(Effort){:} %5CLOCKSUM %3PRIORITY %20DEADLINE %20SCHEDULED %2 0TIMESTAMP %TODO %CATEGORY(Category) %TAGS\u0026#34;) ;; Set default column view headings: Task Effort Clock_Summary (setq org-columns-default-format \u0026#34;%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM\u0026#34;) ;; global Effort estimate values ;; global STYLE property values for completion (setq org-global-properties (quote ((\u0026#34;Effort_ALL\u0026#34; . \u0026#34;0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 8:00\u0026#34;) (\u0026#34;STYLE_ALL\u0026#34; . \u0026#34;habit\u0026#34;)))) ;; Agenda log mode items to display (closed clock : default) ;; 이전 이맥스는 state가 기본이었다. 지금은 시간 기준으로 표기한다. ;; closed Show entries that have been closed on that day. ;; clock Show entries that have received clocked time on that day. ;; state Show all logged state changes. (setq org-agenda-log-mode-items \u0026#39;(closed clock state)) (setq org-agenda-log-mode-add-notes nil) ;; sort 관련 기능을 확인해보고 정의한 함수들이 필요 없으면 빼면 된다. (setq org-agenda-sort-notime-is-late t) ; Org 9.4 (setq org-agenda-sort-noeffort-is-high t) ; Org 9.4 Billing clients based on clocked time # 월초에 저는 지난 달에 수행한 작업에 대해 고객사들에 송장을 발행한다. 그 전에 여기에서 청구 할 금액에 대한 시간 데이터의 정확성을 검토한다.\n수집된 시간의 청구 과정은 다음 단계로 진행 된다.\nVerify that the clock data is complete and correct Use clock reports to summarize time spent Create an invoice based on the clock data Archive complete tasks so they are out of the way. See Archiving for more details. Verify that the clock data is complete and correct # 시계 데이터가 완전하고 올바른지 확인하십시오.\n작업을 자주 변경하기 때문에(때로는 1 분에 한 번 이상) 다음 설정을 사용하여 지속 시간이 0 인 시계 항목을 제거합니다.\n(setq org-clock-out-remove-zero-time-clocks t)\n이 설정은 내 시계 로그 항목을 깔끔하게 유지합니다. 시계 보고서에 들어 갈만한 항목만 유지합니다.\n시계 시간에 대한 인보이스를 발행하기 전에 시간 데이터가 정확한지 확인하는 것이 중요합니다. 끝나지 않은 항목(즉, 종료 시간이 없음)이 있는 시계 시간이 있는 경우 시계 날짜의 공백이며 시계 보고서를 생성할 때 작업에 소요된 시간이 0 으로 계산됩니다. 0 으로 세는 것은 잘못된 것입니다.\n종료가 제대로 안 된 항목을 확인하기 위해 어젠다에서 시계 검사를 사용합니다 (어젠다에서 v c). 이는 시계 데이터의 간격과 겹침을 보여줍니다.\nTo check the last month\u0026rsquo;s clock data I use F12 a v m b v c which shows a full month in the agenda, moves to the previous month, and shows the clocked times only. It\u0026rsquo;s important to remove any agenda restriction locks and filters when checking the logs for gaps and overlaps.\n지난 달의 시계 데이터를 확인하기 위해 나는 =F12 a v m b vc=를 사용하여 안건에서 한 달 전체를 표시하고 이전 달로 이동하며 시계 시간만 표시합니다. 간격 및 겹침에 대한 로그를 확인할 때 의제 제한 잠금 및 필터를 제거하는 것이 중요합니다.\n어젠다에 clocked-time 만 표시되므로 항목에 종료 시간이 누락되었는지 확인하기 위해 목록을 빠르게 스캔할 수 있습니다. 항목이 닫히지 않은 경우 해당 시간 주변의 다른 시계 정보를 기반으로 시계 항목을 수동으로 수정할 수 있습니다.\n\u0026gt;\u0026gt; 실제 위에 동작되나?\nUsing clock reports to summarize time spent # 시계 보고서를 사용하여 소요 시간 요약 클라이언트에 대한 청구 가능 시간은 별도의 오그 파일에 보관됩니다.\nXYZ.org=의 작업에 소요된 시간 보고서를 받으려면 =XYZ.org 파일을 방문하고 =F12 \u0026lt; a v m b R=을 사용하여 지난 달의 일정 시계 보고서를 실행하기만 하면 됩니다. 이것은 의제를 이 하나의 파일로 제한하고 전체 월의 의제를 표시하고 지난 달로 이동하며 시계 보고서를 생성합니다.\nMy agenda org clock report settings show 5 levels of detail with links to the tasks. I like wider reports than the default compact setting so I override the :narrow value.\n내 의제 조직 시계 보고서 설정에는 태스크에 대한 링크와 함께 다섯 가지의 세부 수준이 표시됩니다. 저는 조밀한 기본 설정보다 더 넓은 보고서를 선호하므로 :narrow 값을 재정의합니다.\nsetq org-agenda-clockreport-parameter-plist \u0026hellip; ; (:link t :maxlevel 2) 이맥스 기본 값 ; (:link t :maxlevel 5 :fileskip0 t :compact t :narrow 80))) 설정 값\n나는 각 프로젝트 조직 파일에 월별 시계 보고서 동적 블록을 가지고 있었고 청구 주기가 끝날 때 수동으로 업데이트했습니다. 저는 이것을 고객의 프로젝트에 소요된 시간에 대해 비용을 청구하는 기준으로 사용했습니다. 한 달에 두 개 이상의 파일이 있는 경우 동적 블록을 업데이트하는 것이 상당히 지루하다는 것을 알았습니다.\n이후 ~어젠다에 관련 기능~이 추가된 직후 내장된 시계 보고서 기능을 사용하도록 전환했습니다. 저는 이게 훨씬 편합니다. 데이터는 일반적으로 다른 사람이 소비하는 것이 아니므로 의제 시계 보고서 형식이 제 사용 사례에 적합합니다.\nTask Estimates and column view # 작업을 완료하는 데 걸리는 시간을 추정하는 것은 마스터하기 어려운 기술입니다. 조직 모드는 이러한 추정 과정을 쉽게 훈련하게 하며, 완료 하는데까지의 실제 소요 시간을 기록할 수 있다. 반복적인 연습과 노력을 통해서 예측 능력이 향상되게 될 것이다.\nCreating a task estimate with column mode # properties 및 =column view=를 사용하여 프로젝트 추정을 수행합니다. 다음 헤드라인을 사용하여 열 보기를 전역적으로 설정했습니다.\n(setq org-columns-default-format \u0026ldquo;%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM\u0026rdquo;)\n이렇게 하면 열 보기에 예상 작업 노력과 시계 시간이 나란히 표시되어 프로젝트 추정을 검토하는 데 좋습니다.\n=Effort=라는 속성은 주어진 작업을 완료하는 데 걸리는 예상 시간을 기록합니다. 내가 사용하는 예상 시간은 다음 중 하나입니다.\n10 minutes, 30 minutes, 1 hour ~ 8 hours 이들은 전역 속성 =Effort_ALL=의 =열 모드=에서 쉽게 사용할 수 있도록 저장됩니다. (setq org-global-properties \u0026hellip;\n작업 또는 하위 트리에 대한 추정치를 생성하려면 =C-c C-x C-c=로 열 모드를 시작하고 =c=로 트리를 축소합니다. 여기에는 작업 이름, 예상 작업량 및 시계 시간이 열로 표시된 헤드라인 위에 오버레이된 테이블이 표시됩니다.\n작업의 Effort 열에 있는 커서를 사용하여 빠른 키 1 ~ =9=를 사용하여 예상 노력 값을 쉽게 설정할 수 있습니다. 노력 값을 설정한 후 =q=로 =column mode=를 종료합니다.\n22/11/19\u0026ndash;17:23 :: 실제로 잘 됩니다.\nC-c C-x C-c org-colums 스맥스에 메이저모드 키로 매핑이 안되 있네요. 해당 열에 가서 1-9 입력하면 시간 입력이 됩니다. , E or M-RET E org-set-effort 스맥스 메이저모드 키로 입력하는게 편해서 E 로 내가 매핑함. Saving your estimate # \u0026gt;\u0026gt; 아래 실제 해본 다음에 적어 놓음. 키바인딩 다름.\n클라이언트 측에 시간/비용 견적을 제공해야 하는 고정 비용의 작업이라면, 프로젝트를 완료하기 위해서 사전에 전달한 예상 추정 치를 저장해 놓는 것이 유용할 것이다.\n추정 프로젝트 하위 트리의 맨 위에 동적 시계 보고서 테이블을 만들어 원래 추정치를 저장합니다. =C-c C-x i RET=를 입력하면 예상 값과 현재까지의 시계 시간이 포함된 시계 테이블 보고서가 삽입됩니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 Original Estimate #+BEGIN: columnview :hlines 1 :id local | Task | Estimated Effort | CLOCKSUM | |-----------------------------+------------------+----------| | ** TODO Project to estimate | 5:40 | | | *** TODO Step 1 | 0:10 | | | *** TODO Step 2 | 0:10 | | | *** TODO Step 3 | 5:10 | | | **** TODO Step 3.1 | 2:00 | | | **** TODO Step 3.2 | 3:00 | | | **** TODO Step 3.3 | 0:10 | | | *** TODO Step 4 | 0:10 | | #+END: 나는 일반적으로 #+에서 =C-c C-c=를 눌러 실수로 테이블을 업데이트하지 않도록 클라이언트에 추정치를 제공한 후 원래 테이블에서 =#+BEGIN: 및 #+END: 행을 삭제합니다.\n원래 추정 데이터를 저장하면 원래 추정 데이터를 잃지 않고 프로젝트에서 작업하면서 프로젝트 작업을 하위 작업으로 세분화할 수 있습니다.\n22/11/19\u0026ndash;17:29 :: 실제 해본 뒤에 적음\norg-dynamic-block-insert-dblock 함수를 호출하면 cloumnview, clocktable 둘중에 선택을 하라한다. 맞춰서 하면 아래와 같은 정보를 확인할 수 있다. org-clock-report\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 1) 글로벌 cloumnview | Task | Effort | CLOCKSUM | |--------------------------------+--------+----------| | Programming Clojure Reviews | | | |--------------------------------+--------+----------| | Sample | 3:30 | | | SP: Sample Project to estimate | 3:30 | | | SP: Step 1 | 1:00 | | | SP: Step 2 | 0:30 | | | SP: Step 3 | 1:30 | | | SP: Step 3.1 | 0:30 | | | SP: Step 3.2 | 0:30 | | | SP: Step 3.3 | 0:30 | | | SP: Step 4 | 0:30 | | 2) 로컬 cloumnview | Task | Effort | CLOCKSUM | |--------------------------------+--------+----------| | SP: Sample Project to estimate | 3:30 | | | SP: Step 1 | 1:00 | | | SP: Step 2 | 0:30 | | | SP: Step 3 | 1:30 | | | SP: Step 3.1 | 0:30 | | | SP: Step 3.2 | 0:30 | | | SP: Step 3.3 | 0:30 | | | SP: Step 4 | 0:30 | | 3) clocktable | Headline | Time | |--------------+--------| | *Total time* | *0:00* | Reviewing your estimate # =Column view=는 견적을 검토하는 데 유용합니다. 여기에는 프로젝트의 예상 시간 값과 총 시계 시간이 나란히 표시됩니다.\n=C-c C-x i RET=를 사용하여 동적 시계 테이블을 생성하는 것은 다른 응용 프로그램에서 사용할 수 있도록 해야 하는 경우 이 프로젝트 검토를 저장하는 좋은 방법입니다.\n=C-c C-x C-d=는 또한 현재 org 파일에 대한 빠른 시간 요약을 제공합니다.\nProviding progress reports to others # \u0026gt; 어젠다뷰에서 이전 시간으로 가면서 R 을 눌러서 보고서를 뽑아 내고 이를 텍스트 파일로 만들어서 전달하면 된다.\n누군가 내가 최근에 한 일에 대한 세부 정보를 원할 때, 나는 내가 완료한 작업과 기간 동안의 시계 보고서(clock report) 와 더불어 상태 변경 사항이 포함된 로그 보고서(log report)를 어젠다에서 간단하게 생성합니다.\nR org-agenda-clock-report-mode\n다음 설정은 의제에서 종료된 작업 및 상태 변경을 보여줍니다. 의제 시계 보고서(\u0026lsquo;R\u0026rsquo;)와 결합하여 필요한 모든 세부 정보를 신속하게 생성할 수 있습니다.\n(setq org-agenda-log-mode-items (quote (closed state)))\n보고서를 생성하기 위해 적절한 시간 프레임(오늘, 어제, 이번 주 또는 지난주)에 대한 의제를 가져오고 키 시퀀스 =l R=를 눌러 로그 보고서(클록킹 데이터 라인 없음) 및 시간 보고서를 뒤에 추가합니다.\n그런 다음 결과 유용한 형식으로 내보내 다른 사람에게 제공하기만 하면 됩니다. =C-x C-w /tmp/agenda.html RET=는 HTML 로 내보내고 =C-x C-w /tmp/agenda.txt RET=는 일반 텍스트로 내보냅니다. 다른 형식도 있지만 저는 이 두 가지를 가장 많이 사용합니다.\n이 내보내기를 태그 필터 및 =C-u R=과 결합하면 사람들이 관심을 갖는 태그로 보고서를 제한할 수 있습니다.\nNEW org-clock-mode-line # 1 2 3 4 5 6 7 ;; current Only the time in the current instance of the clock ;; today All time clocked into this task today ;; repeat All time clocked into this task since last repeat ;; all All time ever recorded for this task ;; auto Automatically, either all, or repeat for repeating tasks (setq org-clock-mode-line-entry t) (setq org-clock-mode-line-line-total \u0026#39;auto) Tags # 나도 태그를 좀 신경써서 구성했는데, 여기에 일단 맞춘다. 태그의 역할을 한정지어서 바라보면 안된다.\n상속태그는 일단 기본으로 보이게 한다. 태그 시스템은 상당히 점진적으로 개선할 부분이다.\nIntro # 태그의 역할을 참으로 다양하다.\nTasks can have any number of arbitrary tags. Tags are used for:\nfiltering todo lists and agenda views providing context for tasks tagging notes tagging phone calls tagging meetings tagging tasks to be refiled tagging tasks in a WAITING state because a parent task is WAITING tagging cancelled tasks because a parent task is CANCELLED preventing export of some subtrees when publishing\nCode Block # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ;; FILETAGS로 상속받은 태그는 어젠다에서 숨긴다. 상속 태그 ;; (setq org-agenda-show-inherited-tags nil) (setq org-auto-align-tags nil) ; default ;; 태그 위치를 좌측으로 당겨야 버티컬 창 여러개에서 한 줄로 표현할 수 있다. (setq org-tags-column 0) ; default -77 ;; Allow setting single tags without the menu ;; (setq org-fast-tag-selection-single-key (quote expert)) ;; (setq org-fast-tag-selection-single-key nil) (setq org-fast-tag-selection-single-key t) (setq org-tags-match-list-sublevels \u0026#39;intented) ; t (setq org-tags-exclude-from-inheritance \u0026#39;(\u0026#34;Project\u0026#34;)) ; nil ;; Tags with fast selection keys (setq org-tag-alist (quote ((:startgroup) (\u0026#34;@errand\u0026#34; . ?e) (\u0026#34;@office\u0026#34; . ?o) (\u0026#34;@home\u0026#34; . ?h) (\u0026#34;@farm\u0026#34; . ?f) ; Example (:endgroup) (\u0026#34;HOLD\u0026#34; . ?h) (\u0026#34;Project\u0026#34; . ?p) ; Project (\u0026#34;NOTE\u0026#34; . ?n) (\u0026#34;CANCELLED\u0026#34; . ?c) (\u0026#34;FLAGGED\u0026#34; . ??)))) ;; For tag searches ignore tasks with scheduled and deadline dates (setq org-agenda-tags-todo-honor-ignore-options t) Handling Notes # 메모는 하루 동안 접하게 되는 지식의 작은 보석입니다. 그들은 할 일이 없다는 점을 제외하고는 작업과 같습니다 (지식의 보석을 배우고 암기하는 것 제외). 불행히도 기억할 보석이 너무 많아서 생각만 해도 머리가 터질 지경입니다.\norg-mode to the rescue! :: 구원자여! 종종 Gnus 에서 org-mode 및 git 메일링 목록을 읽는 동안 멋진 기능이나 기억하고 싶은 것을 찾게 됩니다. 메모를 작성하려면 메모 캡처 템플릿 =C-c c n=을 사용하고 메모 제목을 입력하고 =C-c C-c=를 입력하여 저장합니다. 할 수 있는 유일한 다른 작업은 (나중에) 적절한 프로젝트 파일로 다시 파일화하는 것입니다.\n메모를 찾기 위해 의제보기가 있습니다. 메모는 적절한 프로젝트 파일 및 작업으로 다시 정리됩니다. 그것이 속한 특정 작업이 없으면 catchall * Notes 작업으로 이동합니다. 나는 일반적으로 모든 프로젝트 파일에 포괄적인 메모 작업을 가지고 있습니다. 메모는 캡처 템플릿에 의해 이미 적용된 NOTE 태그로 생성되므로 어디에서나 메모를 다시 정리할 수 있습니다. 노트가 내 의제에 기여하는 프로젝트 파일(예: org-agenda-files)에 있는 한 키 조합 =F12 N=을 눌러 내 노트 의제 보기로 쉽게 노트를 다시 찾을 수 있습니다. 표준 의제 태그 필터링을 사용하여 노트의 의제 보기를 자유롭게 제한할 수 있습니다.\n의미 있는 헤드라인이 있는 짧은 노트는 =F12 N=을 사용하여 필요할 때 다시 찾는 방법 외에는 실제로 아무것도 기억할 필요가 없기 때문에 기술적인 세부 사항을 기억할 수 있는 매우 좋은 방법입니다.\n프로젝트와 관련이 있고 일반적으로 유용하지 않은 메모는 프로젝트와 함께 보관하고 프로젝트가 제거될 때 의제에서 제거할 수 있습니다.\n그래서 내 조직 노트는 org.org 에 들어가고 내 깃 관련 노트는 * Notes 아래에 있는 git.org 에 들어갑니다. 나는 그것들을 영원히 찾을 수 있을 것이다. 프로젝트와 함께 기억하고 싶은 일부 작업프로젝트 세부 사항에 대한 메모는 적절한 작업 조직 모드 파일 아래의 프로젝트 작업에 보관되며 결국 프로젝트가 완료되고 보관되면 의제에서 제거됩니다.\nGTD # GTD 에서 다루는 프로젝트 관리를 보자.\nOverviews # I\u0026rsquo;m using a new lazy project definition to mark tasks as projects. This requires zero effort from me. Any task with a subtask using a todo keyword is a project. Period.\n작업을 프로젝트로 표시하기 위해 새로운 지연 프로젝트 정의를 사용하고 있습니다. 이것은 나의 노력이 전혀 필요하지 않습니다. todo 키워드를 사용하는 하위 작업이 있는 모든 작업은 프로젝트입니다. 기간.\nProjects are \u0026lsquo;stuck\u0026rsquo; if they have no subtask with a NEXT todo keyword task defined.\nNEXT todo 키워드 작업이 정의된 하위 작업이 없으면 프로젝트가 \u0026lsquo;중단\u0026rsquo;됩니다.\nThe org-mode stuck projects agenda view lists projects that have no NEXT task defined. Stuck projects show up on my block agenda and I tend to assign a NEXT task so the list remains empty. This helps to keep projects moving forward.\n조직 모드 고정 프로젝트 안건 보기에는 NEXT 작업이 정의되지 않은 프로젝트가 나열됩니다. 중단된 프로젝트가 내 블록 안건에 표시되고 NEXT 작업을 할당하여 목록이 비어 있도록 하는 경향이 있습니다. 이는 프로젝트를 계속 진행하는 데 도움이 됩니다.\nI disable the default org-mode stuck projects agenda view with the following setting.\n다음 설정으로 기본 조직 모드 고정 프로젝트 의제 보기를 비활성화합니다.\nThis prevents org-mode from trying to show incorrect data if I select the default stuck project view with F12 # from the agenda menu. My customized stuck projects view is part of my block agenda displayed with F12 SPC.\n이렇게 하면 의사 일정 메뉴에서 =F12 #=를 사용하여 기본 고정 프로젝트 보기를 선택하는 경우 조직 모드가 잘못된 데이터를 표시하려고 시도하는 것을 방지할 수 있습니다. 내 사용자 지정 중단된 프로젝트 보기는 =F12 SPC=로 표시되는 내 블록 안건의 일부입니다.\nProjects can have subprojects - and these subprojects can also be stuck. Any project that is stuck shows up on the stuck projects list so I can indicate or create a NEXT task to move that project forward.\n프로젝트에는 하위 프로젝트가 있을 수 있으며 이러한 하위 프로젝트도 중단될 수 있습니다. 중단된 모든 프로젝트는 중단된 프로젝트 목록에 표시되므로 NEXT 작업을 표시하거나 생성하여 해당 프로젝트를 진행할 수 있습니다.\nIn the following example Stuck Project A is stuck because it has no subtask which is NEXT. Project C is not stuck because it has NEXT tasks SubTask G and Task I. Stuck Sub Project D is stuck because SubTask E is not NEXT and there are no other tasks available in this project.\n다음 예에서 Stuck Project A=는 =NEXT=인 하위 작업이 없기 때문에 중단되었습니다. =프로젝트 C=는 =NEXT 작업 하위 작업 G 및 =작업 I=이 있기 때문에 중단되지 않습니다. =Stuck Sub Project D=는 =SubTask E=가 =NEXT=가 아니고 이 프로젝트에 사용 가능한 다른 작업이 없기 때문에 중단되었습니다.\nAll of the stuck projects and subprojects show up in the stuck projects list and that is my indication to assign or create NEXT tasks until the stuck projects list is empty. Occasionally some subtask is WAITING for something and the project is stuck until that condition is satisfied. In this case I leave it on the stuck project list and just work on something else. This stuck project \u0026lsquo;bugs\u0026rsquo; me regularly when I see it on the block agenda and this prompts me to follow up on the thing that I\u0026rsquo;m waiting for.\n중단된 모든 프로젝트 및 하위 프로젝트가 중단된 프로젝트 목록에 표시되며 이는 중단된 프로젝트 목록이 비워질 때까지 NEXT 작업을 할당하거나 생성하라는 표시입니다. 때때로 일부 하위 작업이 무언가에 대해 =WAITING=이고 해당 조건이 충족될 때까지 프로젝트가 중단됩니다. 이 경우에는 중단된 프로젝트 목록에 그대로 두고 다른 작업을 수행합니다. 이 정체된 프로젝트는 블록 의제에서 볼 때 정기적으로 저를 \u0026lsquo;버그\u0026rsquo;로 만들고 이것은 제가 기다리고 있는 것에 대한 후속 조치를 취하도록 유도합니다.\nCode Blocksetq org-agenda-span \u0026#39;day) ;; /home/junghan/.emacs.tshu/lisp/lang-org.el ;; 노랑님은 이걸 사용하지 않고 직접 서브 시스템을 만들었다. (setq org-stuck-projects (quote (\u0026#34;\u0026#34; nil nil \u0026#34;\u0026#34;))) (defun bh/is-project-p () \u0026#34;Any task with a todo keyword subtask\u0026#34; (save-restriction (widen) (let ((has-subtask) (subtree-end (save-excursion (org-end-of-subtree t))) (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1))) (save-excursion (forward-line 1) (while (and (not has-subtask) (\u0026lt; (point) subtree-end) (re-search-forward \u0026#34;^\\*+ \u0026#34; subtree-end t)) (when (member (org-get-todo-state) org-todo-keywords-1) (setq has-subtask t)))) (and is-a-task has-subtask)))) (defun bh/is-project-subtree-p () \u0026#34;Any task with a todo keyword that is in a project subtree. Callers of this function already widen the buffer view.\u0026#34; (let ((task (save-excursion (org-back-to-heading \u0026#39;invisible-ok) (point)))) (save-excursion (bh/find-project-task) (if (equal (point) task) nil t)))) (defun bh/is-task-p () \u0026#34;Any task with a todo keyword and no subtask\u0026#34; (save-restriction (widen) (let ((has-subtask) (subtree-end (save-excursion (org-end-of-subtree t))) (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1))) (save-excursion (forward-line 1) (while (and (not has-subtask) (\u0026lt; (point) subtree-end) (re-search-forward \u0026#34;^\\*+ \u0026#34; subtree-end t)) (when (member (org-get-todo-state) org-todo-keywords-1) (setq has-subtask t)))) (and is-a-task (not has-subtask))))) (defun bh/is-subproject-p () \u0026#34;Any task which is a subtask of another project\u0026#34; (let ((is-subproject) (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1))) (save-excursion (while (and (not is-subproject) (org-up-heading-safe)) (when (member (nth 2 (org-heading-components)) org-todo-keywords-1) (setq is-subproject t)))) (and is-a-task is-subproject))) (defun bh/list-sublevels-for-projects-indented () \u0026#34;Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks. This is normally used by skipping functions where this variable is already local to the agenda.\u0026#34; (if (marker-buffer org-agenda-restrict-begin) (setq org-tags-match-list-sublevels \u0026#39;indented) (setq org-tags-match-list-sublevels nil)) nil) (defun bh/list-sublevels-for-projects () \u0026#34;Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks. This is normally used by skipping functions where this variable is already local to the agenda.\u0026#34; (if (marker-buffer org-agenda-restrict-begin) (setq org-tags-match-list-sublevels t) (setq org-tags-match-list-sublevels nil)) nil) (defvar bh/hide-scheduled-and-waiting-next-tasks t) (defun bh/toggle-next-task-display () (interactive) (setq bh/hide-scheduled-and-waiting-next-tasks (not bh/hide-scheduled-and-waiting-next-tasks)) (when (equal major-mode \u0026#39;org-agenda-mode) (org-agenda-redo)) (message \u0026#34;%s WAITING and SCHEDULED NEXT Tasks\u0026#34; (if bh/hide-scheduled-and-waiting-next-tasks \u0026#34;Hide\u0026#34; \u0026#34;Show\u0026#34;))) (defun bh/skip-stuck-projects () \u0026#34;Skip trees that are not stuck projects\u0026#34; (save-restriction (widen) (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))) (if (bh/is-project-p) (let* ((subtree-end (save-excursion (org-end-of-subtree t))) (has-next )) (save-excursion (forward-line 1) (while (and (not has-next) (\u0026lt; (point) subtree-end) (re-search-forward \u0026#34;^\\\\*+ NEXT \u0026#34; subtree-end t)) (unless (member \u0026#34;WAITING\u0026#34; (org-get-tags-at)) (setq has-next t)))) (if has-next nil next-headline)) ; a stuck project, has subtasks but no next task nil)))) (defun bh/skip-non-stuck-projects () \u0026#34;Skip trees that are not stuck projects\u0026#34; ;; (bh/list-sublevels-for-projects-indented) (save-restriction (widen) (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))) (if (bh/is-project-p) (let* ((subtree-end (save-excursion (org-end-of-subtree t))) (has-next )) (save-excursion (forward-line 1) (while (and (not has-next) (\u0026lt; (point) subtree-end) (re-search-forward \u0026#34;^\\\\*+ NEXT \u0026#34; subtree-end t)) (unless (member \u0026#34;WAITING\u0026#34; (org-get-tags-at)) (setq has-next t)))) (if has-next next-headline nil)) ; a stuck project, has subtasks but no next task next-headline)))) (defun bh/skip-non-projects () \u0026#34;Skip trees that are not projects\u0026#34; ;; (bh/list-sublevels-for-projects-indented) (if (save-excursion (bh/skip-non-stuck-projects)) (save-restriction (widen) (let ((subtree-end (save-excursion (org-end-of-subtree t)))) (cond ((bh/is-project-p) nil) ((and (bh/is-project-subtree-p) (not (bh/is-task-p))) nil) (t subtree-end)))) (save-excursion (org-end-of-subtree t)))) (defun bh/skip-project-trees-and-habits () \u0026#34;Skip trees that are projects\u0026#34; (save-restriction (widen) (let ((subtree-end (save-excursion (org-end-of-subtree t)))) (cond ((bh/is-project-p) subtree-end) ((org-is-habit-p) subtree-end) (t nil))))) (defun bh/skip-projects-and-habits-and-single-tasks () \u0026#34;Skip trees that are projects, tasks that are habits, single non-project tasks\u0026#34; (save-restriction (widen) (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))) (cond ((org-is-habit-p) next-headline) ((and bh/hide-scheduled-and-waiting-next-tasks (member \u0026#34;WAITING\u0026#34; (org-get-tags-at))) next-headline) ((bh/is-project-p) next-headline) ((and (bh/is-task-p) (not (bh/is-project-subtree-p))) next-headline) (t nil))))) (defun bh/skip-project-tasks-maybe () \u0026#34;Show tasks related to the current restriction. When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks. When not restricted, skip project and sub-project tasks, habits, and project related tasks.\u0026#34; (save-restriction (widen) (let* ((subtree-end (save-excursion (org-end-of-subtree t))) (next-headline (save-excursion (or (outline-next-heading) (point-max)))) (limit-to-project (marker-buffer org-agenda-restrict-begin))) (cond ((bh/is-project-p) next-headline) ((org-is-habit-p) subtree-end) ((and (not limit-to-project) (bh/is-project-subtree-p)) subtree-end) ((and limit-to-project (bh/is-project-subtree-p) (member (org-get-todo-state) (list \u0026#34;NEXT\u0026#34;))) subtree-end) (t nil))))) (defun bh/skip-project-tasks () \u0026#34;Show non-project tasks. Skip project and sub-project tasks, habits, and project related tasks.\u0026#34; (save-restriction (widen) (let* ((subtree-end (save-excursion (org-end-of-subtree t)))) (cond ((bh/is-project-p) subtree-end) ((org-is-habit-p) subtree-end) ((bh/is-project-subtree-p) subtree-end) (t nil))))) (defun bh/skip-non-project-tasks () \u0026#34;Show project tasks. Skip project and sub-project tasks, habits, and loose non-project tasks.\u0026#34; (save-restriction (widen) (let* ((subtree-end (save-excursion (org-end-of-subtree t))) (next-headline (save-excursion (or (outline-next-heading) (point-max))))) (cond ((bh/is-project-p) next-headline) ((org-is-habit-p) subtree-end) ((and (bh/is-project-subtree-p) (member (org-get-todo-state) (list \u0026#34;NEXT\u0026#34;))) subtree-end) ((not (bh/is-project-subtree-p)) subtree-end) (t nil))))) (defun bh/skip-projects-and-habits () \u0026#34;Skip trees that are projects and tasks that are habits\u0026#34; (save-restriction (widen) (let ((subtree-end (save-excursion (org-end-of-subtree t)))) (cond ((bh/is-project-p) subtree-end) ((org-is-habit-p) subtree-end) (t nil))))) (defun bh/skip-non-subprojects () \u0026#34;Skip trees that are not projects\u0026#34; (let ((next-headline (save-excursion (outline-next-heading)))) (if (bh/is-subproject-p) nil next-headline))) Archiving # 이건 아직 해보지도 않았네. 해볼거야. 아래 설정 잘 되어 있구나.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 (setq org-archive-mark-done nil) (setq org-archive-location \u0026#34;%s_archive::* Archived Tasks\u0026#34;) (defun bh/skip-non-archivable-tasks () \u0026#34;Skip trees that are not available for archiving\u0026#34; (save-restriction (widen) ;; Consider only tasks with done todo headings as archivable candidates (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))) (subtree-end (save-excursion (org-end-of-subtree t)))) (if (member (org-get-todo-state) org-todo-keywords-1) (if (member (org-get-todo-state) org-done-keywords) (let* ((daynr (string-to-number (format-time-string \u0026#34;%d\u0026#34; (current-time)))) (a-month-ago (* 60 60 24 (+ daynr 1))) (last-month (format-time-string \u0026#34;%Y-%m-\u0026#34; (time-subtract (current-time) (seconds-to-time a-month-ago)))) (this-month (format-time-string \u0026#34;%Y-%m-\u0026#34; (current-time))) (subtree-is-current (save-excursion (forward-line 1) (and (\u0026lt; (point) subtree-end) (re-search-forward (concat last-month \u0026#34;\\\\|\u0026#34; this-month) subtree-end t))))) (if subtree-is-current subtree-end ; Has a date in this month or last month, skip it nil)) ; available to archive (or subtree-end (point-max))) next-headline)))) Publishing and Exporting # Org-babel :: Clojure with BB # Babashka 로 설정했다. 코드는 아래 참고.\nAdd support for running Org-mode Clojure source blocks with Babashka: Add support for running clojure blocks in org-mode via babashka · 5f9dbe53ce \u0026hellip;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 (require \u0026#39;ob-clojure) ;; (require \u0026#39;cider) (with-eval-after-load \u0026#39;ob-clojure (defcustom org-babel-clojure-backend nil \u0026#34;Backend used to evaluate Clojure code blocks.\u0026#34; :group \u0026#39;org-babel :type \u0026#39;(choice (const :tag \u0026#34;inf-clojure\u0026#34; inf-clojure) (const :tag \u0026#34;cider\u0026#34; cider) (const :tag \u0026#34;slime\u0026#34; slime) (const :tag \u0026#34;bb\u0026#34; bb) (const :tag \u0026#34;Not configured yet\u0026#34; nil))) (defun elisp-\u0026gt;clj (in) (cond ((listp in) (concat \u0026#34;[\u0026#34; (s-join \u0026#34; \u0026#34; (mapcar #\u0026#39;elisp-\u0026gt;clj in)) \u0026#34;]\u0026#34;)) (t (format \u0026#34;%s\u0026#34; in)))) (defun ob-clojure-eval-with-bb (expanded params) \u0026#34;Evaluate EXPANDED code block with PARAMS using babashka.\u0026#34; (unless (executable-find \u0026#34;bb\u0026#34;) (user-error \u0026#34;Babashka not installed\u0026#34;)) (let* ((stdin (let ((stdin (cdr (assq :stdin params)))) (when stdin (elisp-\u0026gt;clj (org-babel-ref-resolve stdin))))) (input (cdr (assq :input params))) (file (make-temp-file \u0026#34;ob-clojure-bb\u0026#34; nil nil expanded)) (command (concat (when stdin (format \u0026#34;echo %s | \u0026#34; (shell-quote-argument stdin))) (format \u0026#34;bb %s -f %s\u0026#34; (cond ((equal input \u0026#34;edn\u0026#34;) \u0026#34;\u0026#34;) ((equal input \u0026#34;text\u0026#34;) \u0026#34;-i\u0026#34;) (t \u0026#34;\u0026#34;)) (shell-quote-argument file)))) (result (shell-command-to-string command))) (s-trim result))) (defun org-babel-execute:clojure (body params) \u0026#34;Execute a block of Clojure code with Babel.\u0026#34; (unless org-babel-clojure-backend (user-error \u0026#34;You need to customize org-babel-clojure-backend\u0026#34;)) (let* ((expanded (org-babel-expand-body:clojure body params)) (result-params (cdr (assq :result-params params))) result) (setq result (cond ((eq org-babel-clojure-backend \u0026#39;inf-clojure) (ob-clojure-eval-with-inf-clojure expanded params)) ((eq org-babel-clojure-backend \u0026#39;cider) (ob-clojure-eval-with-cider expanded params)) ((eq org-babel-clojure-backend \u0026#39;slime) (ob-clojure-eval-with-slime expanded params)) ((eq org-babel-clojure-backend \u0026#39;bb) (ob-clojure-eval-with-bb expanded params)))) (org-babel-result-cond result-params result (condition-case nil (org-babel-script-escape result) (error result))))) ;; bb (customize-set-variable \u0026#39;org-babel-clojure-backend \u0026#39;bb)) (add-hook \u0026#39;org-mode-hook (lambda () (require \u0026#39;ob-clojure))) Org-babel Setup # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 (add-hook \u0026#39;org-babel-after-execute-hook \u0026#39;bh/display-inline-images \u0026#39;append) ;; 대문자가 좋다 uppercase better ;; (setq org-babel-uppercase-example-markers t) ; default nil (defun bh/display-inline-images () (condition-case nil (org-display-inline-images) (error nil))) (setq org-startup-with-inline-images t) (setq org-image-actual-width (min (/ (display-pixel-width) 3) 640)) ;; (setq org-image-actual-width 400) (setq plantuml-jar-path \u0026#34;/usr/share/plantuml/plantuml.jar\u0026#34; org-plantuml-jar-path \u0026#34;/usr/share/plantuml/plantuml.jar\u0026#34;) (setq org-ditaa-jar-path \u0026#34;/usr/share/ditaa/ditaa.jar\u0026#34;) (org-babel-do-load-languages (quote org-babel-load-languages) (quote ((emacs-lisp . t) (shell . t) (awk . t) (ditaa . t) (sed . t) (python . t) (gnuplot . t) (clojure . t) (ruby . t) (js . t) (ledger . t) (org . t) (plantuml . t) ))) (setq org-confirm-babel-evaluate nil) (setq org-edit-src-persistent-message nil) (setq org-src-fontify-natively t) (setq org-edit-src-content-indentation 0) ;; from +org-init-babel-h doom-emacs (setq org-src-preserve-indentation t ; use native major-mode indentation org-src-tab-acts-natively t ; we do this ourselves ;; You don\u0026#39;t need my permission (just be careful, mkay?) org-link-elisp-confirm-function nil ;; Our :lang common-lisp module uses sly, so... org-babel-lisp-eval-fn #\u0026#39;sly-eval) ;; I prefer C-c C-c over C-c \u0026#39; (more consistent) (define-key org-src-mode-map (kbd \u0026#34;C-c C-c\u0026#34;) #\u0026#39;org-edit-src-exit) Productivity Tools # Focus on Current Work # 22/11/19\u0026ndash;12:29 :: 필요해서 다시 넣는다. 다른데서 호출하더라. 일단 팔로우 모드를 기본으로 키맵으로 수정했다. 일부로 호출하지 않는 이상 사용하지는 않을 것이긴 하나 매우 유용한 기능임은 확실하다. 그리고 이미 기능이 바인딩 되어 있으므로 파악을 해야 오작동을 안한다.\nNarrowing to a subtree with bh/org-todo # f5 및 =S-f5=는 아래에 정의된 것처럼 emacs 버퍼를 좁히고 넓히는 기능을 바인딩합니다.\n이제 다음을 사용합니다.\nT (tasks) for C-c / t on the current buffer N (narrow) narrows to this task subtree U (up) narrows to the immediate parent task subtree without moving P (project) narrows to the parent project subtree without moving F (file) narrows to the current file or file of the existing restriction 의제는 조직 버퍼를 계속 넓혀서 우리가 하고 있는 일에 집중할 수 있는 편리한 방법을 제공합니다. 이렇게 하면 보기를 이 작업 하위 트리로 제한하여 조직 파일의 다른 모든 세부 정보를 일시적으로 쉽게 숨길 수 있습니다. 완료되지 않은 작업만 표시되도록 작업이 접히고 강조 표시됩니다.\nf5=(또는 =T 속도 키)를 많이 눌렀습니다. 이것은 기본적으로 org-narrow-to-subtree 및 C-c / t 조합을 수행하여 버퍼를 축소된 상태로 둡니다. S-f5=(또는 =U, W, =F=와 같은 다른 확장 속도 키)를 사용하여 일반 보기로 다시 확대합니다.\n다음 헤드라인을 강제로 표시하는 다음 설정도 있습니다. (setq org-show-entry-below (quote ((default))))\n이렇게 하면 접힌 트리 상태로 작업할 때 너무 많은 헤드라인이 함께 접히는 것을 방지할 수 있습니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 ;; 키바인딩 파트에서 이미 했다. (defun bh/org-todo (arg) (interactive \u0026#34;p\u0026#34;) (if (equal arg 4) (save-restriction (bh/narrow-to-org-subtree) (org-show-todo-tree nil)) (bh/narrow-to-org-subtree) (org-show-todo-tree nil))) (defun bh/widen () (interactive) (if (equal major-mode \u0026#39;org-agenda-mode) (progn (org-agenda-remove-restriction-lock) (when org-agenda-sticky (org-agenda-redo))) (widen))) (add-hook \u0026#39;org-agenda-mode-hook #\u0026#39;(lambda () (org-defkey org-agenda-mode-map \u0026#34;W\u0026#34; (lambda () (interactive) (setq bh/hide-scheduled-and-waiting-next-tasks t) (bh/widen)))) \u0026#39;append) ;; 18.2.2-3 절에 필요한 함수. ;; (defun bh/restrict-to-file-or-follow (arg) ;; \u0026#34;Set agenda restriction to \u0026#39;file or with argument invoke follow mode. ;; I don\u0026#39;t use follow mode very often but I restrict to file all the time ;; so change the default \u0026#39;F\u0026#39; binding in the agenda to allow both\u0026#34; ;; (interactive \u0026#34;p\u0026#34;) ;; (if (equal arg 4) ;; (org-agenda-follow-mode) ;; (widen) ;; (bh/set-agenda-restriction-lock 4) ;; (org-agenda-redo) ;; (beginning-of-buffer))) ;; (add-hook \u0026#39;org-agenda-mode-hook ;; #\u0026#39;(lambda () (org-defkey org-agenda-mode-map \u0026#34;F\u0026#34; \u0026#39;bh/restrict-to-file-or-follow)) ;; \u0026#39;append) (defun bh/narrow-to-org-subtree () (widen) (org-narrow-to-subtree) (save-restriction (org-agenda-set-restriction-lock))) (defun bh/narrow-to-subtree () (interactive) (if (equal major-mode \u0026#39;org-agenda-mode) (progn (org-with-point-at (org-get-at-bol \u0026#39;org-hd-marker) (bh/narrow-to-org-subtree)) (when org-agenda-sticky (org-agenda-redo))) (bh/narrow-to-org-subtree))) (add-hook \u0026#39;org-agenda-mode-hook #\u0026#39;(lambda () (org-defkey org-agenda-mode-map \u0026#34;N\u0026#34; \u0026#39;bh/narrow-to-subtree)) \u0026#39;append) (defun bh/narrow-up-one-org-level () (widen) (save-excursion (outline-up-heading 1 \u0026#39;invisible-ok) (bh/narrow-to-org-subtree))) (defun bh/get-pom-from-agenda-restriction-or-point () (or (and (marker-position org-agenda-restrict-begin) org-agenda-restrict-begin) (org-get-at-bol \u0026#39;org-hd-marker) (and (equal major-mode \u0026#39;org-mode) (point)) org-clock-marker)) (defun bh/narrow-up-one-level () (interactive) (if (equal major-mode \u0026#39;org-agenda-mode) (progn (org-with-point-at (bh/get-pom-from-agenda-restriction-or-point) (bh/narrow-up-one-org-level)) (org-agenda-redo)) (bh/narrow-up-one-org-level))) (add-hook \u0026#39;org-agenda-mode-hook #\u0026#39;(lambda () (org-defkey org-agenda-mode-map \u0026#34;U\u0026#34; \u0026#39;bh/narrow-up-one-level)) \u0026#39;append) (defun bh/narrow-to-org-project () (widen) (save-excursion (bh/find-project-task) (bh/narrow-to-org-subtree))) (defun bh/narrow-to-project () (interactive) (if (equal major-mode \u0026#39;org-agenda-mode) (progn (org-with-point-at (bh/get-pom-from-agenda-restriction-or-point) (bh/narrow-to-org-project) (save-excursion (bh/find-project-task) (org-agenda-set-restriction-lock))) (org-agenda-redo) (beginning-of-buffer)) (bh/narrow-to-org-project) (save-restriction (org-agenda-set-restriction-lock)))) (add-hook \u0026#39;org-agenda-mode-hook #\u0026#39;(lambda () (org-defkey org-agenda-mode-map \u0026#34;P\u0026#34; \u0026#39;bh/narrow-to-project)) \u0026#39;append) (defvar bh/project-list nil) (defun bh/view-next-project () (interactive) (let (num-project-left current-project) (unless (marker-position org-agenda-restrict-begin) (goto-char (point-min)) ; Clear all of the existing markers on the list (while bh/project-list (set-marker (pop bh/project-list) nil)) (re-search-forward \u0026#34;Tasks to Refile\u0026#34;) (forward-visible-line 1)) ; Build a new project marker list (unless bh/project-list (while (\u0026lt; (point) (point-max)) (while (and (\u0026lt; (point) (point-max)) (or (not (org-get-at-bol \u0026#39;org-hd-marker)) (org-with-point-at (org-get-at-bol \u0026#39;org-hd-marker) (or (not (bh/is-project-p)) (bh/is-project-subtree-p))))) (forward-visible-line 1)) (when (\u0026lt; (point) (point-max)) (add-to-list \u0026#39;bh/project-list (copy-marker (org-get-at-bol \u0026#39;org-hd-marker)) \u0026#39;append)) (forward-visible-line 1))) ; Pop off the first marker on the list and display (setq current-project (pop bh/project-list)) (when current-project (org-with-point-at current-project (setq bh/hide-scheduled-and-waiting-next-tasks nil) (bh/narrow-to-project)) ; Remove the marker (setq current-project nil) (org-agenda-redo) (beginning-of-buffer) (setq num-projects-left (length bh/project-list)) (if (\u0026gt; num-projects-left 0) (message \u0026#34;%s projects left to view\u0026#34; num-projects-left) (beginning-of-buffer) (setq bh/hide-scheduled-and-waiting-next-tasks t) (error \u0026#34;All projects viewed.\u0026#34;))))) (add-hook \u0026#39;org-agenda-mode-hook #\u0026#39;(lambda () (org-defkey org-agenda-mode-map \u0026#34;V\u0026#34; \u0026#39;bh/view-next-project)) \u0026#39;append) (setq org-show-entry-below (quote ((default)))) Tuning the Agenda Views # 다양한 사용자 정의는 일정 보기가 작업 세부 정보를 표시하는 방식에 영향을 미칩니다. 이 섹션에서는 내 작업 과정에서 사용하는 각 사용자 정의를 보여줍니다.\nHighlight the current agenda line # 내 .emacs 파일의 다음 코드는 현재 의제 행을 강조 표시합니다. 이렇게 하면 의제에서 발행된 명령에 의해 어떤 작업이 영향을 받을지 명확해집니다. 더 이상 실수로 잘못된 작업을 수행하지 마세요!\n1 2 3 4 5 6 7 ;; 18.3.1 Highlight the current agenda line ;; Always hilight the current agenda line (add-hook \u0026#39;org-agenda-mode-hook #\u0026#39;(lambda () (hl-line-mode 1)) \u0026#39;append) ;; custom-set-faces 에 아래 추가 ;; \u0026#39;(org-mode-line-clock ((t (:background \u0026#34;grey75\u0026#34; :foreground \u0026#34;red\u0026#34; :box (:line-width -1 :style released-button)))) t) Use the Diary for Holidays and Appointments # [2022-11-20 Sun 12:03] 22/12/21\u0026ndash;14:49 :: agenda-diary-file 사용. 캡처도 마찬가지긴 한데. 일단 이런 방식으로 써보는 것도 좋다. 하루가 일생아니겠는가?\n저는 emacs Diary 를 아무 용도로 사용하지 않지만 일정에서 휴일을 보는 것을 좋아합니다. 이렇게 하면 일하지 않아도 되는 날을 계획하는 데 도움이 됩니다.\n1 2 3 ;;; 18.3.3 Use the Diary for Holidays and Appointments (setq org-agenda-include-diary nil) ;; (setq org-agenda-diary-file \u0026#34;~/sync/org/workflow/log.org\u0026#34;) ; move to jh-org.org 다이어리 파일은 캡처 모드 \u0026lsquo;appointment\u0026rsquo; 템플릿에서 생성된 date-tree 항목을 유지합니다. 나는 인터럽트 중에도 시간을 기록하고 싶은 기타 작업에도 이것을 사용합니다.\n~/diary 파일을 더 이상 사용하지 않습니다. 그것은 Emacs 를 만족시키기 위해 길이가 0 인 파일로 존재합니다. 대신 조직 모드의 다이어리 함수를 사용합니다. emacs 아젠다에 i=가 있는 항목을 삽입하면 =~/sync/org/workflow/diary.org 파일에 날짜 항목이 생성됩니다.\n다음과 같이 내 todo.org 파일에 있는 달력의 공휴일을 포함합니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 #+FILETAGS: Personal * Appointments :PROPERTIES: :CATEGORY: Appt :ARCHIVE: %s_archive::* Appointments :END: ** Holidays :PROPERTIES: :Category: Holiday :END: %%(org-calendar-holiday) ** Some other Appointment ... 제목의 모든 시간 문자열이 의제에 표시되도록 다음 설정을 사용합니다. \u0026gt; 22/11/21\u0026ndash;17:23 :: 기본 값은 nil 인데. 일단 두자.\n1 2 ;;; 18.3.3 Use the Diary for Holidays and Appointments (setq org-agenda-insert-diary-extract-time t) ; nil Searches include archive files # I keep a single archive file for each of my org-mode project files. This allows me to search the current file and the archive when I need to dig up old information from the archives.\nI don\u0026rsquo;t need this often but it sure is handy on the occasions that I do need it.\n1 2 3 ;;; 18.3.4 Searches include archive files ;; Include agenda archive files when searching for things (setq org-agenda-text-search-extra-files (quote (agenda-archives))) Agenda view tweaks # The following agenda customizations control\ndisplay of repeating tasks display of empty dates on the agenda task sort order start the agenda weekly view with Sunday display of the grid habits at the bottom I use a custom sorting function so that my daily agenda lists tasks in order of importance. Tasks on the daily agenda are listed in the following order:\ntasks with times at the top so they are hard to miss entries for today (active timestamp headlines that are not scheduled or deadline tasks) deadlines due today late deadline tasks scheduled items for today pending deadlines (due soon) late scheduled items habits The lisp for this isn\u0026rsquo;t particularly pretty but it works.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 ;;; 18.3.5 Agenda view tweaks ;; Show all future entries for repeating tasks (setq org-agenda-repeating-timestamp-show-all t) ;; Show all agenda dates - even if they are empty (setq org-agenda-show-all-dates t) ;; Sorting order for tasks on the agenda (setq org-agenda-sorting-strategy (quote ((agenda habit-down time-up user-defined-up effort-up category-keep) (todo category-up effort-up) (tags category-up effort-up) (search category-up)))) ;; Start the weekly agenda on Monday (setq org-agenda-start-on-weekday 1) (setq org-agenda-block-separator ?─) ; not \u0026#39;-\u0026#39; (setq org-agenda-start-with-log-mode t) ;; daily if the agenda shows a single day ;; weekly if the agenda shows an entire week ;; today show grid on current date, independent of daily/weekly display ;; require-timed show grid only if at least one item has a time specification ;; remove-match skip grid times already present in an entry ;; (quote ((daily today remove-match) ; norang ;; (quote ((daily today require-timed) ; default (setq org-agenda-time-grid (quote ((daily today today) ; junghan (400 600 800 1000 1200 1400 1600 1800 2000 2200 2400) \u0026#34;......\u0026#34; \u0026#34;----------------\u0026#34;))) ;; Display tags farther right : default auto ;; 어젠다는 한 줄에 태그 까지 나타내자 (setq org-agenda-tags-column -80) ; org-tags-column 값 참고 ;; Agenda sorting functions (setq org-agenda-cmp-user-defined \u0026#39;bh/agenda-sort) (defun bh/agenda-sort (a b) \u0026#34;Sorting strategy for agenda items. Late deadlines first, then scheduled, then non-late deadlines\u0026#34; (let (result num-a num-b) (cond ;; time specific items are already sorted first by org-agenda-sorting-strategy ;; non-deadline and non-scheduled items next ((bh/agenda-sort-test \u0026#39;bh/is-not-scheduled-or-deadline a b)) ;; deadlines for today next ((bh/agenda-sort-test \u0026#39;bh/is-due-deadline a b)) ;; late deadlines next ((bh/agenda-sort-test-num \u0026#39;bh/is-late-deadline \u0026#39;\u0026gt; a b)) ;; scheduled items for today next ((bh/agenda-sort-test \u0026#39;bh/is-scheduled-today a b)) ;; late scheduled items next ((bh/agenda-sort-test-num \u0026#39;bh/is-scheduled-late \u0026#39;\u0026gt; a b)) ;; pending deadlines last ((bh/agenda-sort-test-num \u0026#39;bh/is-pending-deadline \u0026#39;\u0026lt; a b)) ;; finally default to unsorted (t (setq result nil))) result)) (defmacro bh/agenda-sort-test (fn a b) \u0026#34;Test for agenda sort\u0026#34; `(cond ;; if both match leave them unsorted ((and (apply ,fn (list ,a)) (apply ,fn (list ,b))) (setq result nil)) ;; if a matches put a first ((apply ,fn (list ,a)) (setq result -1)) ;; otherwise if b matches put b first ((apply ,fn (list ,b)) (setq result 1)) ;; if none match leave them unsorted (t nil))) (defmacro bh/agenda-sort-test-num (fn compfn a b) `(cond ((apply ,fn (list ,a)) (setq num-a (string-to-number (match-string 1 ,a))) (if (apply ,fn (list ,b)) (progn (setq num-b (string-to-number (match-string 1 ,b))) (setq result (if (apply ,compfn (list num-a num-b)) -1 1))) (setq result -1))) ((apply ,fn (list ,b)) (setq result 1)) (t nil))) (defun bh/is-not-scheduled-or-deadline (date-str) (and (not (bh/is-deadline date-str)) (not (bh/is-scheduled date-str)))) (defun bh/is-due-deadline (date-str) (string-match \u0026#34;Deadline:\u0026#34; date-str)) (defun bh/is-late-deadline (date-str) (string-match \u0026#34;\\\\([0-9]*\\\\) d\\. ago:\u0026#34; date-str)) (defun bh/is-pending-deadline (date-str) (string-match \u0026#34;In \\\\([^-]*\\\\)d\\.:\u0026#34; date-str)) (defun bh/is-deadline (date-str) (or (bh/is-due-deadline date-str) (bh/is-late-deadline date-str) (bh/is-pending-deadline date-str))) (defun bh/is-scheduled (date-str) (or (bh/is-scheduled-today date-str) (bh/is-scheduled-late date-str))) (defun bh/is-scheduled-today (date-str) (string-match \u0026#34;Scheduled:\u0026#34; date-str)) (defun bh/is-scheduled-late (date-str) (string-match \u0026#34;Sched\\.\\\\(.*\\\\)x:\u0026#34; date-str)) Sticky Agendas # [2022-11-21 Mon 17:25] 22/11/21\u0026ndash;17:27 :: org-sticky-header 랑 다른 것이다. 23/01/09\u0026ndash;14:01 :: OFF 2023-02-09 :: ON 다시 활성화 2023-03-23 :: OFF \u0026ndash; calendar 시나리오랑 겹치나 좀 거슬리네 2023-04-26 :: ON 다시 활성화\nSticky agendas allow you to have more than one agenda view created simultaneously. You can quickly switch to the view without incurring an agenda rebuild by invoking the agenda custom command key that normally generates the agenda. If it already exists it will display the existing view. g forces regeneration of the agenda view.\nI normally have two views displayed (F12 a for the daily/weekly agenda and F12 SPC for my project management view)\n1 2 ;; Use \u0026#39;t\u0026#39; sticky agenda\u0026#39;s so they persist (setq org-agenda-sticky t) ; default nil Checklist handling # 리셋 체크 박스 t 보이지? 그거해서 넣으라고.\n1 2 3 4 5 6 7 8 9 10 .* TODO Invoicing and Archive Tasks [0/7] DEADLINE: \u0026lt;2009-07-01 Wed +1m -0d\u0026gt; :PROPERTIES: :RESET_CHECK_BOXES: t :END: - [ ] Do task 1 - [ ] Do task 2 ... - [ ] Do task 7 Handling blocked tasks # 블락된 태스크는 완료가 안된 서브 태스크를 가진 태스크를 의미 한다. 어젠다에서 이러한 블락된 태스크는 그레이 폰트로 보인다. 아래의 설정은 서브 태스크가 완료가 아니면 부모 태스크가 완료 될 수 없게 한다.\n1 2 ;; 18.6 Handling blocked tasks (setq org-enforce-todo-dependencies t) 아래 설정을 꼭 봐야 한다. 프로퍼티로 NOBLOCKING, ORDERED 를 보여준다. 노블로킹은 위 설정의 예외를 가능케 한다. ORDERED 는 서브 태스크가 순서대로 완료하게 한다. 훌륭하다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 .* TODO New Repeating Task SCHEDULED: \u0026lt;2009-06-16 Tue +1w\u0026gt; :PROPERTIES: :NOBLOCKING: t :END: ... .** TODO Subtask .* TODO Some Task :PROPERTIES: :ORDERED: t :END: .** TODO Step 1 .** TODO Step 2 .** TODO Step 3 Org Task structure and presentation # 여러 세팅이 있는데, 어짜피 넘어야 할 세팅이다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 ;; 18.7.1 Controlling display of leading stars on headlines ;; Hide ~*~, ~~~ and ~/~ in org text. ;; org-indent-mode 사용하면 org-hide-leading-starts 자동 on ;; Org styling, hide markup etc. = / ~ (setq org-hide-emphasis-markers t) ; work with org-appear (setq org-hide-leading-stars t) ;; on (setq org-hide-block-startup nil) (setq org-hide-macro-markers nil) ;; 18.7.2 org-indent mode ;; startup-indent 하면 org-indent-mode 켜진다. ;; use manually -- #+STARTUP: indent or #+STARTUP: noindent ;; org-indent-mode 를 사용하면 adapt-indentation은 자동 off ;; Turn off all org auto indentation completely ;; this optiosn work with \u0026#39;org-modern-indent package\u0026#39; (setq org-startup-indented t) ; default nil ;; Turn off manual indentation completely, ;; AKA when you suddenly press TAB or = (setq org-adapt-indentation nil) ; default nil ;; 18.7.3 blank lines are evil : 아닌데?! (setq org-cycle-separator-lines 0) ;; (setq org-cycle-separator-lines 1) ; default 2 ;; (setq org-blank-before-new-entry (quote ((heading . auto) ; (heading . auto) :: default ;; (plain-list-item . auto)))) ;; 18.7.4 adding new tasks quickly without disturbing the current task content ;; t 로 설정하면, 컨텐츠 뒤에 헤딩이 붙는다. ;; Respect Content When Inserting Heading ;; Also see https://www.n16f.net/blog/org-mode-headline-tips/. (setq org-insert-heading-respect-content nil) ; default nil ;; 18.7.5 notes at the top ;; 리버스 순서가 익숙하다. (setq org-reverse-note-order t) ; default nil ;; 18.7.7 editing and special key handling ;; (setq org-special-ctrl-a/e t) ; default nil ;; (setq org-special-ctrl-k t) ; default nil ;; (setq org-yank-adjusted-subtrees t) ; default nil 18.8 - 18.32 # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 ;; 18.8 Attachments ;; (setq org-id-method (quote uuidgen)) ;; 18.9 Deadlines and Agenda visibility (setq org-deadline-warning-days 10) ; default 14 ;; 18.10 exporting tables to csv (setq org-table-export-default-format \u0026#34;orgtbl-to-csv\u0026#34;) ;; 18.11 minimize emacs frames ;; (setq org-link-frame-setup (quote ( ;; ;; (vm . vm-visit-folder) ;; (gnus . org-gnus-no-new-news) ;; (file . find-file)))) ;; 18.12 Loggin stuff (setq org-log-reschedule (quote note)) ; 왜 스케줄 바꾸었는가? (setq org-log-redeadline (quote note)) (setq org-log-done (quote time)) (setq org-log-into-drawer t) (setq org-log-state-notes-insert-after-drawers nil) ;; 18.13 limiting time spent on tasks ;; 18.14 habit tracking ;; (setq org-modules (quote ( ;; ;; org-bbdb ;; org-bibtex ;; ;; org-crypt ;; org-gnus ;; org-id ;; org-info ;; ;; org-jsinfo ;; org-habit ;; org-inlinetask ;; org-irc ;; ;; org-mew ;; ;;org-mhe ;; org-protocol ;; ;; org-rmail ;; org-eww ;; ;; org-wl ;; ;; org-w3m ;; ))) ;; (require \u0026#39;org-checklist) ; delete compile error on emacs-29 (require \u0026#39;org-habit) (setq org-habit-graph-column 50) (setq org-habit-preceding-days 9) (run-at-time \u0026#34;06:00\u0026#34; 86400 #\u0026#39;(lambda () (setq org-habit-show-habits t))) ;; more export backend support ;; (require \u0026#39;ox-md) ;; (require \u0026#39;ox-taskjuggler) ;; (add-to-list \u0026#39;org-export-backends \u0026#39;taskjuggler) ;; 18.16 auto revert mode ;; 다른데서 세팅했음 ;; (global-auto-revert-mode t) ;; 18.17 Encryption ;; (require \u0026#39;org-crypt) ;; ; Encrypt all entries before saving ;; (org-crypt-use-before-save-magic) ;; (setq org-tags-exclude-from-inheritance (quote (\u0026#34;crypt\u0026#34;))) ;; ; GPG key to use for encryption ;; (setq org-crypt-key \u0026#34;F0B66B40\u0026#34;) ;; (setq org-crypt-disable-auto-save nil) (defun bh/show-org-agenda () (interactive) (if org-agenda-sticky (switch-to-buffer \u0026#34;*Org Agenda( )*\u0026#34;) (switch-to-buffer \u0026#34;*Org Agenda*\u0026#34;)) (delete-other-windows)) ;; 18.19 org-protocol (require \u0026#39;org-protocol) ;; 18.20 require a final newline when saving files (setq require-final-newline t) ;; default t ;; 18.21 insert inactive timestamps and exclude from export (defvar bh/insert-inactive-timestamp t) (defun bh/toggle-insert-inactive-timestamp () (interactive) (setq bh/insert-inactive-timestamp (not bh/insert-inactive-timestamp)) (message \u0026#34;Heading timestamps are %s\u0026#34; (if bh/insert-inactive-timestamp \u0026#34;ON\u0026#34; \u0026#34;OFF\u0026#34;))) (defun bh/insert-inactive-timestamp () (interactive) (org-insert-time-stamp nil t t nil nil nil)) (defun bh/insert-heading-inactive-timestamp () (save-excursion (when bh/insert-inactive-timestamp (org-return) (org-cycle) (bh/insert-inactive-timestamp)))) (add-hook \u0026#39;org-insert-heading-hook \u0026#39;bh/insert-heading-inactive-timestamp \u0026#39;append) (setq org-export-with-timestamps nil) ;; 18.22 return follow links (setq org-return-follows-link t) ; 2023-06-08 \u0026#39;t\u0026#39; ;; 18.23 highlight clock when running overtime ;; custom-face -- \u0026#39;(org-mode-line-clock ((t (:foreground \u0026#34;red\u0026#34; :box (:line-width -1 :style released-button)))) t) ;; 18.24 Meeting notes (defun bh/prepare-meeting-notes () \u0026#34;Prepare meeting notes for email Take selected region and convert tabs to spaces, mark TODOs with leading \u0026gt;\u0026gt;\u0026gt;, and copy to kill ring for pasting\u0026#34; (interactive) (let (prefix) (save-excursion (save-restriction (narrow-to-region (region-beginning) (region-end)) (untabify (point-min) (point-max)) (goto-char (point-min)) (while (re-search-forward \u0026#34;^\\\\( *-\\\\\\) \\\\(TODO\\\\|DONE\\\\): \u0026#34; (point-max) t) (replace-match (concat (make-string (length (match-string 1)) ?\u0026gt;) \u0026#34; \u0026#34; (match-string 2) \u0026#34;: \u0026#34;))) (goto-char (point-min)) (kill-ring-save (point-min) (point-max)))))) ;; 18.25 remove highlights after changes (setq org-remove-highlights-with-change t) ; default t ;; 18.27 prefer future dates or not? ;; (setq org-read-date-prefer-future \u0026#39;time) ; default t ;; 18.28 automatically change list bullets ;; 23-03-25 7:06 AM Trun on (setq org-list-demote-modify-bullet \u0026#39;((\u0026#34;+\u0026#34; . \u0026#34;-\u0026#34;) (\u0026#34;-\u0026#34; . \u0026#34;+\u0026#34;) (\u0026#34;*\u0026#34; . \u0026#34;+\u0026#34;) (\u0026#34;1.\u0026#34; . \u0026#34;a.\u0026#34;))) ;; 18.29 remove indentation on agenda tags views (setq org-tags-match-list-sublevels t) ; default t ;; 18.31 agenda persistent filters (setq org-agenda-persistent-filter t) ;; 18.xx allow alphabetical bullets (setq org-list-allow-alphabetical t) ; have a. A. a) A) list bullets 18.33 - 18.42 # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 ;; 18.33 mail links open compose-mail ;; (setq org-link-mailto-program (quote (compose-mail \u0026#34;%a\u0026#34; \u0026#34;%s\u0026#34;))) ;; 18.35 use smex for M-x ido-completion ;; 뭔지 모르겠고 안쓰련다. ;; (add-to-list \u0026#39;load-path (expand-file-name \u0026#34;~/.emacs.d\u0026#34;)) ;; (require \u0026#39;smex) ;; (smex-initialize) ;; (global-set-key (kbd \u0026#34;M-x\u0026#34;) \u0026#39;smex) ;; (global-set-key (kbd \u0026#34;C-x x\u0026#34;) \u0026#39;smex) ;; (global-set-key (kbd \u0026#34;M-X\u0026#34;) \u0026#39;smex-major-mode-commands) ;; 18.36 use emacs bookmarks for fast navigation ;; 검토해보라. 이거 아니여도 이미 잘 되어있는지 ;; (global-set-key (kbd \u0026#34;\u0026lt;C-f6\u0026gt;\u0026#34;) \u0026#39;(lambda () (interactive) (bookmark-set \u0026#34;SAVED\u0026#34;))) ;; (global-set-key (kbd \u0026#34;\u0026lt;f6\u0026gt;\u0026#34;) \u0026#39;(lambda () (interactive) (bookmark-jump \u0026#34;SAVED\u0026#34;))) ;; 18.37 using org-mime to email ;; (require \u0026#39;org-mime) ;; 18.38 remove multiple state change log details from the agenda ;; 뭐라는거냐? (setq org-agenda-skip-additional-timestamps-same-entry t) ;; 18.39 drop old style references in tables (setq org-table-use-standard-references (quote from)) ;;; 18.40 use system settings for file-application selection ;; (setq org-file-apps (quote ((auto-mode . emacs) ;; (\u0026#34;\\\\.mm\\\\\u0026#39;\u0026#34; . system) ;; (\u0026#34;\\\\.x?html?\\\\\u0026#39;\u0026#34; . system) ;; (\u0026#34;\\\\.pdf\\\\\u0026#39;\u0026#34; . system)))) ;; to get org-ref and org-pdftools to use pdf-tools to open up a pdf link ;; (add-to-list \u0026#39;org-file-apps \u0026#39;(\u0026#34;\\\\.pdf\\\\\u0026#39;\u0026#34; . EMACS)) ;;; 18.41 use the current window for the agenda ;; current-window Show agenda in the current window, keeping all other windows. ;; other-window Use switch-to-buffer-other-window to display agenda. ;; only-window Show agenda, deleting all other windows. ;; reorganize-frame Show only two windows on the current frame, the current ;; window and the agenda. ;; other-frame Use switch-to-buffer-other-frame to display agenda. ;; Also, when exiting the agenda, kill that frame. ;; other-tab Use switch-to-buffer-other-tab to display the ;; agenda, making use of the tab-bar-mode introduced ;; in Emacs version 27.1. Also, kill that tab when ;; exiting the agenda view. (setq org-agenda-window-setup \u0026#39;current-window) ;; Show src buffer in popup, and don\u0026#39;t monopolize the frame (setq org-src-window-setup \u0026#39;other-window) ;;; 18.42 delete ids when cloning (setq org-clone-delete-id t) 18.43 - 18.47 # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 ;; 18.43 cycling plain lists (setq org-cycle-include-plain-lists t) ;; 18.44 showing source block syntax hiighlighting ;; 22/10/11--22:18 :: headline 설정 좋다. ;; fontify가 정확히 무엇인가? 테마가 하는대로 따라가는 것이 좋은 듯. (setq org-fontify-todo-headline nil) (setq org-fontify-done-headline nil) ;; (setq org-fontify-whole-block-delimiter-line nil) ; for modus-themes (setq org-fontify-quote-and-verse-blocks t) ;; 18.46 NEXT is for tasks not projects ;; 이건 따로 챙겨주라. (defun bh/mark-next-parent-tasks-todo () \u0026#34;Visit each parent task and change NEXT states to TODO\u0026#34; (let ((mystate (or (and (fboundp \u0026#39;org-state) state) (nth 2 (org-heading-components))))) (when mystate (save-excursion (while (org-up-heading-safe) (when (member (nth 2 (org-heading-components)) (list \u0026#34;NEXT\u0026#34;)) (org-todo \u0026#34;TODO\u0026#34;))))))) (add-hook \u0026#39;org-after-todo-state-change-hook \u0026#39;bh/mark-next-parent-tasks-todo \u0026#39;append) (add-hook \u0026#39;org-clock-in-hook \u0026#39;bh/mark-next-parent-tasks-todo \u0026#39;append) ;; 18.47 startup in foled view ;; fold / overview - collapse everything, show only level 1 headlines ;; content - show only headlines ;; nofold / showall - expand all headlines except the ones with :archive: ;; tag and property drawers ;; showeverything - same as above but without exceptions (setq org-startup-folded \u0026#39;content) 18.49 Diable keys # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ;; Disable keys in org-mode ;; C-c [ ;; C-c ] ;; C-c ; ;; C-c C-x C-q cancelling the clock (we never want this) (add-hook \u0026#39;org-mode-hook #\u0026#39;(lambda () ;; Undefine C-c [ and C-c ] since this breaks my ;; org-agenda files when directories are include It ;; expands the files in the directories individually (org-defkey org-mode-map \u0026#34;\\C-c[\u0026#34; \u0026#39;undefined) (org-defkey org-mode-map \u0026#34;\\C-c]\u0026#34; \u0026#39;undefined) (org-defkey org-mode-map \u0026#34;\\C-c;\u0026#34; \u0026#39;undefined) (org-defkey org-mode-map \u0026#34;\\C-c\\C-x\\C-q\u0026#34; \u0026#39;undefined)) \u0026#39;append) Junghanacs Customization # NEW Turn-off shift-select-mode # 1 2 3 ;; 코지를 보면 이맥서는 사용하지 않는다고 적어 놨더군. 따라간다. (setq org-support-shift-select nil) (setq shift-select-mode nil) NEW org-pretty-entities # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 ;; 왜 minemacs 는 org-pretty 설정을 둘다 t 로 했을까? org-pretty-entities 가 ;; 설정되면 abc_def 에서 def가 아래로 기어 들어간다. (setq org-pretty-entities nil) ; very important ;; orgmode 익스포트 할 때, underscore가 subscripts 변환 방지 ;; http://ohyecloudy.com/emacsian/2019/01/12/org-export-with-sub-superscripts/ (setq org-pretty-entities-include-sub-superscripts nil) ;;; Replace two consecutive hyphens with the em-dash ;; Unicode Character “☐” (U+2610) Todo ;; Unicode Character “◩” (U+25E9) Doing / Next ;; Unicode Character “☒” (U+2612) Done ;; Unicode Character “▣” (U+25A3) Held ;; and customize org-mode\u0026#39;s checkboxes with unicode symbols (add-hook \u0026#39;org-mode-hook (lambda () \u0026#34;Beautify Org em-dash and checkbox Symbol\u0026#34; (push \u0026#39;(\u0026#34;--\u0026#34; . \u0026#34;—\u0026#34;) prettify-symbols-alist) (push \u0026#39;(\u0026#34;[ ]\u0026#34; . \u0026#34;☐\u0026#34;) prettify-symbols-alist) ; A task that needs doing (push \u0026#39;(\u0026#34;[-]\u0026#34; . \u0026#34;◩\u0026#34;) prettify-symbols-alist) ; Task is in progress (push \u0026#39;(\u0026#34;[X]\u0026#34; . \u0026#34;☒\u0026#34;) prettify-symbols-alist) ; Task was completed (push \u0026#39;(\u0026#34;[?]\u0026#34; . \u0026#34;▣\u0026#34;) prettify-symbols-alist) ; Task is being held up or paused (prettify-symbols-mode))) NEW org-ellipsis, imenu-depth, capture-bookmark # 1 2 3 4 5 6 ;; Search on https://www.compart.com/en/unicode/U+25BF ;; Unicode Character “◉” (U+25C9) ;; Unicode Character “▾” (U+25BE) (setq org-ellipsis \u0026#34; ▾\u0026#34;) (setq org-imenu-depth 4) ; default 2 (setq org-capture-bookmark nil) NEW org-element-cache # 1 2 3 4 5 6 ;;; Disable \u0026#39;org-element-cache\u0026#39; ;; The new org-data element provides properties from top-level property drawer, ;; buffer-global category, and :path property containing file path for file Org buffers. (setq org-element-use-cache nil) ; default t ;; Element cache persists across Emacs sessions (setq org-element-cache-persistent nil) ; default t NEW org-mouse-1-follows-link # 1 2 ;; nil 이면 C-c C-o 으로 접근한다. (setq org-mouse-1-follows-link t) Org-mode HOOK # 모아둬야 쓰기 쉽다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ;; The Hooks! Might be faster to set this as separate hooks instead of one big function ;; Make ~SPC ,~ work, reference: ;; https://stackoverflow.com/a/24173780 ;; (setcar (nthcdr 2 org-emphasis-regexp-components) \u0026#34; \\t\\n\u0026#34;) (add-hook \u0026#39;org-mode-hook (lambda () (setq-local org-emphasis-alist \u0026#39;((\u0026#34;*\u0026#34; bold) (\u0026#34;/\u0026#34; italic) (\u0026#34;_\u0026#34; underline) (\u0026#34;=\u0026#34; org-verbatim verbatim) (\u0026#34;~\u0026#34; org-kbd) (\u0026#34;+\u0026#34; (:strike-through t)))) )) (add-hook \u0026#39;org-mode-hook \u0026#39;visual-line-mode) (add-hook \u0026#39;org-mode-hook \u0026#39;auto-fill-mode) ;; 2023-04-16 re-enable (add-hook \u0026#39;org-mode-hook \u0026#39;org-indent-mode) (add-hook \u0026#39;org-capture-mode-hook #\u0026#39;evil-insert-state) (add-hook \u0026#39;org-capture-after-finalize-hook #\u0026#39;evil-normal-state) Tunning and Overide # Spacemacs 와 workflow 일부 수정.\nSpacemacs configuration Korean/Hangul configuration My custom options Test options 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 ;; orgid 파일의 위치 설정 ;; (setq org-id-locations-file (concat dotspacemacs-directory \u0026#34;.orgid\u0026#34;)) ;; (setq org-directory \u0026#34;~/sync/org/\u0026#34;) ;; (setq org-note-directory (concat org-directory \u0026#34;roam/\u0026#34;) ;; org-inbox-file (concat org-directory \u0026#34;workflow/refile.org\u0026#34;) ; inbox.org ;; org-log-file (concat org-directory \u0026#34;log.org\u0026#34;) ;; org-project-file (concat org-directory \u0026#34;workflow/Project.org\u0026#34;) ;; org-default-notes-file org-inbox-file) ;; 22/10/12--15:49 :: 멀티 바이트 강조 ;; https://github.com/clockoon/my-emacs-setting/blob/master/config.org ;; org-mode는 기본적으로 강조문(굵게, 이탤릭 등)을 하나의 단어에 ;; 대해서만 적용하도록 하고 있습니다. 예컨대 *이렇게*는 굵게 글씨를 ;; 쓸 수 없습니다. 조사가 들어가는 한중일 언어에 쓰기에는 부적절한 ;; 정책입니다. 따라서 강조문자 양 옆에 (알파벳이 아닌) 멀티바이트 ;; 문자가 오더라도 작동하도록 설정을 변경합니다(물론 이는 완전한 ;; 해결책은 아니며, 더 합리적인 방법에 대해서는 고민이 필요합니다. (setcar org-emphasis-regexp-components \u0026#34; \\t(\u0026#39;\\\u0026#34;{[:multibyte:]\u0026#34;) (setcar (nthcdr 1 org-emphasis-regexp-components) \u0026#34;[:multibyte:]- \\t.,:!?;\u0026#39;\\\u0026#34;)}\\\\\u0026#34;) (org-set-emph-re \u0026#39;org-emphasis-regexp-components org-emphasis-regexp-components) ;; remove spacemac\u0026#39;s hook (remove-hook \u0026#39;org-mode-hook \u0026#39;dotspacemacs//prettify-spacemacs-docs) (remove-hook \u0026#39;org-capture-mode-hook \u0026#39;spacemacs//org-capture-start) (advice-add \u0026#39;org-refile :after \u0026#39;org-save-all-org-buffers) (advice-add \u0026#39;org-archive :after \u0026#39;org-save-all-org-buffers) (add-hook \u0026#39;org-capture-after-finalize-hook \u0026#39;org-save-all-org-buffers) ;;; Disable org-appear for terminal-mode ;; \u0026#39;always\u0026#39; means that elements are toggled every time they are under the cursor. ;; \u0026#39;manual\u0026#39; means that toggling starts on call to org-appear-manual-start ;; \u0026#39;on-change\u0026#39; means that elements are toggled only when the buffer is modified ;; or when the element under the cursor is clicked with a mouse. ;; (setq org-appear-trigger \u0026#39;on-change) ; \u0026#39;manual ;; (setq org-appear-autolinks nil) END post-init-org donotmove # 1 ) "},{"id":20,"href":"/configs/emacs/jh-pkm/","title":"jh-pkm layer","section":"menu/Dotfiles/dot-emacs","content":" PKM (Personal Knowledge Manager) Goals # org-roam 기반 제텔카스텐 지신 관리 시스템. 워크플로우와 나누어서 지식 관리 측면 만 다룬다. 같은 Org 모드를 사용하기에 섞어서 사용하기 쉽다. 그렇게 하면 꼬인다.\nLayer # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (configuration-layer/declare-layer-dependencies \u0026#39;( deft )) Packages # Packages # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (defconst jh-pkm-packages \u0026#39;( org-roam deft citar-org-roam consult-org-roam ;; (delve :location (recipe :fetcher github ;; :repo \u0026#34;publicimageltd/delve\u0026#34; ;; :files (\u0026#34;*.el\u0026#34; \u0026#34;*.org\u0026#34;))) ;; (triples :location (recipe :fetcher github :branch \u0026#34;main\u0026#34; ;; :repo \u0026#34;ahyatt/triples\u0026#34; ;; :files (\u0026#34;*.el\u0026#34; \u0026#34;*.org\u0026#34;))) ;; (ekg :location (recipe :fetcher github :branch \u0026#34;main\u0026#34; ;; :repo \u0026#34;ahyatt/ekg\u0026#34; ;; :files (\u0026#34;*.el\u0026#34; \u0026#34;*.org\u0026#34; \u0026#34;doc/*.*\u0026#34;))) ; emacs knowledge graph )) deft browser # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ;; deft layer configuration ;; https://github.com/jrblevin/deft (defun jh-pkm/post-init-deft () (global-set-key (kbd \u0026#34;C-x D\u0026#34;) \u0026#39;deft-find-file) ;; (global-set-key (kbd \u0026#34;\u0026lt;f2\u0026gt;\u0026#34;) \u0026#39;spacemacs/deft) (setq deft-directory (file-truename (concat org-directory \u0026#34;/logseq/\u0026#34;))) ;; (setq deft-directory \u0026#34;~/sync/org/\u0026#34;) (setq deft-recursive t) ;; auto-safe 를 꺼야 지겹게 저장 안된다. 아니면 시간을 넉넉하게 잡던가 ;; 기본은 1초였다. 이게 말이되나! 0은 끄는 것! (setq deft-auto-save-interval 0) ;; must turn off auto-safe!! ;; (setq deft-file-naming-rules \u0026#39;((noslash . \u0026#34;_\u0026#34;))) ;; (nospace . \u0026#34;-\u0026#34;) ;; (case-fn . downcase)) (setq deft-extensions \u0026#39;(\u0026#34;org\u0026#34; \u0026#34;md\u0026#34;)) (setq deft-use-filter-string-for-filename t) (setq deft-org-mode-title-prefix t) (setq deft-recursive-ignore-dir-regexp (regexp-opt \u0026#39;(\u0026#34;.\u0026#34; \u0026#34;..\u0026#34; \u0026#34;attic\u0026#34;))) (setq deft-use-filename-as-title t) (setq deft-strip-summary-regexp (concat \u0026#34;\\\\(\u0026#34; \u0026#34;[\\n\\t]\u0026#34; ;; blank \u0026#34;\\\\|^#\\\\+[[:upper:]_]+:.*$\u0026#34; ;; org-mode metadata \u0026#34;\\\\|^#\\\\+[[:alnum:]_]+:.*$\u0026#34; ;; org-mode metadata \u0026#34;\\\\)\u0026#34;)) ;; (setq-default deft-strip-summary-regexp \u0026#34;:PROPERTIES:\\n\\\\(.+\\n\\\\)+:END:\\n\u0026#34; ;; deft-use-filename-as-title t) ) Citar-org-roam # [2023-03-24 Fri 15:25] The citar-open-notes and citar-open commands will work as normal, but will use org-roam to open notes. To define a sub-file node as a bibliographic note (ref node), use citar-org-roam-ref-add to add the ROAM_REF to the node at point. Beyond that, the only interactive command this package provides is: citar-org-roam-cited: presents a list of notes that cite the selected references\n1 2 (defun jh-pkm/init-citar-org-roam () (use-package citar-org-roam :after citar)) Custom Org-roam # Start Configuration donotmove # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ;;;; Org-roam (defun jh-pkm/post-init-org-roam () (when (\u0026gt; emacs-major-version 28) ; Emacs-29 use builtin pkgs (setq org-roam-database-connector \u0026#39;sqlite-builtin)) ;; (setq org-roam-ui-open-on-start nil) ; default t (setq org-roam-index-file (concat org-roam-directory \u0026#34;index.org\u0026#34;)) (org-roam-db-autosync-mode +1) ;; (setq org-hugo-base-dir (file-truename \u0026#34;~/git/blog/\u0026#34;)) (setq org-hugo-base-dir blog-admin-dir) (setq org-roam-db-gc-threshold most-positive-fixnum) (setq org-roam-v2-ack t) ;; (setq org-roam-mode-sections ;; (list #\u0026#39;org-roam-backlinks-section ;; #\u0026#39;org-roam-reflinks-section ;; #\u0026#39;org-roam-unlinked-references-section)) (setq org-roam-mode-sections \u0026#39;((org-roam-backlinks-section :unique t) org-roam-reflinks-section)) ;; 켜지면 입력 할 때 계속 Completion 리스트가 나타난다. 수동으로 하자. (setq org-roam-completion-everywhere nil) Org-roam-node-type # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 ;; https://jethrokuan.github.io/org-roam-guide/ ;; (cl-defmethod org-roam-node-type ((node org-roam-node)) ;; \u0026#34;Return the TYPE of NODE.\u0026#34; ;; (condition-case nil ;; (file-name-nondirectory ;; (directory-file-name ;; (file-name-directory ;; (file-relative-name (org-roam-node-file node) org-roam-directory)))) ;; (error \u0026#34;\u0026#34;))) ;; 모든 새로운 제텔에는 Draft 를 붙인다. HUGO_DRAFT 가 있는데 이게 ;; 어떻게 활용 될 수 있나? 이미 보낸 글도 수정 할 수 있으니까 ;; 그때는 draft 라고 하는게 맞겠다. (defun jethro/tag-new-node-as-draft () (org-roam-tag-add \u0026#39;(\u0026#34;draft\u0026#34;))) (add-hook \u0026#39;org-roam-capture-new-node-hook #\u0026#39;jethro/tag-new-node-as-draft) (setq org-roam-node-display-template (concat (propertize \u0026#34;${directories:10} \u0026#34; \u0026#39;face \u0026#39;org-checkbox) (propertize \u0026#34;${hierarchy:80} \u0026#34; \u0026#39;face \u0026#39;org-roam-title) (propertize \u0026#34;${backlinkscount:5} \u0026#34; \u0026#39;face \u0026#39;org-formula) (propertize \u0026#34;${tags:40}\u0026#34; \u0026#39;face \u0026#39;org-tag)) org-roam-node-annotation-function (lambda (node) (marginalia--time (org-roam-node-file-mtime node)))) ;; https://github.com/org-roam/org-roam/wiki/User-contributed-Tricks#showing-node-hierarchy (cl-defmethod org-roam-node-hierarchy ((node org-roam-node)) (let ((level (org-roam-node-level node))) (concat (when (\u0026gt; level 0) (concat (org-roam-node-file-title node) \u0026#34; \u0026gt; \u0026#34;)) (when (\u0026gt; level 1) (concat (string-join (org-roam-node-olp node) \u0026#34; \u0026gt; \u0026#34;) \u0026#34; \u0026gt; \u0026#34;)) (org-roam-node-title node)))) (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \u0026#34;(%s)\u0026#34; (car (split-string dirs \u0026#34;/\u0026#34;))) \u0026#34;\u0026#34;)) (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \u0026#34;id\u0026#34;)] (org-roam-node-id node))))) (format \u0026#34;[%d]\u0026#34; count))) (defun org-roam-open-refs () \u0026#34;Open REFs of the node at point.\u0026#34; (interactive) (save-excursion (goto-char (org-roam-node-point (org-roam-node-at-point \u0026#39;assert))) (when-let* ((p (org-entry-get (point) \u0026#34;ROAM_REFS\u0026#34;)) (refs (when p (split-string-and-unquote p))) (refs (if (length\u0026gt; refs 1) (completing-read-multiple \u0026#34;Open: \u0026#34; refs) refs)) (user-error \u0026#34;No ROAM_REFS found\u0026#34;)) (when-let ((oc-cites (seq-map (lambda (ref) (substring ref 1)) (seq-filter (apply-partially #\u0026#39;string-prefix-p \u0026#34;@\u0026#34;) refs)))) (citar-run-default-action oc-cites)) (dolist (ref refs) (unless (string-prefix-p \u0026#34;@\u0026#34; ref) (browse-url ref)))))) (defun force-org-rebuild-cache () \u0026#34;Rebuild the `org-mode\u0026#39; and `org-roam\u0026#39; cache.\u0026#34; (interactive) (org-id-update-id-locations) (org-roam-db-sync) (org-roam-update-org-id-locations)) Embark-org-roam # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 (with-eval-after-load \u0026#39;embark (defun org-roam-backlinks-query (node) \u0026#34;Gets the backlinks of NODE with `org-roam-db-query\u0026#39;.\u0026#34; (org-roam-db-query [:select [source dest] :from links :where (= dest $s1) :and (= type \u0026#34;id\u0026#34;)] (org-roam-node-id node))) (defun org-roam-backlinks-p (source node) \u0026#34;Predicate function that checks if NODE is a backlink of SOURCE.\u0026#34; (let* ((source-id (org-roam-node-id source)) (backlinks (org-roam-backlinks-query source)) (id (org-roam-node-id node)) (id-list (list id source-id))) (member id-list backlinks))) (defun org-roam-backlinks--read-node-backlinks (source) \u0026#34;Runs `org-roam-node-read\u0026#39; on the backlinks of SOURCE. The predicate used as `org-roam-node-read\u0026#39;\u0026#39;s filter-fn is `org-roam-backlinks-p\u0026#39;.\u0026#34; (org-roam-node-read nil (apply-partially #\u0026#39;org-roam-backlinks-p source))) (defun org-roam-backlinks-node-read (entry) \u0026#34;Read a NODE and run `org-roam-backlinks--read-node-backlinks\u0026#39;.\u0026#34; (let* ((node (get-text-property 0 \u0026#39;node entry)) (backlink (org-roam-backlinks--read-node-backlinks node))) (find-file (org-roam-node-file backlink)))) (defvar-keymap embark-org-roam-map :doc \u0026#34;Keymap for Embark org roam node actions.\u0026#34; :parent embark-general-map \u0026#34;i\u0026#34; #\u0026#39;org-roam-node-insert \u0026#34;b\u0026#34; #\u0026#39;org-roam-backlinks-node-read \u0026#34;r\u0026#34; #\u0026#39;org-roam-node-random ) (add-to-list \u0026#39;embark-keymap-alist \u0026#39;(org-roam-node . embark-org-roam-map))) tag and filter search # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 (defun my/org-roam-get-all-tags () \u0026#34;Save all roam tags to a buffer visting the file ~/Test.\u0026#34; (interactive) (with-current-buffer (get-buffer-create \u0026#34;*Tags*\u0026#34;) (erase-buffer) (mapc #\u0026#39;(lambda (n) (insert (car n) \u0026#34;\\n\u0026#34;)) (org-roam-db-query [:select :distinct [tag] :from tags ])) (pop-to-buffer (current-buffer)))) (defun my/roam-tag-filter (tag) \u0026#34;Return function that filters based on TAG.\u0026#34; (lambda (n) (member tag (org-roam-node-tags n)))) ;; To be used in `org-roam-dailies-capture-template\u0026#39;. (defun my/problem-org-output () \u0026#34;Return org structure for each org-roam problem.\u0026#34; (mapconcat (lambda (node) (format \u0026#34;- [[id:%s][%s]]: \u0026#34; (org-roam-node-id node) (org-roam-node-title node))) (-filter (my/roam-tag-filter \u0026#34;problem\u0026#34;) (org-roam-node-list)) \u0026#34;\\n\u0026#34;)) ;; Set up a new link type for org (require \u0026#39;ol) (org-link-set-parameters \u0026#34;roam\u0026#34; :follow #\u0026#39;my/org-roam-open-link :store #\u0026#39;my/org-roam-store-link) (defun my/org-roam-open-link (id _) \u0026#34;Visit the org-roam page TITLE.\u0026#34; (org-roam-node-visit (org-roam-node-from-id id))) (defun my/org-roam-store-link () (when (org-roam-buffer-p) (let ((node (org-roam-node-at-point))) (org-link-store-props :type \u0026#34;roam\u0026#34; :link (format \u0026#34;roam:%s\u0026#34; (org-roam-node-id node)) :description (org-roam-node-title node))))) (defun my/org-roam-tag-search () (interactive) (let ((org-roam-node-display-template \u0026#34;${tags:25} ${title}\u0026#34;)) (org-roam-node-open (org-roam-node-read nil nil nil t \u0026#34;Tag: \u0026#34;)))) (defun my/org-roam-complete-tag (tag) (org-roam-node-open (org-roam-node-read nil (lambda (n) (member tag (org-roam-node-tags n))) nil t (concat (s-upcase tag) \u0026#34;: \u0026#34;)))) ;; term (defun my/org-roam-node-find-terms () (interactive) (my/org-roam-complete-tag \u0026#34;terms\u0026#34;)) ;; main (defun my/org-roam-node-find-notes () (interactive) (my/org-roam-complete-tag \u0026#34;notes\u0026#34;)) ;; reference (defun my/org-roam-node-find-references () (interactive) (my/org-roam-complete-tag \u0026#34;references\u0026#34;)) ;; article (defun my/org-roam-node-find-articles () (interactive) (my/org-roam-complete-tag \u0026#34;articles\u0026#34;)) ;; person (defun my/org-roam-node-find-person () (interactive) (my/org-roam-complete-tag \u0026#34;person\u0026#34;)) Filter org-roam-node-find by subdirectories # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 (defun my/org-roam-find-posts-dir () (interactive) (my/org-roam-node-find-in-selected-dirs (list \u0026#34;posts\u0026#34; ))) (defun my/org-roam-find-terms-dir () (interactive) (my/org-roam-node-find-in-selected-dirs (list \u0026#34;terms\u0026#34; ))) (defun my/org-roam-find-notes-dir () (interactive) (my/org-roam-node-find-in-selected-dirs (list \u0026#34;notes\u0026#34; ))) (defun my/org-roam-find-refs-dir () (interactive) (my/org-roam-node-find-in-selected-dirs (list \u0026#34;refs\u0026#34; ))) (defun my/org-roam-find-configs-dir () (interactive) (my/org-roam-node-find-in-selected-dirs (list \u0026#34;configs\u0026#34; ))) (defun my/org-roam-find-in-only-subset () (interactive) (my/org-roam-node-find-in-selected-dirs (list \u0026#34;posts\u0026#34; \u0026#34;terms\u0026#34; \u0026#34;notes\u0026#34;))) (defun my/org-roam-find-except-daily () (interactive) (my/org-roam-node-find-in-selected-dirs (list \u0026#34;terms\u0026#34;) \u0026#39;EXCLUDE)) ;; you can pass t instead of \u0026#39;EXCLUDE ;; Below is an adjusted version of the main command to achieve the preset functions like those above (defun my/org-roam-node-find-in-selected-dirs (\u0026amp;optional dirs exclude) \u0026#34;Show list of `org-roam-node-find\u0026#39; only in selected directories. You will get a completion in minibuffer to choose one or more directories from a pre-defined candidate list. Optionally You can pass EXCLUDE to exclude files in the selected directories with using `universal-argument\u0026#39; (\\\\[universal-argument]). Optionally in Elisp, you can pass DIRS, a list of directories. In this case, you do not get the completion in minibuffer. This command assumes that the subdirectories in the list are relative to `org-roam-directory`. Directly change the list in the program.\u0026#34; (interactive) (let* ((exclude (or exclude current-prefix-arg)) (dirs-selected (if dirs dirs (completing-read-multiple \u0026#34;Select dir(s): \u0026#34; (list \u0026#34;notes\u0026#34; \u0026#34;posts\u0026#34; \u0026#34;refs\u0026#34;)))) (abs-dir-names (mapcar (lambda (dir) (expand-file-name dir org-roam-directory)) dirs-selected))) (org-roam-node-find nil nil (lambda (node) (let ((file (org-roam-node-file node)) (result nil)) (dolist (dir abs-dir-names result) ;; Ensure to do all the dirs in ;; abs-dir-names, but once result is t, ;; don\u0026#39;t override it. (unless result ;; `file-in-directory-p\u0026#39; seems work to when the file is ;; directly under the directory. It returns nil when the ;; file is a farther descendant. `string-prefix-p\u0026#39; can be ;; used instead if both dir and file are absolute file ;; names, and see if file is a farther descendant of dir (setq result (string-prefix-p dir file)))) ;; When exclude, the result needs to be reversed: t-\u0026gt;nil, ;; nil-\u0026gt;t Note `not\u0026#39; is not suitable because nil returns nil. (when exclude (if result (setq result nil) (setq result t))) result))))) Org-roam-capture-templates # 캡처 정책을 어떻게 가져갈 것인가? 이런게 정말 어려운 문제다.\nHow I Take Notes with Org-roam 이 글에 중요한 핵심이 있다. 제텔카스텐 이야기다. 아. 이 친구 이야기에 놀랍다. 이게 모든 기능이 다 있다고 해서 좋은게 아니다. 가볍게 쓰고 핵심에 다가서는게 가장 중요하다는 말이다. 이거 내가 사용하는 시스템도 무슨 의미인가 깔끔하게 정돈이 안되어 있다. 이게 문제다. 저널은 사실 없어야 한다. 단일 파일로 관리하고 어젠다에 집중해야 한다. 이 글 마저도 분산되어 있어서 뭘 봐야 할지 모르게된다.\n캡처 코드는 아래와 같다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 ;;;;; org-roam-capture-templates (setq org-roam-capture-templates \u0026#39;( (\u0026#34;t\u0026#34; \u0026#34;terms\u0026#34; plain \u0026#34;%?\u0026#34; :if-new (file+head \u0026#34;terms/${slug}.org\u0026#34; \u0026#34;#+title: ${title}\\n#+DATE: %T\\n#+Time-stamp: \u0026lt;\u0026gt;\\n#+filetags: :terms:\\n\\n\u0026#34;) :immediate-finish t :unnarrowed t) (\u0026#34;n\u0026#34; \u0026#34;notes\u0026#34; plain \u0026#34;%?\u0026#34; :if-new (file+head \u0026#34;notes/${slug}.org\u0026#34; \u0026#34;#+title: ${title}\\n#+DATE: %T\\n#+Time-stamp: \u0026lt;\u0026gt;\\n#+filetags: 🎶\\n\\n\u0026#34;) :immediate-finish t :unnarrowed t) (\u0026#34;a\u0026#34; \u0026#34;articles\u0026#34; plain \u0026#34;%?\u0026#34; :if-new (file+head \u0026#34;posts/${slug}.org\u0026#34; \u0026#34;#+title: ${title}\\n#+DATE: %T\\n#+Time-stamp: \u0026lt;\u0026gt;\\n#+filetags: :articles:\\n\\n\u0026#34;) :immediate-finish t :unnarrowed t) )) ;; (\u0026#34;r\u0026#34; \u0026#34;reference\u0026#34; plain \u0026#34;%?\u0026#34; ;; :if-new ;; (file+head \u0026#34;notes/${slug}.org\u0026#34; ;; \u0026#34;#+title: ${title}\\n#+DATE: %T\\n#+filetags: :reference:\\n\\n\u0026#34;) ;; :immediate-finish t ;; :unnarrowed t) Org roam hacks for better productivity # https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/\n위 글과 영상을 보면 다 필요할 것 같다. 있으면 좋을까? 그게 아니더라.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 (defun org-roam-node-insert-immediate (arg \u0026amp;rest args) (interactive \u0026#34;P\u0026#34;) (let ((args (push arg args)) (org-roam-capture-templates (list (append (car org-roam-capture-templates) \u0026#39;(:immediate-finish t))))) (apply #\u0026#39;org-roam-node-insert args))) (defun my/org-roam-filter-by-tag (tag-name) (lambda (node) (member tag-name (org-roam-node-tags node)))) (defun my/org-roam-list-notes-by-tag (tag-name) (mapcar #\u0026#39;org-roam-node-file (seq-filter (my/org-roam-filter-by-tag tag-name) (org-roam-node-list)))) Citation and Bibliography management # Enable citar-org-roam\n1 2 3 4 (require \u0026#39;citar-org-roam) (setq citar-org-roam-subdir \u0026#34;refs\u0026#34;) ;; enable citar-org-roam (citar-org-roam-mode 1) citar-org-roam\u0026ndash;create-capture-note\n결국 이렇게 정착했다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 ;; (require \u0026#39;bibtex) ;; citar-org-roam only offers the citar-org-roam-note-title-template variable ;; for customizing the contents of a new note and no way to specify a custom ;; capture template. And the title template uses citar\u0026#39;s own format, which means ;; we can\u0026#39;t run arbitrary functions in it. ;; ;; Left with no other options, we override the ;; citar-org-roam--create-capture-note function and use our own template in it. (defun dh/citar-org-roam--create-capture-note (citekey entry) \u0026#34;Open or create org-roam node for CITEKEY and ENTRY.\u0026#34; ;; adapted from https://jethrokuan.github.io/org-roam-guide/#orgc48eb0d (let ((title (citar-format--entry citar-org-roam-note-title-template entry))) (org-roam-capture- :templates \u0026#39;((\u0026#34;r\u0026#34; \u0026#34;references\u0026#34; plain \u0026#34;%?\u0026#34; :if-new (file+head \u0026#34;%(concat (when citar-org-roam-subdir (concat citar-org-roam-subdir \\\u0026#34;/\\\u0026#34;)) \\\u0026#34;${citekey}.org\\\u0026#34;)\u0026#34; \u0026#34;#+title: ${title}\\n#+date: %T\\n#+Time-stamp: \u0026lt;\u0026gt;\\n#+filetags: :references:\\n\\n\u0026#34;) :immediate-finish t :unnarrowed t)) :info (list :citekey citekey) :node (org-roam-node-create :title title) :props \u0026#39;(:finalize find-file)) (org-roam-ref-add (concat \u0026#34;@\u0026#34; citekey)))) (advice-add #\u0026#39;citar-org-roam--create-capture-note :override #\u0026#39;dh/citar-org-roam--create-capture-note) (defun dh/org-cite-export-bibliography-advice (fn keyword _ info) (if (org-cite-list-keys info) (funcall fn keyword nil info))) ;; The CSL style we use causes an error when trying to export an empty bibliography. Wrap the relevant function to ;; prevent that from happening. (advice-add #\u0026#39;org-cite-export-bibliography :around #\u0026#39;dh/org-cite-export-bibliography-advice) Private Draft and Noexport management # org-hugo-link with org-link-advice and org-link-by-id\nnoexport 태그를 헤딩에 넣으면 해당 헤딩은 md 로 출력하지 않는다. 즉 해당 글은 완전히 공개 되지 않는 것이다.\n:PRIVATE: 를 프로퍼티 넣으면 링크 연결을 제거한다. 파일은 md 로 변환 되었기 때문에 사실 의미가 없다.\n:EXPORT_FILE_NAME: excluded-post 는 파일 전체를 Export 하지 않는다. 이건 문제가 될 수 있다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 (defun dh/org-link-advice (fn link desc \u0026amp;rest rest) (if (string= \u0026#34;id\u0026#34; (org-element-property :type link)) (dh/org-link-by-id fn link desc rest) (apply fn link desc rest))) (defun dh/org-link-by-id (fn link desc rest) (let ((node (org-roam-node-from-id (org-element-property :path link))) (protocols \u0026#39;(\u0026#34;http://\u0026#34; \u0026#34;https://\u0026#34; \u0026#34;ftp://\u0026#34;))) (if (assoc-string \u0026#34;PRIVATE\u0026#34; (org-roam-node-properties node)) ;; The linked-to note is private. If it has a ROAM_REFS property with a URL in it, link to that URL, otherwise ;; only insert the link description, but no target. (if-let ((url (seq-find (lambda (arg) (cl-some (lambda (p) (string-prefix-p p arg)) protocols)) (split-string-and-unquote (or (cdr (assoc-string \u0026#34;ROAM_REFS\u0026#34; (org-roam-node-properties node))) \u0026#34;\u0026#34;))))) (format \u0026#34;[%s](%s)\u0026#34; desc url) desc) ;; Note isn\u0026#39;t private, use original FN. (apply fn link desc rest)))) (advice-add #\u0026#39;org-hugo-link :around #\u0026#39;dh/org-link-advice) TODO Export management # 수정이 필요하다. 일단 나는 수동으로 한다. 지식 관리하는데 자동화를 다하려고 한다?! 하나 씩 귀하게 여겨야 한다.\nwebsite generation\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 (defun dh/org-roam-node-directory (node) (string-remove-suffix \u0026#34;/\u0026#34; (string-remove-prefix \u0026#34;/\u0026#34; (string-remove-prefix org-roam-directory (file-name-directory (org-roam-node-file node)))))) (defun dh/org-roam-articles () (cl-remove-if-not (lambda (node) (string= \u0026#34;articles\u0026#34; (cdr (assoc-string \u0026#34;KIND\u0026#34; (org-roam-node-properties node))))) (org-roam-node-list))) (defun dh/org-roam-to-hugo (section files) \u0026#34;Call `org-hugo-export-to-md\u0026#39; on all Org FILES. All files have to be in `org-roam-directory\u0026#39;. Output is written relative to SECTION in `org-hugo-base-dir\u0026#39;. Org files in subdirectories of `org-roam-directory\u0026#39; will get matching subdirectories underneath SECTION.\u0026#34; (mapcar (lambda (node) (with-current-buffer (find-file-noselect (org-roam-node-file node)) (let ((org-hugo-section (file-name-concat section (dh/org-roam-node-directory node)))) (org-hugo-export-to-md)))) files)) (defun dh/org-insert-date-keyword () (org-roam-set-keyword \u0026#34;date\u0026#34; (format-time-string \u0026#34;[%Y-%m-%d %a]\u0026#34; (current-time)))) (add-hook \u0026#39;org-roam-capture-new-node-hook #\u0026#39;dh/org-insert-date-keyword) (defun dh/org-export-before-parsing (backend) (when (string= backend \u0026#34;hugo\u0026#34;) (org-roam-set-keyword \u0026#34;hugo_lastmod\u0026#34; (format-time-string \u0026#34;%Y-%m-%d\u0026#34; (file-attribute-modification-time (file-attributes (buffer-file-name))))))) ;; (dh/org-roam-to-hugo \u0026#34;posts\u0026#34; (dh/org-roam-articles)) PRIVATE org-roam-public-notes :: export\narticle 또는 PRIVATE 이 붙어 있지 않는 모든 노트는 notes 섹션으로 보냅니다.\n1 2 3 4 5 6 7 8 (defun dh/org-roam-public-notes () (cl-remove-if (lambda (node) (or (cdr (assoc-string \u0026#34;PRIVATE\u0026#34; (org-roam-node-properties node))) (string= \u0026#34;articles\u0026#34; (cdr (assoc-string \u0026#34;KIND\u0026#34; (org-roam-node-properties node)))))) (org-roam-node-list))) ;; (dh/org-roam-to-hugo \u0026#34;notes\u0026#34; (dh/org-roam-public-notes)) export and update org-id\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 (defun custom-org-protocol-focus-advice (orig \u0026amp;rest args) (x-focus-frame nil) (apply orig args)) (advice-add \u0026#39;org-roam-protocol-open-ref :around #\u0026#39;custom-org-protocol-focus-advice) (advice-add \u0026#39;org-roam-protocol-open-file :around #\u0026#39;custom-org-protocol-focus-advice) ;; (defun my/org-roam-export-all () ;; \u0026#34;Re-exports all Org-roam files to Hugo markdown.\u0026#34; ;; (interactive) ;; (dolist (f (org-roam-list-files)) ;; (with-current-buffer (find-file f) ;; (when (s-contains? \u0026#34;SETUPFILE\u0026#34; (buffer-string)) ;; (org-hugo-export-wim-to-md))))) ;; (remove-hook \u0026#39;find-file-hook #\u0026#39;+org-roam-open-buffer-maybe-h) ;; (defun my/org-update-org-ids () ;; \u0026#34;Update all org ids.\u0026#34; ;; (interactive) ;; (org-id-update-id-locations ;; (directory-files-recursively ;; org-roam-directory \u0026#34;.org$\\\\|.org.gpg$\u0026#34;))) (defun my/org-id-update-org-roam-files () \u0026#34;Update Org-ID locations for all Org-roam files.\u0026#34; (interactive) (org-id-update-id-locations (org-roam-list-files))) (defun my/org-id-update-id-current-file () \u0026#34;Scan the current buffer for Org-ID locations and update them.\u0026#34; (interactive) (org-id-update-id-locations (list (buffer-file-name (current-buffer))))) HYDRA and Transient for easy access # TODO transient :: org-roam dh-do-stuff\n흠. 하이드라로 통합 예정. 나는 마짓 스타일이 잘 안맞는다.\n1 2 3 4 5 6 7 8 9 (transient-define-prefix dh-do-stuff () \u0026#34;\u0026#34; [\u0026#34;Org-roam\u0026#34; [(\u0026#34;oc\u0026#34; \u0026#34;org-capture\u0026#34; org-capture) (\u0026#34;ol\u0026#34; \u0026#34;org-store-link\u0026#34; org-store-link) (\u0026#34;ornf\u0026#34; \u0026#34;org-roam-node-find\u0026#34; org-roam-node-find) (\u0026#34;orni\u0026#34; \u0026#34;org-roam-node-insert\u0026#34; org-roam-node-insert) (\u0026#34;ornc\u0026#34; \u0026#34;org-roam-note-from-cite\u0026#34; my/org-roam-node-from-cite) (\u0026#34;co\u0026#34; \u0026#34;citar-open\u0026#34; citar-open)]]) hydra org-roam-hydra-dir\n1 2 3 4 5 6 7 8 9 (require \u0026#39;hydra) (defhydra my/org-roam-hydra-dir (:color amaranth) \u0026#34;Org-roam find nodes in subdirs\u0026#34; (\u0026#34;t\u0026#34; my/org-roam-find-terms-dir \u0026#34;[terms]\u0026#34;) (\u0026#34;m\u0026#34; my/org-roam-find-posts-dir \u0026#34;[posts]\u0026#34;) (\u0026#34;r\u0026#34; my/org-roam-find-refs-dir \u0026#34;[refs]\u0026#34;) (\u0026#34;a\u0026#34; my/org-roam-find-notes-dir \u0026#34;[notes]\u0026#34;) (\u0026#34;q\u0026#34; nil \u0026#34;Quit\u0026#34; :color blue)) End Configuration donotmove # 1 ) Consult-org-roam # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 (defun jh-pkm/init-consult-org-roam () (use-package consult-org-roam :after org-roam consult :config ;; (setq consult-org-roam-buffer-after-buffers t) ; ? (setq consult-org-roam-grep-func #\u0026#39;consult-ripgrep) (consult-customize ;; Eventually suppress previewing for certain functions consult-org-roam-file-find consult-org-roam-search consult-org-roam-backlinks consult-org-roam-forward-links :preview-key \u0026#39;(\u0026#34;M-.\u0026#34; \u0026#34;C-SPC\u0026#34; ;; :debounce 0.3 \u0026#34;C-M-j\u0026#34; \u0026#34;C-M-k\u0026#34; ; conflict puni :debounce 0.3 \u0026#34;\u0026lt;up\u0026gt;\u0026#34; \u0026#34;\u0026lt;down\u0026gt;\u0026#34; \u0026#34;C-n\u0026#34; \u0026#34;C-p\u0026#34; )) ;; Activate the minor-mode (consult-org-roam-mode 1))) Funcs # 1 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- org-insert-link-dwim # I cribbed the following function from Emacs DWIM: do what ✨I✨ mean.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 (defun my/org-insert-link-dwim () \u0026#34;Like `org-insert-link\u0026#39; but with personal dwim preferences.\u0026#34; (interactive) (let* ((point-in-link (org-in-regexp org-link-any-re 1)) (clipboard-url (when (string-match-p \u0026#34;^http\u0026#34; (current-kill 0)) (current-kill 0))) (region-content (when (region-active-p) (buffer-substring-no-properties (region-beginning) (region-end))))) (cond ((and region-content clipboard-url (not point-in-link)) (delete-region (region-beginning) (region-end)) (insert (org-make-link-string clipboard-url region-content))) ((and clipboard-url (not point-in-link)) (insert (org-make-link-string clipboard-url (read-string \u0026#34;Title: \u0026#34; (with-current-buffer (url-retrieve-synchronously clipboard-url) (dom-text (car (dom-by-tag (libxml-parse-html-region (point-min) (point-max)) \u0026#39;title)))))))) (t (call-interactively \u0026#39;org-insert-link))))) assistance rogue's tips # [2023-04-22 Sat 10:52] /home/junghan/sync/man/dotsamples/spacemacs/rogue-dot-spacemacs/funcs.el\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 (defun range (n) \u0026#34;Python like range function returning list.\u0026#34; (cl-loop for i from 0 to (- n 1) collect i)) (defun shuffle-list (its) \u0026#34;Destructive but inefficient list shuffling.\u0026#34; (cl-loop for i downfrom (- (length its) 1) to 1 do (let ((i-val (nth i its)) (j (random (+ i 1)))) (setf (nth i its) (nth j its)) (setf (nth j its) i-val))) its) (defun shuffle-org-list () \u0026#34;Shuffle list at point.\u0026#34; (interactive) (save-excursion (let ((org-list (org-list-to-lisp t))) (insert (org-list-to-org (cons (car org-list) (shuffle-list (cdr org-list))))) (org-list-repair)))) (defun reading-time (\u0026amp;optional wpm) (/ (count-words (point-min) (point-max)) (or wpm 200))) (defun firefox-profile-directory () \u0026#34;Return profile directory for firefox.\u0026#34; (-find (lambda (d) (string-match \u0026#34;default$\u0026#34; d)) (f-directories \u0026#34;~/.mozilla/firefox\u0026#34;))) (defmacro --with-temp-copy (file-path \u0026amp;rest body) \u0026#34;Run BODY after making a temporary copy of given FILE-PATH. In the BODY forms, `it\u0026#39; provides the path for the copy.\u0026#34; (declare (indent defun)) `(let ((it (make-temp-file (f-base ,file-path)))) (unwind-protect (progn (copy-file ,file-path it t) ,@body) (f-delete it)))) (defun youtube-history () \u0026#34;Return youtube history.\u0026#34; (--with-temp-copy (f-join (firefox-profile-directory) \u0026#34;places.sqlite\u0026#34;) (json-parse-string (shell-command-to-string (format \u0026#34;sqlite3 -json %s %s\u0026#34; (shell-quote-argument it) (shell-quote-argument \u0026#34;SELECT url, title FROM moz_places WHERE title IS NOT NULL AND rev_host LIKE \u0026#39;%utuoy%\u0026#39; AND url LIKE \u0026#39;%watch%\u0026#39; ORDER BY last_visit_date DESC\u0026#34;))) :array-type \u0026#39;list :object-type \u0026#39;alist))) (defvar youtube-process nil \u0026#34;Process for keeping youtube player.\u0026#34;) ;; (defun youtube-play-url (url) ;; (when (and youtube-process (process-live-p youtube-process)) ;; (kill-process youtube-process)) ;; (setq youtube-process (start-process \u0026#34;youtube-play\u0026#34; nil \u0026#34;mpv\u0026#34; \u0026#34;--no-video\u0026#34; url))) ;; (defun youtube-history-play () ;; (interactive) ;; (helm :sources (helm-build-sync-source \u0026#34;youtube-history\u0026#34; ;; :candidates (mapcar (lambda (it) (cons (alist-get \u0026#39;title it) (alist-get \u0026#39;url it))) (youtube-history)) ;; :action `((\u0026#34;Play audio\u0026#34; . youtube-play-url))) ;; :buffer \u0026#34;*helm youtube history*\u0026#34; ;; :prompt \u0026#34;Title: \u0026#34;)) (defun aleatory-assitance () \u0026#34;Give a random strategy to get unstuck.\u0026#34; (interactive) (let ((strategies (s-split \u0026#34;\\n\u0026#34; (s-trim \u0026#34;1. Take the braver decision 2. Take a nap 3. What\u0026#39;s the title of this book? 4. What\u0026#39;s the choice between? 5. Ask ChatGPT for the final decision 6. What will make you proud of yourself? 7. Choose freedom 8. Start reading a new book 9. Be kind to people involved 10. Name this 11. Start a repository 12. Where\u0026#39;s the money coming from? 13. Close everything, start again 14. Connect with an expert in the area 15. How would you have done it? 16. Combine two unrelated concepts 17. Toss a coin 18. Explain it to a business person 19. How much time will it take? Take 3 times more 20. Talk to the nearest human 21. What are the ingredients? What\u0026#39;s missing? 22. Search old notes 23. How will this look like in the future? 24. Find an equivalent problem 25. Work in a different domain 26. Take out another card 27. What\u0026#39;s the most ambitious option? 28. List risks 29. Run an experiment 30. Record a video on current status 31. Ship right now! 32. What\u0026#39;s the strongest feeling right now? 33. What\u0026#39;s one bias you can remove right now? 34. Write an email 35. What\u0026#39;s the weather trend these days? 36. Use a new animal 37. Make a plot 38. Collect data 39. Make it efficient 40. Remove the most meaningless portion 41. Make a mistake 42. What do you need other than time? Ask for it. \u0026#34;)))) (print (car (shuffle-list strategies))))) org-hide-properties # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 (defun org-hide-properties () \u0026#34;Hide all org-mode headline property drawers in buffer. Could be slow if it has a lot of overlays.\u0026#34; (interactive) (save-excursion (goto-char (point-min)) (while (re-search-forward \u0026#34;^ *:properties:\\n\\\\( *:.+?:.*\\n\\\\)+ *🔚\\n\u0026#34; nil t) (let ((ov_this (make-overlay (match-beginning 0) (match-end 0)))) (overlay-put ov_this \u0026#39;display \u0026#34;\u0026#34;) (overlay-put ov_this \u0026#39;hidden-prop-drawer t)))) (put \u0026#39;org-toggle-properties-hide-state \u0026#39;state \u0026#39;hidden)) (defun org-show-properties () \u0026#34;Show all org-mode property drawers hidden by org-hide-properties.\u0026#34; (interactive) (remove-overlays (point-min) (point-max) \u0026#39;hidden-prop-drawer t) (put \u0026#39;org-toggle-properties-hide-state \u0026#39;state \u0026#39;shown)) (defun org-toggle-properties () \u0026#34;Toggle visibility of property drawers.\u0026#34; (interactive) (if (eq (get \u0026#39;org-toggle-properties-hide-state \u0026#39;state) \u0026#39;hidden) (org-show-properties) (org-hide-properties))) Keybindings # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; \u0026#34;o\u0026#34; \u0026#39;link-hint-open-link ;; \u0026#34;r\u0026#34; \u0026#39;org-roam-buffer-refresh ;; \u0026#39;C-c n\u0026#39; my-org-roam-map (define-prefix-command \u0026#39;my-org-roam-map) (define-key global-map (kbd \u0026#34;C-c n\u0026#34;) \u0026#39;my-org-roam-map) (define-key org-mode-map (kbd \u0026#34;C-M-i\u0026#34;) \u0026#39;completion-at-point) ;; 2023-05-28 project, agenda 관련 부분은 org-roam 에서 제거한다. (let ((map my-org-roam-map)) (define-key map (kbd \u0026#34;a\u0026#34;) \u0026#39;org-roam-alias-add) (define-key map (kbd \u0026#34;A\u0026#34;) \u0026#39;my/org-roam-get-all-tags) (define-key map (kbd \u0026#34;c\u0026#34;) #\u0026#39;org-roam-capture) (define-key map (kbd \u0026#34;d\u0026#34;) #\u0026#39;dh-do-stuff) (define-key map (kbd \u0026#34;f\u0026#34;) #\u0026#39;consult-org-roam-file-find) (define-key map (kbd \u0026#34;h\u0026#34;) #\u0026#39;my/org-roam-hydra-dir/body) (define-key map (kbd \u0026#34;g\u0026#34;) #\u0026#39;org-roam-graph) (define-key map (kbd \u0026#34;G\u0026#34;) #\u0026#39;org-id-get-create) (define-key map (kbd \u0026#34;i\u0026#34;) #\u0026#39;org-roam-node-insert) (define-key map (kbd \u0026#34;I\u0026#34;) #\u0026#39;org-roam-node-insert-immediate) ; ADD (define-key map (kbd \u0026#34;l\u0026#34;) #\u0026#39;org-roam-buffer-toggle) ;; org-projectile 을 프로젝트 관리로 사용한다. 프로젝트 산출물 (코드, 문서) ;; 가 모여있는 git 리포지토리에 대한 전역 투두 관리이다. ;; org-roam 은 글을 쓰고 연결하는 곳이다. 프로젝트 세부 내용은 매우 ;; 가변적이다. 흘러갈 내용이다. (define-key map (kbd \u0026#34;p\u0026#34;) \u0026#39;org-projectile-project-todo-completing-read) (define-key map (kbd \u0026#34;r\u0026#34;) \u0026#39;org-roam-ref-find) (define-key map (kbd \u0026#34;R\u0026#34;) \u0026#39;org-roam-ref-add) (define-key map (kbd \u0026#34;S\u0026#34;) \u0026#39;org-roam-db-sync) (define-key map (kbd \u0026#34;T\u0026#34;) \u0026#39;my/org-roam-tag-search) (define-key map (kbd \u0026#34;L\u0026#34;) \u0026#39;my/org-insert-link-dwim) (define-key map (kbd \u0026#34;,\u0026#34;) \u0026#39;aleatory-assitance) (define-key map (kbd \u0026#34;.\u0026#34;) \u0026#39;consult-org-roam-search) (define-key map (kbd \u0026#34;[\u0026#34;) \u0026#39;consult-org-roam-backlinks) (define-key map (kbd \u0026#34;]\u0026#34;) \u0026#39;consult-org-roam-forward-links) ) (spacemacs/set-leader-keys-for-major-mode \u0026#39;org-mode \u0026#34;rI\u0026#34; \u0026#39;org-roam-node-insert-immediate \u0026#34;rS\u0026#34; \u0026#39;org-roam-db-sync \u0026#34;rT\u0026#34; \u0026#39;my/org-roam-tag-search \u0026#34;rL\u0026#34; \u0026#39;my/org-insert-link-dwim ) "},{"id":21,"href":"/configs/emacs/jh-project/","title":"jh-project layer","section":"menu/Dotfiles/dot-emacs","content":" 스페이스맥스의 Git, Version-Control, Spacemacs-Project 를 기반으로 레이어 구성. Goals # Git, Version-Control, Spacemacs-project 레이어 및 관련 추가 패키지 구성\nLayer # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (configuration-layer/declare-layer-dependencies \u0026#39;( ;; ;; SPC g s opens Magit git client full screen (q restores previous layout) ;; show word-granularity differences in current diff hunk ;; git-enable-magit-gitflow-plugin t (git :variables magit-diff-refine-hunk t git-enable-magit-delta-plugin t git-enable-magit-todos-plugin t) ;; Highlight changes in buffers ;; SPC g . transient state for navigating changes (version-control :variables ;; version-control-diff-tool \u0026#39;diff-hl ; never! too slow! version-control-diff-tool \u0026#39;git-gutter ; simple makes perfect ;; 아래에 margin 을 켜야 diff-tool이 mode 활성화 된다 version-control-global-margin t) spacemacs-project ; projectile )) Packages # Packages # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (defconst jh-project-packages \u0026#39;( magit forge git-commit git-timemachine ;; code-review ;; additional packages magit-imerge sideline-blame consult-git-log-grep consult-projectile )) Magit # magit - forge configuration git 레이어에 대한 추가 설정 Difftastic diffing with Magit 를 반영하여 my-magit.el 추가\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 (defun jh-project/post-init-magit () ;; (require \u0026#39;my-magit) ;; Version Control configuration - Git, etc ;; ;; Load in magithub features after magit package has loaded ;; ;; (use-package magithub ;; ;; :after magit ;; ;; :config (magithub-feature-autoinject t)) ;; ;; Set locations of all your Git repositories ;; with a number to define how many sub-directories to search ;; `SPC g L\u0026#39; - list all Git repositories in the defined paths, (setq magit-repository-directories \u0026#39;((\u0026#34;~/.spacemacs.d/\u0026#34; . 0) (\u0026#34;~/mydotfiles/\u0026#34; . 0) (\u0026#34;~/sync/code/\u0026#34; . 2) (\u0026#34;~/sync/obsd/\u0026#34; . 0) (\u0026#34;~/sync/org/\u0026#34; . 0))) ) ;;;; l and h are for navigating. even in magit ;; (evil-define-key \u0026#39;normal magit-mode-map \u0026#34;l\u0026#34; \u0026#39;evil-forward-char) ;; (evil-define-key \u0026#39;normal magit-mode-map (kbd \u0026#34;M-l\u0026#34;) \u0026#39;magit-log) ;; (evil-define-key \u0026#39;normal magit-mode-map \u0026#34;h\u0026#34; \u0026#39;evil-backward-char) ;; (evil-define-key \u0026#39;normal magit-mode-map (kbd \u0026#34;M-h\u0026#34;) \u0026#39;magit-dispatch) ;; (evil-define-key \u0026#39;normal magit-mode-map (kbd \u0026#34;\u0026lt;escape\u0026gt;\u0026#34;) nil) ;; (evil-define-key \u0026#39;normal magit-revision-mode-map \u0026#34;q\u0026#34; \u0026#39;magit-log-bury-buffer)) Git-commit # [2023-06-12 Mon 15:28] conventional commit support\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ;; Enforce git commit conventions. ;; See: chris.beams.io/posts/git-commit/ ;; Use Spacemacs as the $EDITOR ;; (or $GIT_EDITOR) for git commits messages when using git commit on the command ;; line (defun jh-project/post-init-git-commit () (use-package git-commit :after magit :demand t :hook (git-commit-mode . +git-gommit--set-fill-column-h) :hook (git-commit-setup . +git-commit--enter-evil-insert-state-maybe-h) :custom (git-commit-summary-max-length 50) (git-commit-style-convention-checks \u0026#39;(overlong-summary-line non-empty-second-line)) :config (defun +git-gommit--set-fill-column-h () (setq-local fill-column 72)) ;; Enter evil-insert-state for new commits (hooked to `git-commit-setup-hook\u0026#39;) (defun +git-commit--enter-evil-insert-state-maybe-h () (when (and (bound-and-true-p evil-mode) (not (evil-emacs-state-p)) (bobp) (eolp)) (evil-insert-state))) (global-git-commit-mode 1)) ) Git-timemachine # 1 2 (defun jh-project/post-init-git-timemachine () (setq git-timemachine-show-minibuffer-details t)) Forge # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 (defun jh-project/post-init-forge () (when (\u0026gt; emacs-major-version 28) ; Emacs-29 use builtin pkgs (setq forge-database-connector \u0026#39;sqlite-builtin)) ;; Configure number of topics show, open and closed ;; use negative number to toggle the view of closed topics ;; using `SPC SPC forge-toggle-closed-visibility\u0026#39; (setq forge-topic-list-limit \u0026#39;(100 . -10)) ;; set closed to 0 to never show closed issues ;; (setq forge-topic-list-limit \u0026#39;(100 . 0)) ;; GitHub user and organization accounts owned ;; used by @ c f to create a fork (setq forge-owned-accounts \u0026#39;((\u0026#34;junghan0611\u0026#34; \u0026#34;junghanacs\u0026#34;))) ) ;; ;; To blacklist specific accounts, ;; ;; over-riding forge-owned-accounts ;; ;; (setq forge-owned-blacklist ;; ;; \u0026#39;((\u0026#34;bad-hacks\u0026#34; \u0026#34;really-bad-hacks\u0026#34;))) Magit-imerge # 1 2 (defun jh-project/init-magit-imerge () (use-package magit-imerge :defer t)) Sideline-blame # GitHub - emacs-sideline/sideline-blame: Show blame messag\u0026hellip;\n1 2 3 4 5 6 7 8 9 10 11 (defun jh-project/init-sideline-blame () (use-package sideline-blame :after sideline :defer 10 :init (setq sideline-blame-uncommitted-author-name \u0026#34;Me\u0026#34; sideline-blame-uncommitted-message \u0026#34;Uncommitted changes\u0026#34;) (setq sideline-blame-author-format \u0026#34;|%.8s.|\u0026#34;) (setq sideline-blame-datetime-format \u0026#34; |%y-%m-%d| \u0026#34;) (setq sideline-blame-commit-format \u0026#34;%.20s.|\u0026#34;) (setq sideline-backends-left \u0026#39;((sideline-blame . down))))) Consult-log-grep # projectile 쓰고 싶은데 기능이 너무 많아서 엄두가 안 나더라. 아래는 기본 키 바인딩이다. which-key-max-description-length\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ;; 프로젝트 prefix p ;; f find :: projectile-find-file ;; p switch project :: projectile-switch-project ;; k kill buffers :: projectile-kill-buffers ;; s search in project :: counsel-git-grep ==\u0026gt; consult-git-grep ;; S consult-git-log-grep ;; b switch to project buffer :: projectile-switch-to-buffer (defun jh-project/init-consult-git-log-grep () (use-package consult-git-log-grep :defer )) ;; (defun jh-project/post-init-projectile () ;; (require \u0026#39;consult-git-log-grep) ;; (require \u0026#39;consult-projectile) ;; ) Consult-projectile # jeremyf\n1 2 3 4 5 6 7 8 9 10 11 12 (defun jh-project/init-consult-projectile () (use-package consult-projectile ;; package provides a function I use everyday: ~M-x consult-projectile~. When ;; I invoke ~consult-projectile~, I have the file completion for the current ;; project. I can also type =b= + =SPACE= to narrow my initial search to open ;; buffers in the project. Or =p= + =space= to narrow to other projects; and ;; then select a file within that project. :after consult projectile :commands (consult-projectile) ;; This overwrite `ns-open-file-using-panel\u0026#39;; the operating system\u0026#39;s \u0026#34;Finder\u0026#34; ;; (\u0026#34;C-c o\u0026#34; . consult-projectile) )) Keybindings # 1 2 3 4 5 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- (global-set-key (kbd \u0026#34;C-x g\u0026#34;) \u0026#39;magit-status) (spacemacs/set-leader-keys \u0026#34;gg\u0026#34; \u0026#39;consult-git-grep) (spacemacs/set-leader-keys \u0026#34;gG\u0026#34; \u0026#39;consult-git-log-grep) "},{"id":22,"href":"/configs/emacs/jh-python/","title":"jh-python layer","section":"menu/Dotfiles/dot-emacs","content":" jh-python Goals # Spacemacs 레이어를 그냥 사용한다.\nLayer # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (configuration-layer/declare-layer-dependencies \u0026#39;( (python :packages (not company counsel-gtags helm-cscope helm-pydoc anaconda-mode company-anaconda lsp-python-ms) :variables python-backend \u0026#39;lsp python-lsp-server \u0026#39;pyright ; for compatibility with eglot python-test-runner \u0026#39;pytest python-poetry-activate t python-formatter \u0026#39;yapf ; \u0026#39;lsp ;; python-format-on-save t ; default nil ;; python-save-before-test nil ;; python-fill-column 99 ; default 79 ;; python-tab-width 4 ; default 4 ;; python-sort-imports-on-save t ) ;; django ;; ipython-notebook )) Packages # Packages # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (defconst jh-python-packages \u0026#39;( ;; 재정의 패키지 ;; python ;; lsp-pyright ; need to tunning ;; eglot )) "},{"id":23,"href":"/configs/emacs/jh-reading/","title":"jh-reading layer","section":"menu/Dotfiles/dot-emacs","content":" jh-reading Goals # jh-reading\nLayer # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (configuration-layer/declare-layer-dependencies \u0026#39;( (elfeed :variables elfeed-enable-goodies t rmh-elfeed-org-files (list \u0026#34;~/sync/org/elfeed/elfeed.org\u0026#34;) ;; elfeed-db-directory \u0026#34;~/.spacemacs.d/.elfeed\u0026#34; elfeed-enable-web-interface nil elfeed-goodies/show-mode-padding 2 elfeed-goodies/powerline-default-separator \u0026#39;slant elfeed-goodies/feed-source-column-width 25 elfeed-goodies/tag-column-width 30 url-queue-timeout 30) epub ;; eaf (eww :packages (not texfrag) :variables shr-max-image-proportion 0.6 ;; shr-image-animate nil ; No GIFs, thank you! shr-width fill-column ; check `prot-eww-readable\u0026#39; shr-max-width fill-column shr-use-fonts nil) ;; xkcd ;; fast, global-search and tag-based email system ;; (notmuch ;; :variables ;; notmuch-messages-deleted-tags \u0026#39;(\u0026#34;+deleted\u0026#34; \u0026#34;-inbox\u0026#34; \u0026#34;-unread\u0026#34;)) (pocket :variables pocket-reader-color-title t pocket-reader-color-site t pocket-reader-site-column-max-width 16) pdf (dash :variables dash-docs-docset-newpath \u0026#34;~/.local/share/Zeal/Zeal/docsets\u0026#34;) speed-reading )) Packages # Packages # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (defconst jh-reading-packages \u0026#39;( ;; 재정의 패키지 ;; eww ;; 새로 등록하는 패키지 tldr ; read manual ;; consult-notmuch ;; emms ;; (empv :location (recipe :fetcher github ;; :repo \u0026#34;isamert/empv.el\u0026#34;)) ebuku ; for buku bookmark ;; sicp ; sicp info-mode wikinfo ; wiki info-mode youtube-sub-extractor devdocs-browser ; using EWW consult-dash ;; mastodon ; ActivityPub elfeed-webkit elfeed-tube ;; elfeed-tube-mpv ;; (youtube-dl :location (recipe :fetcher github :repo \u0026#34;skeeto/youtube-dl-emacs\u0026#34;)) )) elfeed-tube # 좋은 영어 유튜브를 보고 있을 때 문제는 끝까지 보는 것이다. 내용 파악이 제대로 안된다는 생각이 들면 아무리 좋은 것도 포기하게 된다. 물론 영어 자막을 켜놓거나 한글 번역으로 할 때도 있지만 별 도움이 안된다. 그래서 혹시 이맥스로 유튜브 영어 스크립트를 다운 받는 방법이 있나 찾아보았다. 일단 다운을 받으면, 잘 편집해서 영어 / 한글 세트 구성으로 스크립트를 만들 수 있기 때문이다. 그러면 내용 이해도 편하고 기록하기에도 유용하다. 완벽한 영어만 있거나, 허접한 한글 번역만 있는 것은 정답이 아니다. 영어와 한글이 같이 있어야 Guess 를 해가며 볼 수 있다. 위에 링크에 이맥스 코드가 있다. :-)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 (defun jh-reading/init-elfeed-tube () (use-package elfeed-tube :after elfeed :demand t :config ;; (setq elfeed-tube-auto-save-p nil) ; default value (setq elfeed-tube-auto-save-p t) (setq elfeed-tube-auto-fetch-p t) ; default value (setq elfeed-tube-captions-languages \u0026#39;(\u0026#34;en\u0026#34; \u0026#34;english (auto generated)\u0026#34; \u0026#34;ko\u0026#34;)) (elfeed-tube-setup) :bind (:map elfeed-show-mode-map (\u0026#34;F\u0026#34; . elfeed-tube-fetch) ([remap save-buffer] . elfeed-tube-save) :map elfeed-search-mode-map (\u0026#34;F\u0026#34; . elfeed-tube-fetch) ([remap save-buffer] . elfeed-tube-save) ) ) ) ;; (use-package elfeed-tube-mpv ;; :ensure t ;; or :straight t ;; :bind (:map elfeed-show-mode-map ;; (\u0026#34;C-c C-f\u0026#34; . elfeed-tube-mpv-follow-mode) ;; (\u0026#34;C-c C-w\u0026#34; . elfeed-tube-mpv-where)) ;; ) elfeed-webkit # [2023-06-02 Fri 06:00] GitHub - fritzgrabo/elfeed-webkit: Emacs: Render elfeed e\u0026hellip;\n1 2 3 4 5 6 7 8 9 10 11 12 (defun jh-reading/init-elfeed-webkit () (use-package elfeed-webkit :ensure :demand :after elfeed :init (setq elfeed-webkit-auto-tags \u0026#39;(webkit comics)) :config (elfeed-webkit-auto-enable-by-tag) :bind (:map elfeed-show-mode-map (\u0026#34;%\u0026#34; . elfeed-webkit-toggle))) ) youtube-sub-extractor # yt-dlp 를 활용한다. 먼저, 설치해줘야 한다. 키바인딩은 해보고 나서\n여기서 일단 최신 바이너리를 설치하는게 좋겠다. https://github.com/yt-dlp/yt-dlp#installation\n1 2 3 4 5 \u0026gt; ln -s yt-dlp_linux yt-dlp \u0026gt; yt-dlp -U Available version: stable@2023.03.04, Current version: stable@2023.03.04 Current Build Hash: 7494af600c4389d19961b44e406472bba7c54c28dc1f62bb72bdde7181708a9a yt-dlp is up to date (stable@2023.03.04) 1 2 3 4 5 6 7 8 9 10 11 (defun jh-reading/init-youtube-sub-extractor () (use-package youtube-sub-extractor :defer t :commands (youtube-sub-extractor-extract-subs) :config ;; (map! :map youtube-sub-extractor-subtitles-mode-map ;; :desc \u0026#34;copy timestamp URL\u0026#34; :n \u0026#34;RET\u0026#34; #\u0026#39;youtube-sub-extractor-copy-ts-link ;; :desc \u0026#34;browse at timestamp\u0026#34; :n \u0026#34;C-c C-o\u0026#34; #\u0026#39;youtube-sub-extractor-browse-ts-link) (setq youtube-sub-extractor-timestamps \u0026#39;left-margin) ) ) eBuku \u0026ndash; buku Bookmark # evil-collection 덕분에 키 바인딩을 가져 간다.\n1 2 3 4 (defun jh-reading/init-ebuku () (use-package ebuku :after evil-collection )) consult-dash # dash layer 에는 helm, ivy 설정만 들어 있다. consult 설정을 넣어 준다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 (defun jh-reading/init-consult-dash () (use-package consult-dash :defer t :bind (\u0026#34;M-s d\u0026#34; . consult-dash) :init (progn (spacemacs/declare-prefix \u0026#34;arz\u0026#34; \u0026#34;zeal/dash docs\u0026#34;) (spacemacs/set-leader-keys \u0026#34;arzH\u0026#34; \u0026#39;consult-dash)) :config ;; Use the symbol at point as initial search term (consult-customize consult-dash :initial (thing-at-point \u0026#39;symbol)) ;; (when (functionp \u0026#39;consult-dash) ;; (setq-local consult-dash-docsets \u0026#39;(\u0026#34;Python 2\u0026#34; \u0026#34;Python 3\u0026#34; \u0026#34;NumPy\u0026#34;))) ) ) devdocs-browser # 설정하고 테스트 해보자.\n1 2 3 4 5 6 7 8 9 10 (defun jh-reading/init-devdocs-browser () (use-package devdocs-browser :defer t :config ;; (setq devdocs-browser-cache-directory \u0026#34;~/spacemacs/.cache/private/\u0026#34;) (add-to-list \u0026#39;devdocs-browser-major-mode-docs-alist \u0026#39;(ruby-mode \u0026#34;ruby\u0026#34;) \u0026#39;(rjsx-mode (\u0026#34;react\u0026#34; \u0026#34;javascript\u0026#34;))) ) (spacemacs/set-leader-keys \u0026#34;ard\u0026#34; #\u0026#39;devdocs-browser-open)) tldr # 1 2 3 4 5 6 7 (defun jh-reading/init-tldr () (use-package tldr :defer t :config (spacemacs/set-leader-keys \u0026#34;h,\u0026#34; \u0026#39;tldr) :custom (tldr-enabled-categories \u0026#39;(\u0026#34;common\u0026#34; \u0026#34;linux\u0026#34;)))) wikinfo # 1 2 (defun jh-reading/init-wikinfo () (use-package wikinfo :ensure :defer 10)) "},{"id":24,"href":"/configs/emacs/jh-utility/","title":"jh-utility layer","section":"menu/Dotfiles/dot-emacs","content":" jh-utility Goals # debug, docker, dap, lsp 등 utility layer 등록.\nLayer # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (configuration-layer/declare-layer-dependencies \u0026#39;( debug docker import-js dap ;; Language server protocol with minimal visual impact ;; https://practical.li/spacemacs/install-spacemacs/clojure-lsp/ (lsp :packages (not helm-lsp lsp-ivy) ; lsp-treemacs lsp-origami :variables lsp-headerline-breadcrumb-enable t ; Breadcrumb trail lsp-headerline-breadcrumb-segments \u0026#39;(projects) ; namespace \u0026amp; symbols, no file path lsp-ui-peek-enable t ; popups for refs, errors, symbols, etc. lsp-semantic-tokens-enable t ; enhance syntax highlight lsp-treemacs-error-list-current-project-only t ; limit errors to current project lsp-idle-delay 0.2 ; smooth LSP features response ;; lsp-modeline-code-actions-segments \u0026#39;(count icon) lsp-eldoc-enable-hover nil ; disable all hover actions lsp-ui-doc-enable nil ; doc hover popups lsp-ui-sideline-enable t ; sidebar code actions visual indicator treemacs-space-between-root-nodes nil ; spacing in treemacs views lsp-log-io t ; Log client-server json communication lsp-navigation \u0026#39;both ; default \u0026#39;both ; \u0026#39;simple or \u0026#39;peek ;; lsp-modeline-diagnostics-enable nil ; default t ;; lsp-modeline-code-actions-enable nil ; default t lsp-enable-on-type-formatting t ; clojure-mode conflicts ) node pandoc ;; prettier ; never! ;; (command-log :packages (command-log-mode)) ; never! (restclient :packages (not company-restclient)) prodigy ;; protobuf (shell :packages (not multi-vterm) ; multi-vterm depanes on project.el :variables shell-default-shell \u0026#39;vterm shell-default-term-shell \u0026#34;/usr/bin/zsh\u0026#34; ; /bin/bash spacemacs-vterm-history-file-location \u0026#34;~/.config/zsh/.zsh_history\u0026#34; shell-default-full-span nil ; default t shell-default-position \u0026#39;bottom shell-default-height 30 ) ;; tmux ;; kubernetes ;; (gtags :variables gtags-enable-by-default t) ;; systemd )) Packages # Packages # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (defconst jh-utility-packages \u0026#39;( lsp-mode ;; additional packages dogears tmr prodigy ;; crux ;; consult-ag ;; ssh-deploy ;; dwim-shell-command ;; (unpackaged :location (recipe :fetcher github :repo \u0026#34;alphapapa/unpackaged\u0026#34;)) ;; (deno-bridge :location (recipe :fetcher github :repo \u0026#34;manateelazycat/deno-bridge\u0026#34; ;; :files (\u0026#34;*.el\u0026#34; \u0026#34;*.md\u0026#34; \u0026#34;example\u0026#34;))) ;; (insert-translated-name :location (recipe :fetcher github :repo \u0026#34;manateelazycat/insert-translated-name\u0026#34; ;; :files (\u0026#34;*.el\u0026#34; \u0026#34;*.ts\u0026#34; \u0026#34;*.md\u0026#34;))) )) lsp-mode :: lsp layer # lsp layer 를 활성화 한다. 거기에 해당 설정을 한다. 가볍게.\n1 2 3 4 (defun jh-utility/post-init-lsp-mode () ;; Without it lsp flycheck is not working (require \u0026#39;lsp-headerline) (require \u0026#39;lsp-diagnostics)) prodigy services # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 (defun jh-utility/post-init-prodigy () (progn ;; define service ;; -D, --buildDrafts include content marked as draft ;; -E, --buildExpired include expired content ;; -F, --buildFuture include content with publishdate in the future (prodigy-define-service :name \u0026#34;Hugo Server\u0026#34; :command \u0026#34;hugo\u0026#34; ;; :args \u0026#39;(\u0026#34;server\u0026#34; \u0026#34;-D\u0026#34;) :args \u0026#39;(\u0026#34;server\u0026#34; \u0026#34;-D\u0026#34;) :cwd blog-admin-dir :tags \u0026#39;(hugo server) :kill-signal \u0026#39;sigkill :kill-process-buffer-on-stop t) )) TMR May Ring Timer # My Lesser Sung Packages of Emacs // Take on Rules\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 ;;;;; TMR May Ring (tmr is used to set timers) ;; Read the manual: \u0026lt;https://protesilaos.com/emacs/tmr\u0026gt;. (defun jh-utility/init-tmr () (use-package tmr :ensure :defer 5 :after embark :config (setq tmr-sound-file \u0026#34;/usr/share/sounds/freedesktop/stereo/alarm-clock-elapsed.oga\u0026#34; tmr-notification-urgency \u0026#39;normal tmr-description-list \u0026#39;tmr-description-history) (let ((map global-map)) (define-key map (kbd \u0026#34;C-c T t\u0026#34;) #\u0026#39;tmr) (define-key map (kbd \u0026#34;C-c T T\u0026#34;) #\u0026#39;tmr-with-description) (define-key map (kbd \u0026#34;C-c T l\u0026#34;) #\u0026#39;tmr-tabulated-view) ; \u0026#34;list timers\u0026#34; mnemonic (define-key map (kbd \u0026#34;C-c T c\u0026#34;) #\u0026#39;tmr-clone) (define-key map (kbd \u0026#34;C-c T k\u0026#34;) #\u0026#39;tmr-cancel) (define-key map (kbd \u0026#34;C-c T s\u0026#34;) #\u0026#39;tmr-reschedule) (define-key map (kbd \u0026#34;C-c T e\u0026#34;) #\u0026#39;tmr-edit-description) (define-key map (kbd \u0026#34;C-c T r\u0026#34;) #\u0026#39;tmr-remove) (define-key map (kbd \u0026#34;C-c T R\u0026#34;) #\u0026#39;tmr-remove-finished) ;; \u0026#39;C-c T\u0026#39; work with tmr (global-set-key (kbd \u0026#34;C-c T d\u0026#34;) \u0026#39;gts-do-translate) (global-set-key (kbd \u0026#34;C-c T i\u0026#34;) \u0026#39;google-translate-paragraphs-insert) (global-set-key (kbd \u0026#34;C-c T h\u0026#34;) \u0026#39;org-hyperscheduler-open) ) (defvar tmr-action-map (let ((map (make-sparse-keymap))) (define-key map \u0026#34;k\u0026#34; #\u0026#39;tmr-remove) (define-key map \u0026#34;r\u0026#34; #\u0026#39;tmr-remove) (define-key map \u0026#34;R\u0026#34; #\u0026#39;tmr-remove-finished) (define-key map \u0026#34;c\u0026#34; #\u0026#39;tmr-clone) (define-key map \u0026#34;e\u0026#34; #\u0026#39;tmr-edit-description) (define-key map \u0026#34;s\u0026#34; #\u0026#39;tmr-reschedule) map)) (with-eval-after-load \u0026#39;embark (add-to-list \u0026#39;embark-keymap-alist \u0026#39;(tmr-timer . tmr-action-map)) (cl-loop for cmd the key-bindings of tmr-action-map if (commandp cmd) do (add-to-list \u0026#39;embark-post-action-hooks (list cmd \u0026#39;embark--restart)))) ) ) PlaceSaver dogears # The dogears idle timer runs (after 5 seconds idle, by default). One of the dogears-hooks is run (only including imenu-after-jump-hook by default). One of the functions listed in dogears-functions is called (none, by default).\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 (defun jh-utility/init-dogears () (use-package dogears :ensure :defer 10 :init ;; (setq dogears-idle 5) ; default 5 seconds ;; These bindings are optional, of course: :bind (:map global-map (\u0026#34;M-g d\u0026#34; . dogears-go) (\u0026#34;M-g M-b\u0026#34; . dogears-back) (\u0026#34;M-g M-f\u0026#34; . dogears-forward) (\u0026#34;M-g M-d\u0026#34; . dogears-list) (\u0026#34;M-g M-D\u0026#34; . dogears-sidebar)) :config (dogears-mode) )) "},{"id":25,"href":"/configs/emacs/jh-visual/","title":"jh-visual layer","section":"menu/Dotfiles/dot-emacs","content":" jh-visual Goals # 프로그래밍 언어와 인간 언어 둘다 검사기가 필요하다. 여기에 통합해서 넣는다. 한글은 따로 레이어가 없다. 관련 설정은 사용자 코드에서 한다. CJK 는 관심을 가지고 봐야 한다. 중국, 일본 사용자들이 많기 때문에 그 분들의 노하우를 한글로 옮겨 오면 좋겠다.\nLayer # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (configuration-layer/declare-layer-dependencies \u0026#39;( (colors :packages (color-identifiers-mode rainbow-mode)) theming ;; ligatures on text-mode may cause issues with org-mode and magit (unicode-fonts :packages (ligature) ; not unicode-fonts :variables unicode-fonts-ligature-set \u0026#39;(\u0026#34;\u0026lt;==\u0026#34; \u0026#34;\u0026lt;~~\u0026#34; \u0026#34;==\u0026gt;\u0026#34; \u0026#34;~~\u0026gt;\u0026#34; \u0026#34;\u0026lt;=\u0026gt;\u0026#34; \u0026#34;\u0026lt;==\u0026gt;\u0026#34; \u0026#34;-\u0026gt;\u0026#34; \u0026#34;--\u0026gt;\u0026#34; \u0026#34;\u0026lt;-\u0026#34; \u0026#34;\u0026lt;--\u0026#34; \u0026#34;\u0026lt;-\u0026gt;\u0026#34; \u0026#34;\u0026lt;--\u0026gt;\u0026#34;) unicode-fonts-enable-ligatures nil unicode-fonts-ligature-modes \u0026#39;(prog-mode)) (spacemacs-modeline :packages (anzu spaceline)) (spacemacs-visual :packages (ansi-colors desktop display-fill-column-indicator popwin posframe zoom-frm)) ; not all-the-icons )) Packages # Packages # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (defconst jh-visual-packages \u0026#39;( ;; 재정의 패키지 hl-todo spaceline evil popwin ;; vterm ;; 새로 등록하는 패키지 hide-mode-line popup minions modus-themes ef-themes standard-themes nerd-icons (nerd-icons-completion :location (recipe :fetcher github :repo \u0026#34;rainstormstudio/nerd-icons-completion\u0026#34;)) (nerd-icons-dired :location (recipe :fetcher github :repo \u0026#34;rainstormstudio/nerd-icons-dired\u0026#34;)) kind-icon popper ;; dimmer )) Hide-mode-line # 1 2 (defun jh-visual/init-hide-mode-line () (use-package hide-mode-line :demand)) Modeline Spaceline with minions # 2023-02-17 완벽하다. 바닐라, 둠 모드 라인을 거쳐서 다시 돌아 왔다. 이 과정은 완벽하게 배움의 시간이었다. 탭 바, 미니온즈 등을 넣었고 어색한 부분이 하나도 없다. 결국 이렇게 될 일. 인연에 따라 오고 간다는 말이로다. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 (defun jh-visual/pre-init-spaceline () (spacemacs|use-package-add-hook spaceline-config :pre-config ;; (require \u0026#39;window) ;; (spaceline-define-segment window-info ;; \u0026#34;Shows the current window-info (dedication/size-fixed) \u0026#34; ;; (when (configuration-layer/package-used-p \u0026#39;spaceline) ;; (let* ((dedicated (window-dedicated-p) ) ;; (fixed window-size-fixed) ;; (pad (if (or dedicated fixed) \u0026#34; \u0026#34; \u0026#34;\u0026#34;))) ;; (format \u0026#34;%s%s%s%s\u0026#34; ;; pad ;; (if dedicated \u0026#34;#\u0026#34; \u0026#34;\u0026#34;) ;; (if fixed \u0026#34;X\u0026#34; \u0026#34;\u0026#34;) ;; pad)))) ;; (add-to-list \u0026#39;spacemacs-spaceline-additional-segments \u0026#39;(window-info :when active)) ;; (message \u0026#34;JH post-init-spaceline\u0026#34;) ;; (when (display-graphic-p) ; gui ;; (require \u0026#39;hide-mode-line) ;; (message \u0026#34;jh-visual/global-hide-mode-line-mode\u0026#34;) ;; (global-hide-mode-line-mode) ; off ;; ) (setq display-time-default-load-average nil) (setq spaceline-global-p nil) ; remove global-mode-string ;; Change to spaceline\u0026#39;s default (setq spaceline-highlight-face-func \u0026#39;spaceline-highlight-face-evil-state) (set-face-attribute \u0026#39;spaceline-evil-emacs nil :background \u0026#34;#bd93f9\u0026#34; :foreground \u0026#34;#000000\u0026#34;) ;; (spaceline-toggle-buffer-size-off) ;; (spaceline-toggle-minor-modes-off) ;; (spaceline-toggle-window-number-off) ;; (spaceline-toggle-purpose-off) ;; (spaceline-toggle-buffer-encoding-abbrev-off) :post-config (require \u0026#39;minions) (setq minions-mode-line-lighter \u0026#34;;\u0026#34;) ;; NOTE: This will be expanded whenever I find a mode that should not ;; be hidden (setq minions-prominent-modes (list \u0026#39;defining-kbd-macro \u0026#39;flymake-mode \u0026#39;flycheck-mode )) (spaceline-define-segment minor-modes (if (bound-and-true-p minions-mode) (format-mode-line minions-mode-line-modes) (spaceline-minor-modes-default))) (defun jh-visual/enable-mode-line-addons () (message \u0026#34;jh-visual/enable-mode-line-addons\u0026#34;) (minions-mode 1) ) (add-hook \u0026#39;spacemacs-post-user-config-hook #\u0026#39;jh-visual/enable-mode-line-addons) )) Modeline minions # 1 (defun jh-visual/init-minions () (use-package minions :demand )) Themes and colors # 스페이스맥스 기본 테마도 무리 없다. 욕심내면 modus-themes 를 쓰면 된다. 그게 아니라면 doom-themes 에서 골라 쓴다.\nef-themes # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 (defun jh-visual/init-ef-themes () (use-package ef-themes :defer :init (defun ef-themes-load-random-light () (interactive) (ef-themes-load-random \u0026#39;light)) (defun ef-themes-load-random-dark () (interactive) (ef-themes-load-random \u0026#39;dark)) :config (setq ef-themes-to-toggle \u0026#39;(ef-summer ef-winter)) (setq ef-themes--select-theme-history t) (setq ef-themes-common-palette-overrides `( (ef-themes-heading-0 bg-dim) ; title (ef-themes-heading-3 bg-blue-subtle) (ef-themes-heading-4 bg-magenta-subtle) )) (when (display-graphic-p) ; gui (setq ef-themes-mixed-fonts nil) (setq ef-themes-variable-pitch-ui t) (setq ef-themes-headings \u0026#39;( (0 . (variable-pitch bold 1.3)) (1 . (variable-pitch bold 1.2)) (2 . (variable-pitch semibold 1.05)) (3 . (variable-pitch semibold)) (4 . (variable-pitch medium)) (7 . (variable-pitch bold )) (8 . (variable-pitch bold )) (agenda-date . (variable-pitch semibold 1.2)) (agenda-structure . (variable-pitch semibold 1.1)) (t . (variable-pitch medium 1.0)))) ) ; end-of gui (defun my-ef-themes-hl-todo-faces () \u0026#34;Configure `hl-todo-keyword-faces\u0026#39; with Ef themes colors. The exact color values are taken from the active Ef theme.\u0026#34; (ef-themes-with-colors (setq hl-todo-keyword-faces `((\u0026#34;HOLD\u0026#34; . ,yellow) (\u0026#34;TODO\u0026#34; . ,red) (\u0026#34;NEXT\u0026#34; . ,blue) (\u0026#34;THEM\u0026#34; . ,magenta) (\u0026#34;PROG\u0026#34; . ,cyan-warmer) (\u0026#34;OKAY\u0026#34; . ,green-warmer) (\u0026#34;DONT\u0026#34; . ,yellow-warmer) (\u0026#34;FAIL\u0026#34; . ,red-warmer) (\u0026#34;BUG\u0026#34; . ,red-warmer) (\u0026#34;DONE\u0026#34; . ,green) (\u0026#34;NOTE\u0026#34; . ,blue-warmer) (\u0026#34;KLUDGE\u0026#34; . ,cyan) (\u0026#34;HACK\u0026#34; . ,cyan) (\u0026#34;TEMP\u0026#34; . ,red) (\u0026#34;FIXME\u0026#34; . ,red-warmer) (\u0026#34;XXX+\u0026#34; . ,red-warmer) (\u0026#34;REVIEW\u0026#34; . ,red) (\u0026#34;DEPRECATED\u0026#34; . ,yellow))))) (add-hook \u0026#39;ef-themes-post-load-hook #\u0026#39;my-ef-themes-hl-todo-faces) ;; Read the doc string or manual for this one. The symbols can be ;; combined in any order. (setq ef-themes-region \u0026#39;(intense no-extend neutral)) (defun my-ef-themes-mode-line () \u0026#34;Tweak the style of the mode lines.\u0026#34; (ef-themes-with-colors (custom-set-faces ;; `(mode-line ((,c :background ,bg-active :foreground ,fg-main))) ;; `(mode-line-inactive ((,c :background ,bg-alt :foreground ,fg-dim))) `(tab-bar ((,c :inherit ef-themes-ui-variable-pitch :background ,bg-tab-bar))) `(tab-line ((,c :inherit ef-themes-ui-variable-pitch :background ,bg-tab-bar :height 0.95))) `(powerline-active2 ((,c :inherit mode-line-active))) `(org-mode-line-clock ((,c :inherit bold :foreground ,modeline-info))) `(org-mode-line-clock-overrun ((,c :inherit bold :foreground ,modeline-err))) ;; `(wcheck-default-face ((,c :foreground ,red-cooler :underline ;; (:color foreground-color :style wave :position nil)))) ))) (add-hook \u0026#39;ef-themes-post-load-hook #\u0026#39;my-ef-themes-mode-line) ) ) standard-themes # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 (defun jh-visual/init-standard-themes () (use-package standard-themes :defer :demand t :config (setq standard-themes-italic-constructs t) (setq standard-themes-bold-constructs t) (setq standard-themes-mode-line-accented nil) (setq standard-themes-common-palette-overrides `( (standard-themes-heading-0 bg-dim) ; title (standard-themes-heading-3 bg-blue-subtle) (standard-themes-heading-4 bg-magenta-subtle) )) (setq standard-themes-region \u0026#39;(intense no-extend neutral)) (setq standard-themes-prompts \u0026#39;(bold)) (setq standard-themes-links (quote (neutral-underline faint))) (setq standard-themes-fringes \u0026#39;intense) ; \u0026#39;subtle (when (display-graphic-p) ; gui (setq standard-themes-mixed-fonts nil) (setq standard-themes-variable-pitch-ui t) (setq standard-themes-headings \u0026#39;( (0 . (variable-pitch bold 1.3)) (1 . (variable-pitch bold 1.2)) (2 . (variable-pitch semibold 1.05)) (3 . (variable-pitch semibold)) (4 . (variable-pitch medium)) (7 . (variable-pitch bold )) (8 . (variable-pitch bold )) (agenda-date . (variable-pitch semibold 1.2)) (agenda-structure . (variable-pitch semibold 1.1)) (t . (variable-pitch medium 1.0)))) ) ; end-of gui (defun my-standard-themes-hl-todo-faces () \u0026#34;Configure `hl-todo-keyword-faces\u0026#39; with Standard themes colors. The exact color values are taken from the active Standard theme.\u0026#34; (standard-themes-with-colors (setq hl-todo-keyword-faces `((\u0026#34;HOLD\u0026#34; . ,yellow) (\u0026#34;TODO\u0026#34; . ,red) (\u0026#34;NEXT\u0026#34; . ,blue) (\u0026#34;THEM\u0026#34; . ,magenta) (\u0026#34;PROG\u0026#34; . ,cyan-warmer) (\u0026#34;OKAY\u0026#34; . ,green-warmer) (\u0026#34;DONT\u0026#34; . ,yellow-warmer) (\u0026#34;FAIL\u0026#34; . ,red-warmer) (\u0026#34;BUG\u0026#34; . ,red-warmer) (\u0026#34;DONE\u0026#34; . ,green) (\u0026#34;NOTE\u0026#34; . ,blue-warmer) (\u0026#34;KLUDGE\u0026#34; . ,cyan) (\u0026#34;HACK\u0026#34; . ,cyan) (\u0026#34;TEMP\u0026#34; . ,red) (\u0026#34;FIXME\u0026#34; . ,red-warmer) (\u0026#34;XXX+\u0026#34; . ,red-warmer) (\u0026#34;REVIEW\u0026#34; . ,red) (\u0026#34;DEPRECATED\u0026#34; . ,yellow))))) (add-hook \u0026#39;standard-themes-post-load-hook #\u0026#39;my-standard-themes-hl-todo-faces) (defun my-standard-themes-mode-line () \u0026#34;Tweak the style of the mode lines.\u0026#34; (standard-themes-with-colors (custom-set-faces `(tab-bar ((,c :inherit standard-themes-ui-variable-pitch :background ,bg-tab))) `(tab-line ((,c :inherit standard-themes-ui-variable-pitch :background ,bg-tab :height 0.9))) ;; `(mode-line ((,c :background ,bg-active :foreground ,fg-main))) ;; `(mode-line-inactive ((,c :background ,bg-alt :foreground ,fg-dim))) ;; `(powerline-active2 ((,c :inherit mode-line-active))) `(org-mode-line-clock ((,c :inherit bold :foreground ,modeline-info))) `(org-mode-line-clock-overrun ((,c :inherit bold :foreground ,modeline-err))) ;; `(wcheck-default-face ((,c :foreground ,red-cooler :underline ;; (:color foreground-color :style wave :position nil)))) ))) (add-hook \u0026#39;standard-themes-post-load-hook #\u0026#39;my-standard-themes-mode-line) ) ) modus-themes # [2022-11-19 Sat 06:29] 오 마이갓. 찰지게 테마가 나오는구나. 완벽해졌네. https://christiantietze.de/posts/2023/01/modus-themes-v4-changes/ 4.0 설정을 적용한다. minemacs 참고함. vterm, term, ansi color 설정이 Spacemacs 와 문제가 있는듯 -\u0026gt; 해결\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 ;; TODO 다시 테스트 해보고 정말 필요하면 다른 방법 찾아라. ;; (defun jh-visual/init-vterm () ;; (use-package vterm :ensure t) ; 미리 로딩 된 상태야 face 를 설정할 수 있다. ;; ) (defun jh-visual/init-modus-themes () (use-package modus-themes :demand t :init ;; Load the theme of your choice. ;; modus 테마 로더를 사용해야 위에 후크가 호출 된다. (setq modus-themes-to-toggle (let ((hr (nth 2 (decode-time)))) (if (or (\u0026lt; hr 7) (\u0026lt; 20 hr)) ; between 8 PM and 7 AM \u0026#39;(modus-vivendi-tinted modus-operandi-tinted) ; load dark theme first \u0026#39;(modus-operandi-tinted modus-vivendi-tinted)))) :config (require \u0026#39;modus-themes) ;; Load the theme of your choice. ;; Modus Toggle 로 불러올 때 아래 Hook 이 호출 된다. (defun my-modus-themes-colors () (modus-themes-with-colors (custom-set-faces `(vterm-color-black ((,c :background \u0026#34;gray25\u0026#34; :foreground \u0026#34;gray25\u0026#34;))) `(vterm-color-yellow ((,c :background ,yellow-intense :foreground ,yellow-intense))) ;; `(mode-line ((,c :inherit modus-themes-ui-variable-pitch ;; :background ,bg-mode-line-active ;; :foreground ,fg-mode-line-active))) ;; `(mode-line-inactive ((,c :inherit modus-themes-ui-variable-pitch ;; :background ,bg-mode-line-inactive ;; :foreground ,fg-mode-line-inactive))) `(powerline-active2 ((,c :inherit mode-line-active))) ; 전체 통일 `(org-mode-line-clock ((,c :inherit bold :foreground ,modeline-info))) `(org-mode-line-clock-overrun ((,c :inherit bold :foreground ,modeline-err))) `(tab-bar ((,c :inherit modus-themes-ui-variable-pitch :background ,bg-tab-bar))) `(tab-line ((,c :inherit modus-themes-ui-variable-pitch :background ,bg-tab-bar :height 0.95))) ;; `(wcheck-default-face ((,c :foreground ,red-cooler :underline ;; (:color foreground-color :style wave :position nil)))) ))) (setq modus-themes-italic-constructs nil modus-themes-bold-constructs t modus-themes-custom-auto-reload t modus-themes-disable-other-themes t ; default t ;; gray-background,\u0026#39;tinted-background modus-themes-org-blocks \u0026#39;gray-background ;; Options for `modus-themes-prompts\u0026#39; are either nil (the ;; default), or a list of properties that may include any of those ;; symbols: `italic\u0026#39;, `WEIGHT\u0026#39; modus-themes-prompts \u0026#39;(bold) ;; The `modus-themes-completions\u0026#39; is an alist that reads two ;; keys: `matches\u0026#39;, `selection\u0026#39;. Each accepts a nil value (or ;; empty list) or a list of properties that can include any of ;; the following (for WEIGHT read further below): ;; `matches\u0026#39; :: `underline\u0026#39;, `italic\u0026#39;, `WEIGHT\u0026#39; ;; `selection\u0026#39; :: `underline\u0026#39;, `italic\u0026#39;, `WEIGHT\u0026#39; modus-themes-completions \u0026#39;((matches . (semibold)) (selection . (semibold text-also))) ) ;; \u0026#39;M-x\u0026#39; modus-themes-preview-colors-current (setq modus-themes-common-palette-overrides `( ;; Customize the mode-line colors (fg-mode-line-active fg-main) ; Black ;; (bg-mode-line-active bg-blue-intense) ;; \u0026#34;Make the mode line borderless\u0026#34; (border-mode-line-active unspecified) (border-mode-line-inactive unspecified) ;; \u0026#34;Make matching parenthesis more or less intense\u0026#34; (bg-paren-match bg-magenta-intense) (underline-paren-match unspecified) ;; Links (underline-link border) (underline-link-visited border) (underline-link-symbolic border) ;; Comments are yellow, strings are green (comment yellow-cooler) (string green-warmer) ;; Intense magenta background combined with the main foreground (bg-region bg-magenta-subtle) (fg-region fg-main) ;; background for headings ;; (bg-heading-0 bg-dim) ; title ;; (bg-heading-1 bg-dim) ; heading ;; (bg-heading-2 bg-yellow-nuanced) ; bg-lavender ;; (bg-heading-3 bg-blue-nuanced) ; bg-lavender ;; (bg-heading-4 bg-magenta-nuanced) ; 어둡게 하는게 좋겠다. ;; overline for headings ;; (overline-heading-2 fg-heading-2) ;; (overline-heading-3 fg-heading-3) ;; (overline-heading-4 fg-heading-4) ;; (overline-heading-5 fg-heading-5) ;; And expand the preset here. Note that the ,@ works because we use ;; the backtick for this list, instead of a straight quote. ;; 현재 설정에 faint, intense 컬러 세트를 덮어쓰고 싶다면 ;; ,@modus-themes-preset-overrides-faint ;; ,@modus-themes-preset-overrides-intense ) ) (when (display-graphic-p) ; ;; Users may need to explicitly configure the font family of ;; fixed-pitch in order to get a consistent experience with their ;; typography (also check the fontaine package on GNU ELPA (by ;; Protesilaos)). (setq modus-themes-mixed-fonts nil) ;; In all of the following, WEIGHT is a symbol such as `semibold\u0026#39;, ;; `light\u0026#39;, `bold\u0026#39;, or anything mentioned in `modus-themes-weights\u0026#39;. (setq modus-themes-variable-pitch-ui t) ;; The `modus-themes-headings\u0026#39; is an alist: read the manual\u0026#39;s ;; node about it or its doc string. Basically, it supports ;; per-level configurations for the optional use of ;; `variable-pitch\u0026#39; typography, a height value as a multiple of ;; the base font size (e.g. 1.5), and a `WEIGHT\u0026#39;. (setq modus-themes-headings \u0026#39;( (0 . (variable-pitch bold 1.3)) (1 . (variable-pitch bold 1.2)) (2 . (variable-pitch semibold 1.05)) (3 . (variable-pitch semibold )) (4 . (variable-pitch medium )) (7 . (variable-pitch bold )) (8 . (variable-pitch bold )) (agenda-date . (variable-pitch bold 1.2)) (agenda-structure . (variable-pitch bold 1.1)) (t . (variable-pitch medium 1.0)))) ) ; end-of gui-mode (add-hook \u0026#39;modus-themes-after-load-theme-hook #\u0026#39;my-modus-themes-colors) ) ; end-of use-package ) ; end-of defun ;; (add-hook \u0026#39;spacemacs-post-user-config-hook #\u0026#39;modus-themes-toggle 80) Fonts functions # korean-hangul modal states # pA0k.su 님의 korean-layer 리포를 가져와서 파일 하나로 만들었다. 이게 관리하기가 이게 편하다. /home/junghan/spacemacs/elpa/29.0/develop/unicode-fonts-20220713.1837/unicode-fonts.el\n1 2 3 4 5 6 7 8 9 10 11 12 13 ;; 입력 모드에서만 한영 변환 가능! (defun jh-visual/pre-init-evil () (spacemacs|use-package-add-hook evil :post-config (advice-add \u0026#39;evil-normal-state :before #\u0026#39;jh-visual//turn-off-input-method) (mapc (lambda (mode) (let ((keymap (intern (format \u0026#34;evil-%s-state-map\u0026#34; mode)))) (define-key (symbol-value keymap) [?\\S- ] #\u0026#39;(lambda () (interactive) (message (format \u0026#34;Input method is disabled in %s state.\u0026#34; evil-state)))))) \u0026#39;(motion normal visual))) ) 1 2 3 4 5 6 7 8 +------------+------------+ | 일이삼사오 | 일이삼사오 | +------------+------------+ | ABCDEFGHIJ | ABCDEFGHIJ | +------------+------------+ | 1234567890 | 1234567890 | +------------+------------+ | 일이삼사오 | 일이삼사오 | | abcdefghij | abcdefghij | +------------+------------+ hl-todo only for prog-mode # magit todo 에 의존성이 있기에 hl-todo 를 사용한다. 다만 prog-mode 에만 활용하면 된다. 좋은 정책이다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 ;; Highlight TODO, FIXME.... (defun jh-visual/init-hl-todo () (use-package hl-todo ;; :hook (after-init . global-hl-todo-mode) :init (setq hl-todo-keyword-faces \u0026#39;((\u0026#34;HOLD\u0026#34; . \u0026#34;#d0bf8f\u0026#34;) (\u0026#34;TODO\u0026#34; . \u0026#34;#cc9393\u0026#34;) (\u0026#34;NEXT\u0026#34; . \u0026#34;#dca3a3\u0026#34;) (\u0026#34;THEM\u0026#34; . \u0026#34;#dc8cc3\u0026#34;) (\u0026#34;PROG\u0026#34; . \u0026#34;#7cb8bb\u0026#34;) (\u0026#34;OKAY\u0026#34; . \u0026#34;#7cb8bb\u0026#34;) (\u0026#34;DONT\u0026#34; . \u0026#34;#5f7f5f\u0026#34;) (\u0026#34;FAIL\u0026#34; . \u0026#34;#8c5353\u0026#34;) (\u0026#34;DONE\u0026#34; . \u0026#34;#afd8af\u0026#34;) (\u0026#34;NOTE\u0026#34; . \u0026#34;#d0bf8f\u0026#34;) (\u0026#34;KLUDGE\u0026#34; . \u0026#34;#d0bf8f\u0026#34;) (\u0026#34;HACK\u0026#34; . \u0026#34;#d0bf8f\u0026#34;) (\u0026#34;TEMP\u0026#34; . \u0026#34;#d0bf8f\u0026#34;) (\u0026#34;FIXME\u0026#34; . \u0026#34;#cc9393\u0026#34;) (\u0026#34;XXXX*\u0026#34; . \u0026#34;#cc9393\u0026#34;) (\u0026#34;BUG\u0026#34; . \u0026#34;#ee5555\u0026#34;) (\u0026#34;PROJ\u0026#34; . \u0026#34;#447f44\u0026#34;) (\u0026#34;IDEA\u0026#34; . \u0026#34;#0fa050\u0026#34;) (\u0026#34;INFO\u0026#34; . \u0026#34;#0e9030\u0026#34;) (\u0026#34;TWEAK\u0026#34; . \u0026#34;#fe9030\u0026#34;) (\u0026#34;PERF\u0026#34; . \u0026#34;#e09030\u0026#34;) (\u0026#34;REVIEW\u0026#34; . \u0026#34;#8c5353\u0026#34;) (\u0026#34;DEPRECATED\u0026#34; . \u0026#34;#e09030\u0026#34;))) :config (message \u0026#34;global-hl-todo-mode\u0026#34;) (global-hl-todo-mode) )) Icons # nerd-icons # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 (defun jh-visual/init-nerd-icons () (use-package nerd-icons ;; :unless window-system ; terminal :ensure :custom ;; (nerd-icons-font-family \u0026#34;Symbols NF\u0026#34;) (nerd-icons-font-family \u0026#34;Sarasa Term K Nerd Font\u0026#34;) )) (defun jh-visual/init-nerd-icons-completion () (use-package nerd-icons-completion ;; :unless window-system :ensure :after (marginalia nerd-icons) :config (nerd-icons-completion-mode))) (defun jh-visual/init-nerd-icons-dired () (use-package nerd-icons-dired ;; :unless window-system :after (nerd-icons) :hook (dired-mode . nerd-icons-dired-mode))) kind-icon # 기본 설정을 이용한다. 다만, 아이콘이 나타나지 않는 경우는 왜?\n1 2 3 4 5 6 7 8 9 10 11 12 13 (defun jh-visual/init-kind-icon () (use-package kind-icon :ensure :after corfu nerd-icons :custom (kind-icon-default-face \u0026#39;corfu-default) ; Have background color be the same as `corfu\u0026#39; face background :config (add-to-list \u0026#39;corfu-margin-formatters #\u0026#39;kind-icon-margin-formatter) (setq kind-icon-default-style \u0026#39;(:padding 0 :stroke 0 :margin 0 :radius 0 :height 0.9 :scale 0.9)) ;; (add-hook \u0026#39;spacemacs-post-theme-change-hook \u0026#39;kind-icon-reset-cache) ; move to fontaine (unless (display-graphic-p) ; terminal (setq kind-icon-use-icons nil)) )) popup # 1 2 3 4 5 6 7 8 (defun jh-visual/init-popup () (use-package popup :config (define-key popup-menu-keymap (kbd \u0026#34;C-j\u0026#34;) \u0026#39;popup-next) (define-key popup-menu-keymap (kbd \u0026#34;C-k\u0026#34;) \u0026#39;popup-previous) (define-key popup-menu-keymap (kbd \u0026#34;C-n\u0026#34;) \u0026#39;popup-next) (define-key popup-menu-keymap (kbd \u0026#34;C-p\u0026#34;) \u0026#39;popup-previous) )) Advanced Managing Popup windows # Customizing popwin # home/junghan/spacemacs/layers/+spacemacs/spacemacs-visual/packages.el 여기 보면 좀 정리할 필요가 있다. 이런 식으로 간단하게 등록할 수 있게 되어있다. 빼든가 바꾸든가 하면 된다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 (defun jh-visual/pre-init-popwin () (spacemacs|use-package-add-hook popwin :post-config ;; (push \u0026#39;(\u0026#34;\\\\*-vterm-\\\\*\u0026#34; :dedicated t :position right :stick t :noselect nil :width 70) popwin:special-display-config) ;; (push \u0026#39;(dired-mode :dedicated t :position left :stick t :noselect nil :width 65) popwin:special-display-config) ;; (push \u0026#39;(\u0026#34;*Keyboard layout*\u0026#34; :dedicated t :position bottom :stick t :noselect t :height 13) popwin:special-display-config) ;; (push \u0026#39;(\u0026#34;*Ilist*\u0026#34; :dedicated t :position right :stick t :noselect t :width 80) popwin:special-display-config) (push \u0026#39;(\u0026#34;*org-roam*\u0026#34; :dedicated t :position right :stick t :noselect t :width 82) popwin:special-display-config) (push \u0026#39;(telega-chat-mode :dedicated t :position right :stick t :noselect t :width 60) popwin:special-display-config) (push \u0026#39;(telega-root-mode :dedicated t :position bottom :stick t :noselect t :height 0.4) popwin:special-display-config) ;; (push \u0026#39;(org-agenda-mode :dedicated t :position right :stick t :noselect nil :width 80) popwin:special-display-config) ;; bottom and popper ;; (push \u0026#39;(flymake-diagnostics-buffer-mode :dedicated t :position bottom :stick t :noselect t :width 0.3 :height 0.3) popwin:special-display-config) ;; (push \u0026#39;(\u0026#34;\\\\*Async-native-compile-log\\\\*\u0026#34; :dedicated t :position bottom :stick t :noselect t) popwin:special-display-config) ;; (push \u0026#39;(\u0026#34;^\\\\*EGLOT\u0026#34; :dedicated t :position bottom :stick t :noselect t :height 0.4) popwin:special-display-config) ;; (push \u0026#39;(helpful-mode :dedicated t :position bottom :stick t :noselect t :height 0.4) popwin:special-display-config) ;; (push \u0026#39;(\u0026#34;*info*\u0026#34; :dedicated t :position bottom :stick t :noselect t :height 0.4) popwin:special-display-config) ;; (push \u0026#39;(\u0026#34;*command-log*\u0026#34; :dedicated t :position bottom :stick t :noselect t :height 0.4) popwin:special-display-config) ;; (push \u0026#39;(\u0026#34;*eldoc*\u0026#34; :dedicated t :position bottom :stick t :noselect t :height 0.4) popwin:special-display-config) ) ) Popper # GitHub - karthink/popper: Emacs minor-mode to summon and \u0026hellip; Popper is a minor-mode to tame the flood of ephemeral windows Emacs produces, while still keeping them within arm\u0026rsquo;s reach. Designate any buffer to \u0026ldquo;popup\u0026rdquo; status, and it will stay out of your way. Disimss or summon it easily with one key. Cycle through all your \u0026ldquo;popups\u0026rdquo; or just the ones relevant to your current buffer. Useful for many things, including toggling display of REPLs, documentation, compilation or shell output, etc.\nPopup placement controlled using display-buffer-alist or shackle.el: If you already have rules in place for how various buffers should be displayed, such as by customizing display-buffer-alist or with shackle.el, popper will respect them once you set popper-display-control to nil:\n2023-05-04 popwin 과 popper 의 상생 모델을 만들었다 shackle 은 레이아웃 관리 역할이다. 이건 popwin 이 할 수 있다. popwin 으로 다 규칙을 잡자. 그리고 버퍼의 관리만 popper 가 하는 것이다. 버퍼를 보고 지우고 하는 것은 아주 편리하다. 그리고 강력하다.\n이렇게 되면 기존 Spacemacs 의 방식을 고수하면서 버퍼를 조금 더 효과적으로 관리할 수 있다. 일단 이렇게 해보고 안되면 지우면 된다. 기본은 살려두는 거니까. 문제 될 게 없다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 (defun jh-visual/init-popper () (use-package popper :ensure t :config (setq popper-echo-dispatch-keys \u0026#39;(\u0026#34;a\u0026#34; \u0026#34;s\u0026#34; \u0026#34;d\u0026#34; \u0026#34;f\u0026#34; \u0026#34;g\u0026#34;)) (setq popper-mode-line \u0026#39;(:eval (propertize \u0026#34; POP \u0026#34; \u0026#39;face \u0026#39;mode-line-emphasis))) ; emphasis (setq popper-display-control nil) ; use popwin and display-buffer-alist (setq popper-reference-buffers \u0026#39;(\u0026#34;\\\\*Messages\\\\*\u0026#34; \u0026#39;((\u0026#34;^\\\\*Warnings\\\\*$\u0026#34; . hide) (\u0026#34;^\\\\*Compile-Log\\\\*$\u0026#34; . hide) \u0026#34;^\\\\*Matlab Help.*\\\\*$\u0026#34; ;; \u0026#34;^\\\\*Messages\\\\*$\u0026#34; \u0026#34;^\\\\*Backtrace\\\\*\u0026#34; \u0026#34;^\\\\*evil-registers\\\\*\u0026#34; \u0026#34;^\\\\*Apropos\u0026#34; \u0026#34;^Calc:\u0026#34; \u0026#34;^\\\\*eldoc\\\\*\u0026#34; \u0026#34;^\\\\*TeX errors\\\\*\u0026#34; \u0026#34;^\\\\*ielm\\\\*\u0026#34; \u0026#34;^\\\\*TeX Help\\\\*\u0026#34; \u0026#34;^\\\\*ChatGPT\\\\*\u0026#34; \u0026#34;^\\\\*gptel-quick\\\\*\u0026#34; \u0026#34;\\\\*Shell Command Output\\\\*\u0026#34; (\u0026#34;\\\\*Async Shell Command\\\\*\u0026#34; . hide) \u0026#34;\\\\*Completions\\\\*\u0026#34; \u0026#34;[Oo]utput\\\\*\u0026#34;) ;; \u0026#34;Output\\\\*$\u0026#34; \u0026#34;\\\\*Async-native-compile-log\\\\*\u0026#34; ; JH \u0026#34;^\\\\*EGLOT\u0026#34; ; JH \u0026#34;^\\\\*Flycheck.+\\\\*$\u0026#34; ; JH \u0026#34;*info*\u0026#34; ; JH \u0026#34;*Ilist*\u0026#34; ; JH ;; \u0026#34;*command-log*\u0026#34; ; JH ;; treemacs-mode ; JH \u0026#34;*Go-Translate*\u0026#34; ; JH help-mode telega-chat-mode helpful-mode compilation-mode process-menu-mode special-mode flymake-diagnostics-buffer-mode)) (global-set-key (kbd \u0026#34;C-`\u0026#34;) \u0026#39;popper-toggle-latest) (global-set-key (kbd \u0026#34;C-~\u0026#34;) \u0026#39;popper-kill-latest-popup) (global-set-key (kbd \u0026#34;M-`\u0026#34;) \u0026#39;popper-cycle) (global-set-key (kbd \u0026#34;C-M-`\u0026#34;) \u0026#39;popper-toggle-type) (popper-mode +1) (popper-echo-mode +1) )) Funcs # 1 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- line-spacing toggle # int : pixels 1 2 3 4 5 6 7 8 9 10 11 (defun my/toggle-line-spacing () \u0026#34;Toggle line spacing between no extra space to extra half line height. URL `http://ergoemacs.org/emacs/emacs_toggle_line_spacing.html\u0026#39; Version 2015-12-17\u0026#34; (interactive) (if (null line-spacing) ;; (setq line-spacing 0.5) ; add 0.5 height between lines (setq line-spacing 1) ; add 0.5 height between lines (setq line-spacing nil) ; no extra heigh between lines ) (redraw-frame (selected-frame))) embiggen text # 1 2 3 4 5 6 7 8 (defun embiggen-text () (interactive) (text-scale-increase 1) ) (defun ensmallen-text () (interactive) (text-scale-decrease 1) ) Configs # 1 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- Base # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 (defvar show-keyboard-layout nil \u0026#34;If non nil, show keyboard layout in special buffer.\u0026#34;) (setq default-input-method \u0026#34;korean-hangul\u0026#34;) (set-language-environment \u0026#34;Korean\u0026#34;) (set-keyboard-coding-system \u0026#39;utf-8) (setq locale-coding-system \u0026#39;utf-8) (prefer-coding-system \u0026#39;utf-8) (set-charset-priority \u0026#39;unicode) (set-default-coding-systems \u0026#39;utf-8) (set-terminal-coding-system \u0026#39;utf-8) (setq-default buffer-file-coding-system \u0026#39;utf-8-unix) (unless (spacemacs/system-is-mswindows) (set-selection-coding-system \u0026#39;utf-8)) ;; Treat clipboard input as UTF-8 string first; compound text next, etc. (setq x-select-request-type \u0026#39;(UTF8_STRING COMPOUND_TEXT TEXT STRING)) ;; terminal-mode is nil (setq-default line-spacing 2) ; 3 ;; 날짜 표시를 영어로한다. org mode에서 time stamp 날짜에 영향을 준다. (setq system-time-locale \u0026#34;C\u0026#34;) ;; (setenv \u0026#34;LANG\u0026#34; \u0026#34;en_US.UTF-8\u0026#34;) ;; (setenv \u0026#34;LC_ALL\u0026#34; \u0026#34;en_US.UTF-8\u0026#34;) (setq input-method-verbose-flag nil input-method-highlight-flag nil) Emoji and Symbol # 1 2 3 4 5 6 7 8 9 (defun jh-visual/emoji-set-font () (set-fontset-font t \u0026#39;emoji (font-spec :family \u0026#34;Apple Color Emoji\u0026#34;) nil \u0026#39;prepend) (set-fontset-font t \u0026#39;emoji (font-spec :family \u0026#34;Noto Color Emoji\u0026#34;) nil \u0026#39;prepend) ; Top (set-fontset-font t \u0026#39;symbol (font-spec :family \u0026#34;Symbola\u0026#34;) nil \u0026#39;prepend) (set-fontset-font t \u0026#39;symbol (font-spec :family \u0026#34;Noto Sans Symbols 2\u0026#34;) nil \u0026#39;prepend) (set-fontset-font t \u0026#39;symbol (font-spec :family \u0026#34;Noto Sans Symbols\u0026#34;) nil \u0026#39;prepend) (set-fontset-font t \u0026#39;symbol (font-spec :family \u0026#34;Noto Color Emoji\u0026#34;) nil \u0026#39;prepend)) ; Top (add-hook \u0026#39;after-init-hook #\u0026#39;jh-visual/emoji-set-font) ;; (add-hook \u0026#39;spacemacs-post-user-config-hook #\u0026#39;jh-visual/korean-set-font) Themes Tweaks # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 (defun jh-visual//theme--tweaks-h (\u0026amp;optional _) (interactive) \u0026#34;Use smaller font (90% of the default) for line numbers in graphic mode.\u0026#34; (when (display-graphic-p) (set-face-attribute \u0026#39;line-number nil :background (face-attribute \u0026#39;default :background) :height (truncate (* 0.90 (face-attribute \u0026#39;default :height))) :weight \u0026#39;semi-light) (set-face-attribute \u0026#39;line-number-current-line nil :height (truncate (* 0.90 (face-attribute \u0026#39;default :height))) :weight \u0026#39;bold))) (spacemacs|do-after-display-system-init (jh-visual//theme--tweaks-h)) (add-hook \u0026#39;spacemacs-post-theme-change-hook #\u0026#39;jh-visual//theme--tweaks-h) ;; (add-hook \u0026#39;after-init-hook #\u0026#39;+theme--tweaks-h) ; not work on spacemacs ;; (add-hook \u0026#39;enable-theme-functions #\u0026#39;+theme--tweaks-h) ;; copy from \u0026#39;asok-dot-spacemacs/.spacemacs:975\u0026#39; (defadvice load-theme (before theme-dont-propagate activate) (mapc #\u0026#39;disable-theme custom-enabled-themes)) Time-format and world-clock # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 ;; (setq display-time-format \u0026#34;|W%U|%y-%m-%d|%H:%M|\u0026#34;) (setq display-time-format \u0026#34; | %a %e %b, %H:%M | \u0026#34;) ;; Covered by `display-time-format\u0026#39; ;; (setq display-time-24hr-format t) ;; (setq display-time-day-and-date t) (setq display-time-interval 5) ; 60 (setq display-time-default-load-average nil) ;; NOTE 2022-09-21: For all those, I have implemented my own solution ;; that also shows the number of new items, although it depends on ;; notmuch: the `notmuch-indicator\u0026#39; package. (setq display-time-mail-directory nil) (setq display-time-mail-function nil) (setq display-time-use-mail-icon nil) (setq display-time-mail-string nil) (setq display-time-mail-face nil) ;; World clock (setq zoneinfo-style-world-list \u0026#39;((\u0026#34;America/Los_Angeles\u0026#34; \u0026#34;Los Angeles\u0026#34;) (\u0026#34;America/Chicago\u0026#34; \u0026#34;Chicago\u0026#34;) (\u0026#34;Brazil/Acre\u0026#34; \u0026#34;Rio Branco\u0026#34;) (\u0026#34;America/New_York\u0026#34; \u0026#34;New York\u0026#34;) (\u0026#34;Brazil/East\u0026#34; \u0026#34;Brasília\u0026#34;) (\u0026#34;Europe/Lisbon\u0026#34; \u0026#34;Lisbon\u0026#34;) (\u0026#34;Europe/Brussels\u0026#34; \u0026#34;Brussels\u0026#34;) (\u0026#34;Europe/Athens\u0026#34; \u0026#34;Athens\u0026#34;) (\u0026#34;Asia/Tbilisi\u0026#34; \u0026#34;Tbilisi\u0026#34;) (\u0026#34;Asia/Yekaterinburg\u0026#34; \u0026#34;Yekaterinburg\u0026#34;) (\u0026#34;Asia/Shanghai\u0026#34; \u0026#34;Shanghai\u0026#34;) (\u0026#34;Asia/Seoul\u0026#34; \u0026#34;Seoul\u0026#34;) (\u0026#34;Asia/Vladivostok\u0026#34; \u0026#34;Vladivostok\u0026#34;))) ;; All of the following variables are for Emacs 28 (setq world-clock-list t) (setq world-clock-time-format \u0026#34;%R %z %A %d %B\u0026#34;) (setq world-clock-buffer-name \u0026#34;*world-clock*\u0026#34;) ; Placement handled by `display-buffer-alist\u0026#39; (setq world-clock-timer-enable t) (setq world-clock-timer-second 60) Goto-address-mode # 1 2 3 4 (setq goto-address-url-face \u0026#39;link goto-address-url-mouse-face \u0026#39;highlight goto-address-mail-face nil goto-address-mail-mouse-face \u0026#39;highlight) Buffered window display-buffer-alist # popwin 으로 Org-Select 가 제어가 안된다. 빌트인으로 해볼까?\nOrg-Select for org-capture\nEmbark Actions\nOutput, Register Preview\nCalendar and \u0026hellip;\nshackle 로 통합해야 함\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 ;; /prot-dotfiles/emacs/.emacs.d/prot-emacs-modules/prot-emacs-window.el:55 (add-to-list \u0026#39;display-buffer-alist ;; bottom side window `(\u0026#34;\\\\*Org Select\\\\*\u0026#34; ; the `org-capture\u0026#39; key selection (display-buffer-in-side-window) (dedicated . t) (side . bottom) (slot . 0) (window-parameters . ((mode-line-format . none))))) (add-to-list \u0026#39;display-buffer-alist `(\u0026#34;\\\\*Embark Actions\\\\*\u0026#34; (display-buffer-reuse-mode-window display-buffer-at-bottom) (window-height . fit-window-to-buffer) (window-parameters . ((no-other-window . t) (mode-line-format . none))))) (add-to-list \u0026#39;display-buffer-alist `(\u0026#34;\\\\*\\\\(Output\\\\|Register Preview\\\\).*\u0026#34; (display-buffer-reuse-mode-window display-buffer-at-bottom))) (add-to-list \u0026#39;display-buffer-alist `(\u0026#34;\\\\*\\\\(Calendar\\\\|Bookmark Annotation\\\\|Buffer List\\\\).*\u0026#34; (display-buffer-reuse-mode-window display-buffer-below-selected) (window-height . fit-window-to-buffer))) Keybindings # 1 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- basics # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ;; (global-set-key [?\\C-\\\\] \u0026#39;jh-visual//change-input-method) (global-set-key (kbd \u0026#34;\u0026lt;S-SPC\u0026gt;\u0026#34;) \u0026#39;toggle-input-method) ;; (global-set-key (kbd \u0026#34;\u0026lt;Alt_R\u0026gt;\u0026#34;) \u0026#39;toggle-input-method) (global-set-key (kbd \u0026#34;\u0026lt;Hangul\u0026gt;\u0026#34;) \u0026#39;toggle-input-method) ;; (global-unset-key (kbd \u0026#34;S-SPC\u0026#34;)) (spacemacs/set-leader-keys \u0026#34;ii\u0026#34; \u0026#39;insert-char) (when (\u0026gt; emacs-major-version 28) ; emacs 29 (spacemacs/set-leader-keys \u0026#34;ie\u0026#34; #\u0026#39;emoji-search)) (spacemacs/set-leader-keys \u0026#34;T,\u0026#34; \u0026#39;ef-themes-load-random-light) (spacemacs/set-leader-keys \u0026#34;T.\u0026#34; \u0026#39;ef-themes-load-random-dark) (spacemacs/set-leader-keys \u0026#34;T/\u0026#34; \u0026#39;modus-themes-toggle) (spacemacs/set-leader-keys \u0026#34;T?\u0026#34; \u0026#39;standard-themes-toggle) (spacemacs/set-leader-keys \u0026#34;Tl\u0026#34; \u0026#39;my/toggle-line-spacing) embiggen text # 1 2 (global-set-key (kbd \u0026#34;C-+\u0026#34;) \u0026#39;embiggen-text) (global-set-key (kbd \u0026#34;C-_\u0026#34;) \u0026#39;ensmallen-text) popup # 1 2 (spacemacs/set-leader-keys \u0026#34;;\u0026#34; \u0026#39;popper-toggle-latest) (spacemacs/set-leader-keys \u0026#34;:\u0026#34; \u0026#39;popper-kill-latest-popup) "},{"id":26,"href":"/configs/emacs/jh-workspace/","title":"jh-workspace layer","section":"menu/Dotfiles/dot-emacs","content":" jh-workspace Goals # jh-workspace\nLayer # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (configuration-layer/declare-layer-dependencies \u0026#39;( ;; Grouping buffers with ibuffer ;; ibuffer :: SPC b I, C-x C-b ;; refresh :: g r, fliter group :: g j/k, ][, TAB/S-TAB, M-n/p (ibuffer :variables ibuffer-old-time 8 ; buffer considered old after that many hours ibuffer-show-empty-filter-groups nil ibuffer-group-buffers-by \u0026#39;projects) ;; (tabs :variables ;; tabs-auto-hide nil ;; tabs-icons t ;; centaur-tabs-plain-icons t ;; centaur-tabs-set-close-button nil ;; centaur-tabs-style \u0026#34;bar\u0026#34; ;; tabs-headline-match t ;; tabs-selected-tab-bar \u0026#39;under ;; ;; centaur-tabs-label-fixed-length 8 ;; centaur-tabs-enable-key-bindings t ;; ;; centaur-tabs-modified-marker \u0026#34;*\u0026#34; ;; tabs-group-by-project t ;; ) ;; SPC TAB restricted to current layout buffers ;; Kill buffers when killing layer - SPC l x ;; eyebrowse persp-mode consult spaceline ;; 2023-04-07 persp-mode + tab-bar 로 해보려고 한다. 간단하게 해보자. ;; 2023-04-21 보름전에 이렇게 써놨다니. 헐. (spacemacs-layouts :variables spacemacs-layouts-restrict-spc-tab t persp-autokill-buffer-on-remove \u0026#39;kill-weak) ;; 23/01/02--15:53 :: only use spacemacs-visual (popwin) ;; 23/01/09--14:27 :: need robust window-purposed ;; 2023-04-21 persp-mode + tab-bar 로 커버가 될 것 같은데? ;; 2023-04-28 다시 시도해보자 ;; 2023-05-04 끈다. poppe+shackle 로 가볍게 가보려고 한다. popwin 내릴꺼다. ;; 2023-05-04 아니다, 다시 켠다. 공생하는 방법을 찾아보자. spacemacs-purpose )) Packages # Packages # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (defconst jh-workspace-packages \u0026#39;( ;; built-ins tab-bar persp-mode ;; centaur-tabs ;; 새로 등록하는 패키지 keycast bufler ;; (tabspaces :location (recipe :fetcher github :repo \u0026#34;mclear-tools/tabspaces\u0026#34;) ;; ;; :toggle (version\u0026lt; \u0026#34;29.0.50\u0026#34; emacs-version) ;; ) ;; beframe )) Built-in iBuffer with Spacemacs # 버퍼 관리가 워크셋 관리이자 프로젝트 관리이다. ibuffer layer 와 bufler 가 동일한 기능을 제공하는 것 같다. 뭐가 더 특별한가? 없으면 레이어 기본을 쓰는게 옳은 선택이 된다.\n굉장히 어려운 주제가 아닐까 싶다.\n결국 버퍼 관리가 시작과 끝이다. 아래에 보면 버퍼 관리하는 패키지가 엄청 나게 많다. 사실 ibuffer 를 제외하면 이래저래 중복이 아니겠는가? 왜 필요하고 어떻게 추려야 하는가? 결국 사용자의 워크플로우에 따라서 결정할 일이다. 정리해보자.\nibuffer (using Spacemacs layer) Tabspace beframe bufler ibuffer 레이어를 활성화하면 된다. 그 전에 ibuffer 는 빌트인인데 뭐 더 특별한게 있는가? bufler 가 커버하는 부분이 아니던가?\nInformative Tab-bar with Keycast # Keycast Show cmds and bindings # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 (defun jh-workspace/init-keycast () (use-package keycast :ensure :config (setq keycast-tab-bar-minimal-width 30) ;; (setq keycast-tab-bar-format \u0026#34;%20s%k%c%r\u0026#34;) (dolist (input \u0026#39;(self-insert-command org-self-insert-command)) ;; (add-to-list \u0026#39;keycast-substitute-alist `(,input \u0026#34;.\u0026#34; \u0026#34;Typing…\u0026#34;))) (add-to-list \u0026#39;keycast-substitute-alist `(,input \u0026#34;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026#34; \u0026#34;Typing.....\u0026#34;))) (dolist (event \u0026#39;(mouse-event-p mouse-movement-p mwheel-scroll)) (add-to-list \u0026#39;keycast-substitute-alist `(,event nil))) )) Lovely Tab-bar # 탭바는 여러모로 유용하다. 워크 스페이스라고 생각하고 관리하면 편하다. 컨트롤 메타 숫자키는 따로 사용하는게 없으니 이동도 편하다. 23/01/06\u0026ndash;15:53 :: 탭바 숫자를 서클 타입으로 바꿈. 23/01/07\u0026ndash;19:02 :: Prot 탭바를 가져옴.\n서클을 사용하려면 hint 를 켜야 한다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 (defun jh-workspace/init-tab-bar () (use-package tab-bar :after keycast :ensure t :config (when (display-graphic-p) ; gui ;; https://christiantietze.de/posts/2022/02/emacs-tab-bar-numbered-tabs/ (defvar ct/circle-numbers-alist \u0026#39;((0 . \u0026#34;⓪\u0026#34;) (1 . \u0026#34;①\u0026#34;) (2 . \u0026#34;②\u0026#34;) (3 . \u0026#34;③\u0026#34;) (4 . \u0026#34;④\u0026#34;) (5 . \u0026#34;⑤\u0026#34;) (6 . \u0026#34;⑥\u0026#34;) (7 . \u0026#34;⑦\u0026#34;) (8 . \u0026#34;⑧\u0026#34;) (9 . \u0026#34;⑨\u0026#34;)) \u0026#34;Alist of integers to strings of circled unicode numbers.\u0026#34;) (defun ct/tab-bar-tab-name-format-default (tab i) (let ((current-p (eq (car tab) \u0026#39;current-tab)) (tab-num (if (and tab-bar-tab-hints (\u0026lt; i 10)) (alist-get i ct/circle-numbers-alist) \u0026#34;\u0026#34;))) (propertize (concat tab-num \u0026#34; \u0026#34; (alist-get \u0026#39;name tab) (or (and tab-bar-close-button-show (not (eq tab-bar-close-button-show (if current-p \u0026#39;non-selected \u0026#39;selected))) tab-bar-close-button) \u0026#34;\u0026#34;) \u0026#34; \u0026#34;) \u0026#39;face (funcall tab-bar-tab-face-function tab)))) (setq tab-bar-tab-name-format-function #\u0026#39;ct/tab-bar-tab-name-format-default) ) ; end-of display-graphic-p ;;; Custom layout ;; =C-M-\u0026lt;number\u0026gt; (setq tab-bar-select-tab-modifiers \u0026#39;(control meta)) (setq tab-bar-new-tab-choice \u0026#34;*scratch*\u0026#34;) ;; Tabs for window layouts (tab-bar.el and prot-tab.el) (setq tab-bar-close-button-show nil) (setq tab-bar-close-last-tab-choice nil) (setq tab-bar-close-tab-select \u0026#39;recent) (setq tab-bar-new-tab-to \u0026#39;right) (setq tab-bar-position nil) (setq tab-bar-show nil) ;; (setq tab-bar-separator nil) (setq tab-bar-tab-hints t) ; for tab-bar-circle-number (setq tab-bar-auto-width-max \u0026#39;(220 . 120)) ; Emacs 29 ;; (setq tab-bar-tab-name-function \u0026#39;tab-bar-tab-name-current) (setq tab-bar-tab-name-function #\u0026#39;+tab-bar-name-fn) ;;;###autoload (defun +tab-bar-name-fn () (let* ((project-name (projectile-project-name)) (buf-fname (buffer-file-name)) (buf-name (buffer-name)) (buf-dir (when buf-fname (file-name-directory buf-fname)))) (cond ((member major-mode \u0026#39;(gh-notify-mode)) buf-name) ;; project.el ((and project-name (not (string-equal \u0026#34;-\u0026#34; project-name))) project-name) ((eq \u0026#39;dired-mode major-mode) (projectile-project-name (projectile-project-root default-directory))) ((and buf-dir (projectile-project-p buf-dir)) (projectile-project-name (projectile-project-root buf-dir))) (buf-dir buf-dir) ((not (string-match-p \u0026#34;\\\\*Minibuf\u0026#34; buf-name)) buf-name)))) (when (\u0026gt; emacs-major-version 28) ; emacs 29 (setq tab-bar-auto-width t) (setq auto-resize-tab-bars t)) ;; 필요하다 (setq tab-bar-format ; Emacs 28 \u0026#39;(tab-bar-format-tabs-groups tab-bar-format-align-right tab-bar-format-global )) ;; C-x t 에 바인딩 되어 있다. ;; (defun tab-bar-switch-to-tab@override (name) ;; \u0026#34;Like `tab-bar-switch-to-tab\u0026#39;, but allow for the creation of a new, named tab on the fly.\u0026#34; ;; (interactive ;; (let* ((recent-tabs (mapcar (lambda (tab) ;; (alist-get \u0026#39;name tab)) ;; (tab-bar--tabs-recent)))) ;; (list (completing-read (format-prompt \u0026#34;Switch to tab by name\u0026#34; ;; (car recent-tabs)) ;; recent-tabs nil nil nil nil recent-tabs)))) ;; (if-let ((tab-number (tab-bar--tab-index-by-name name))) ;; (tab-bar-select-tab (1+ tab-number)) ;; (tab-bar-new-tab) ;; (tab-bar-rename-tab name))) ;; (advice-add #\u0026#39;tab-bar-switch-to-tab :override #\u0026#39;tab-bar-switch-to-tab@override) ;; (defun my/project-open-in-tab (project) ;; (interactive (list (project-prompt-project-dir))) ;; (if-let ((tab-number (tab-bar--tab-index-by-name ;; (file-name-nondirectory (directory-file-name project))))) ;; (tab-bar-select-tab (1+ tab-number)) ;; (tab-bar-new-tab) ;; (project-switch-project project) ;; (tab-bar-rename-tab (file-name-nondirectory (directory-file-name project))))) (require \u0026#39;keycast) (defun my/reload-tab-bar () (interactive) (setq tab-bar-show nil) (tab-bar-history-mode -1) (display-time-mode -1) (keycast-tab-bar-mode -1) (tab-bar-mode -1) ;; (tabspaces-mode 1) ; tabspaces (setq tab-bar-show t) (tab-bar-history-mode 1) (display-time-mode 1) (keycast-tab-bar-mode 1) (tab-bar-mode 1) ;; (tab-new) ;; (tab-bar-select-tab 1) ;; finally turn on centaur-tabs ;; (centaur-tabs-mode t) ) ) ;;;; Enable Hook ;; explicitly re-enable the cat for the first GUI client ;; 순서 상으로 먼저 탭바를 로드하고 테마를 로딩하는게 맞다. ;; (when (\u0026gt; emacs-major-version 28) ; emacs 29 (add-hook \u0026#39;after-init-hook #\u0026#39;my/reload-tab-bar) ;; ) ) ; end-of tab-bar persp-mode with tab-bar # [2023-06-01 Thu] 탭바와 통합을 하려고 한다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 ;; https://github.com/Bad-ptr/persp-mode.el/issues/122 (defun jh-workspace/post-init-persp-mode () (require \u0026#39;tab-bar) ;; Tab Bar maintains window layouts (with optional names). In this, it is ;; similar to Perspective. Unlike Perspective, it does not support buffer ;; lists. Using Perspective and Tab Bar at the same time is not recommended at ;; this time, since the tab list is global (i.e., will show up in all ;; perspectives) and is likely to cause confusion. It would be an interesting ;; future feature for ?Perspective to adopt the tab bar and allow keeping a ;; distinct set of tabs per-perspective. (add-hook \u0026#39;persp-before-deactivate-functions (defun +workspaces-save-tab-bar-data-h (_) (when (get-current-persp) (set-persp-parameter \u0026#39;tab-bar-tabs (tab-bar-tabs))))) (add-hook \u0026#39;persp-activated-functions (defun +workspaces-load-tab-bar-data-h (_) (tab-bar-tabs-set (persp-parameter \u0026#39;tab-bar-tabs)) (tab-bar--update-tab-bar-lines t))) ) ;; The snippet saves the configuration of tab-bar to files: ;; (add-hook ;; \u0026#39;persp-before-save-state-to-file-functions ;; (defun +workspaces-save-tab-bar-data-to-file-h (\u0026amp;rest _) ;; (when (get-current-persp) ;; (set-persp-parameter \u0026#39;tab-bar-tabs (frameset-filter-tabs (tab-bar-tabs) nil nil t)) ;; ) ;; ) Advanced Group-buffer Bufler # 2023-04-20 ibuffer persp grouping 하고 이건 끄자. ibuffer 레이어가 있지만 bufler 를 사용하기로 한다. 상세한 설정은 DW 님 닷에서 가져옴 세팅을 use-packge 로 하고 bind, init 에 아래와 같이 키바인딩을 넣어야 기존 키 바인딩을 뒤 엎고 처리가 된다. 허어.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 (defun jh-workspace/init-bufler () (use-package bufler :demand :commands (bufler bufler-list) :init (global-set-key (kbd \u0026#34;C-x B\u0026#34;) \u0026#39;bufler-list) ;; M-m 누르면 Spacemacs Root 키바인딩 -\u0026gt; b B 누르면 된다. 이게 더 분류상 편하다. ;; (spacemacs/set-leader-keys \u0026#34;bB\u0026#34; \u0026#39;consult-buffer) (spacemacs/set-leader-keys \u0026#34;bf\u0026#34; \u0026#39;bufler-list) (spacemacs/set-leader-keys \u0026#34;bF\u0026#34; \u0026#39;bufler-switch-buffer) ; I -\u0026gt; S ;; (spacemacs/set-leader-keys \u0026#34;bK\u0026#34; \u0026#39;bufler-workspace-frame-set) (evil-define-key \u0026#39;(motion normal visual) bufler-list-mode-map (kbd \u0026#34;RET\u0026#34;) \u0026#39;bufler-list-buffer-switch (kbd \u0026#34;M-RET\u0026#34;) \u0026#39;bufler-list-buffer-peek (kbd \u0026#34;D\u0026#34;) \u0026#39;bufler-list-buffer-kill ) ;; (evil-collection-define-key \u0026#39;normal \u0026#39;bufler-list-mode-map ;; (kbd \u0026#34;RET\u0026#34;) \u0026#39;bufler-list-buffer-switch ;; (kbd \u0026#34;M-RET\u0026#34;) \u0026#39;bufler-list-buffer-peek ;; \u0026#34;D\u0026#34; \u0026#39;bufler-list-buffer-kill) :config (setf bufler-groups (bufler-defgroups ;; Subgroup collecting all named workspaces. (group (auto-workspace)) ;; Subgroup collecting buffers in a projectile project. (group (auto-projectile)) (group ;; Subgroup collecting all `help-mode\u0026#39; and `info-mode\u0026#39; buffers. (group-or \u0026#34;Help/Info\u0026#34; (mode-match \u0026#34;*Help*\u0026#34; (rx bos (or \u0026#34;help-\u0026#34; \u0026#34;helpful-\u0026#34;))) (mode-match \u0026#34;*Helpful*\u0026#34; (rx bos \u0026#34;helpful-\u0026#34;)) (mode-match \u0026#34;*Info*\u0026#34; (rx bos \u0026#34;info-\u0026#34;)))) (group ;; Subgroup collecting all special buffers (i.e. ones that are not ;; file-backed), except `magit-status-mode\u0026#39; buffers (which are allowed to fall ;; through to other groups, so they end up grouped with their project buffers). (group-and \u0026#34;*Special*\u0026#34; (name-match \u0026#34;**Special**\u0026#34; (rx bos \u0026#34;*\u0026#34; (or \u0026#34;Messages\u0026#34; \u0026#34;Warnings\u0026#34; \u0026#34;scratch\u0026#34; \u0026#34;Backtrace\u0026#34; \u0026#34;Pinentry\u0026#34;) \u0026#34;*\u0026#34;)) (lambda (buffer) (unless (or (funcall (mode-match \u0026#34;Magit\u0026#34; (rx bos \u0026#34;magit-status\u0026#34;)) buffer) (funcall (mode-match \u0026#34;Dired\u0026#34; (rx bos \u0026#34;dired\u0026#34;)) buffer) (funcall (auto-file) buffer)) \u0026#34;*Special*\u0026#34;)))) ;; Group remaining buffers by major mode. (auto-mode))) ) ) Keybindings # 1 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- tab-bar next / previous # 1 2 3 4 5 6 7 8 9 10 11 ;; Replace Emacs Tabs key bindings with Workspace key bindings (when (\u0026gt; emacs-major-version 28) ; emacs 29 (with-eval-after-load \u0026#39;evil-maps (when (featurep \u0026#39;tab-bar) ;; vim-style tab switching (define-key evil-motion-state-map \u0026#34;gt\u0026#34; \u0026#39;tab-next) (define-key evil-motion-state-map \u0026#34;gT\u0026#34; \u0026#39;tab-previous) (define-key evil-normal-state-map \u0026#34;gt\u0026#34; \u0026#39;tab-next) (define-key evil-normal-state-map \u0026#34;gT\u0026#34; \u0026#39;tab-previous) )) ) OFF buffer management # 1 2 ;; Persp grouping ;; (global-set-key (kbd \u0026#34;C-x C-b\u0026#34;) #\u0026#39;(lambda (arg) (interactive \u0026#34;P\u0026#34;) (with-persp-buffer-list () (ibuffer arg)))) "},{"id":27,"href":"/configs/emacs/jh-writing/","title":"jh-writing layer","section":"menu/Dotfiles/dot-emacs","content":" jh-writing Goals # spacemacs-language translate Layer # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (configuration-layer/declare-layer-dependencies \u0026#39;( (translate :variables gts-translate-list \u0026#39;((\u0026#34;en\u0026#34; \u0026#34;ko\u0026#34;) (\u0026#34;ko\u0026#34; \u0026#34;en\u0026#34;)) translate-enable-highlight t) ;; (typography :packages (typo) ;; :variables typography-enable-typographic-editing nil) ;; asciidoc ; e.g. docs.cider.mx editing (markdown :packages (markdown-mode mmm-mode vmd-mode markdown-toc gh-md) ; smartparens ;; :variables markdown-live-preview-engine \u0026#39;vmd ;; markdown-mmm-auto-modes \u0026#39;(\u0026#34;c\u0026#34; \u0026#34;c++\u0026#34; \u0026#34;python\u0026#34; \u0026#34;scala\u0026#34; (\u0026#34;elisp\u0026#34; \u0026#34;emacs-lisp\u0026#34;)) ) ;; fountain ; screenwriting ;; restructuredtext ; ReStructuredText (ReST) ;; (latex :variables ;; latex-enable-folding t ;; latex-enable-auto-fill t) ;; (plantuml :variables ;; plantuml-jar-path \u0026#34;/usr/share/plantuml/plantuml.jar\u0026#34; ;; org-plantuml-jar-path \u0026#34;/usr/share/plantuml/plantuml.jar\u0026#34;) ;; (languagetool :variables ;; langtool-default-language \u0026#34;en-US\u0026#34; ;; langtool-show-error-on-jump t ;; langtool-java-classpath \u0026#34;/usr/share/languagetool:/usr/share/java/languagetool/*\u0026#34;) )) Packages # Packages # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (defconst jh-writing-packages \u0026#39;( dictionary markdown-mode popwin ;; additional packages (guess-language :location (recipe :fetcher github :repo \u0026#34;junghan0611/guess-language.el\u0026#34; :files (\u0026#34;*.el\u0026#34; \u0026#34;trigrams/*\u0026#34;))) ;; (txl :location (recipe :fetcher github :repo \u0026#34;junghan0611/txl.el\u0026#34;)) ;; (deepl :location (recipe :fetcher github :repo \u0026#34;emacs-openai/deepl\u0026#34;)) palimpsest ;; separedit ; Edit comment/string/docstring/code block in separate buffer with your favorite mode. ;; substitute ;; speed-type ;; selectric-mode ;; olivetti ;; logos google-translate ; from spacemacs-language org-translate sentex ; Regex-based sentence navigation rules ;; define-it ;; mw-thesaurus ;; sdcv ;; external-dict ;; lexic ;; define-word ; from spacemacs-language ;; (use-package reverso ;; :straight (:host github :repo \u0026#34;SqrtMinusOne/reverso.el\u0026#34;) ;; khoj ;; lingva ; tracking-free alternative front-end for Google translate ;; libretranslate API, a libre and self-hostable translation engine. ;; (libretrans :location ;; (recipe ;; :fetcher url ;; :url \u0026#34;https://codeberg.org/martianh/libretrans.el/raw/branch/main/libretrans.el\u0026#34;)) )) README :: Superword-mode # sub-word, superword-mode, substring, string-inflaction, underscore 등 언더바 문제부터 해서 걸려있는 부분들이 많이 있다. evil-symbol-word-search 도 여기와 연관이 되어 있다. 알고 가야한다. [2023-02-26 Sun 11:45]\ntranslate Layer # translate 레이어가 있다. 근데 디테일은 잡아줘야 한다. All layer configurations can be done by setting layer variables in your dotfile. No custom user config lines are necessary. For more details please see the homepage of package translate-mode and go-translate.\nTODO translate-mode # [2023-01-17 Tue 16:32] 쌍으로 보면서 번역하는 모드. 번역 모드. 번역을 구조적으로 쉽게 번역 작가 처럼\norg-translate # 이 라이브러리에는 `org-translate-mode\u0026rsquo; 마이너 모드가 포함되어 있습니다. Org 위에서 사용되어 번역 관련 기능을 제공합니다. 완벽한 CAT 도구가 아닙니다. 기본적으로 두 가지 작업을 수행합니다. 소스 텍스트와 소스 텍스트 간의 분할 대응을 관리합니다. 사용할 수 있는 용어집을 관리합니다. 자동 용어 번역, 이전 사용 표시 등 이건 하나의 파일에서 소스와 번역을 따로 관리 할 수 있다.\n1 2 3 4 (defun jh-writing/init-org-translate () (require \u0026#39;org-translate) (setq ogt-default-segmentation-strategy \u0026#39;paragraph) ) Sentex # [2023-05-30 Tue 15:50] Checkout : OmegaT and Okapi martianh/sentex: Complex sentence-ending rules for Emacs \u0026hellip;\nThis package uses breaking and non-breaking sentence-ending rules ported from OmegaT and Okapi Framework.\nIt provides `sentex-forward-sentence\u0026rsquo;, `sentex-backward-sentence\u0026rsquo;, and `sentex-kill-sentence\u0026rsquo;. They aim to act like the built-in functions, but to intelligently ignore things like \u0026ldquo;e.g.\u0026rdquo;, \u0026ldquo;i.e.\u0026rdquo;, or \u0026ldquo;Mr.\u0026rdquo; as ends of sentences.\nCustomize `sentex-ruleset-framework\u0026rsquo; to select which framework to use. Call `sentex-set-language-for-buffer\u0026rsquo;, or set `sentex-current-language' to choose what language\u0026rsquo;s rules to use. Different frameworks support different languages, so if your language doesn\u0026rsquo;t appear in the options, try using a different one.\n설정을 해보고 일단 사용법을 연구하자.\n1 2 3 (defun jh-writing/init-sentex () (use-package sentex :defer) ) TODO typography layer # typo 작가를 위한 패키지. 따옴표 인용부호 등 ;; 영어\nMarkdown Layer # 마크다운이 이맥스의 메인은 아니지만, 설정은 꾸준히 챙겨야 한다. 물론 기본적인 설정은 마크다운 레이어를 참고하는 것이 먼저다. 여기는 스페이스맥스니까.\nNote: Spacemacs already defines the variable markdown-mmm-auto-modes to a bunch of languages. Consider opening a PR on the Spacemacs repository to add new languages instead of overriding the variable in your dotfile.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 (defun jh-writing/post-init-markdown-mode () (setq markdown-header-scaling t ) (setq markdown-fontify-code-blocks-natively t) (define-key markdown-mode-map (kbd \u0026#34;C-n\u0026#34;) \u0026#39;markdown-next-visible-heading) (define-key markdown-mode-map (kbd \u0026#34;C-p\u0026#34;) \u0026#39;markdown-previous-visible-heading) (define-key markdown-mode-map (kbd \u0026#34;C-c C-o\u0026#34;) \u0026#39;markdown-follow-thing-at-point) ;;; Plain text (text-mode) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\(README\\\\|CHANGELOG\\\\|COPYING\\\\|LICENSE\\\\)\\\\\u0026#39;\u0026#34; . text-mode)) ;;; Markdown (markdown-mode) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.md\\\\\u0026#39;\u0026#34; . markdown-mode)) (defun markdown-setup () (interactive) ;; (flyspell-mode 1) (visual-line-mode 1) (auto-fill-mode 1)) (add-hook \u0026#39;markdown-mode-hook \u0026#39;markdown-setup) ) Translator # TODO google-translate # [2022-11-17 Thu 12:45] go-translate 와 함께 사용. skip-region-alist 스타일을 적용해야 한다.\n(add-to-list \u0026lsquo;ispell-skip-region-alist \u0026lsquo;(\u0026quot;:\\\\(PROPERTIES\\|LOGBOOK\\):\u0026quot; . \u0026ldquo;:END:\u0026rdquo;)) (add-to-list \u0026lsquo;ispell-skip-region-alist \u0026lsquo;(\u0026quot;#\\\\+BEGIN_SRC\u0026quot; . \u0026ldquo;#\\\\+END_SRC\u0026rdquo;)) (add-to-list \u0026lsquo;ispell-skip-region-alist \u0026lsquo;(\u0026quot;#\\\\+BEGIN_EXAMPLE\u0026quot; . \u0026ldquo;#\\\\+END_EXAMPLE\u0026rdquo;))\nGitHub - atykhonov/google-translate: Emacs interface to Google Translate\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 (defun jh-writing/init-google-translate () (use-package google-translate ;; :commands (spacemacs/set-google-translate-languages) :init ;; fix search fail \u0026#39;,ttk\u0026#39; ;; (see https://github.com/atykhonov/google-translate/issues/52#issuecomment-727920888) (with-eval-after-load \u0026#39;google-translate-tk (defun google-translate--search-tkk () \u0026#34;Search TKK.\u0026#34; (list 430675 2721866130))) (progn (autoload \u0026#39;google-translate-translate \u0026#34;google-translate-core-ui\u0026#34; \u0026#34;google-translate-translate\u0026#34; nil nil) (autoload \u0026#39;popup-tip \u0026#34;popup\u0026#34; \u0026#34;popup-tip\u0026#34; nil nil) (defun google-translate-to-korean (\u0026amp;optional str) \u0026#34;Translate given string automatically without language selection prompt.\u0026#34; (let ((lang (cond ((string-match \u0026#34;[가-힣]\u0026#34; str) \u0026#34;ko\u0026#34;) ((or (string-match \u0026#34;[ァ-ヶー]\u0026#34; str) (string-match \u0026#34;[ぁ-んー]\u0026#34; str) ;; (string-match \u0026#34;[亜-瑤]\u0026#34; str) ) \u0026#34;ja\u0026#34;) ((string-match \u0026#34;[一-龥]\u0026#34; str) \u0026#34;zh-CN\u0026#34;) (t \u0026#34;en\u0026#34;)))) (google-translate-translate lang (if (string= \u0026#34;ko\u0026#34; lang) \u0026#34;en\u0026#34; \u0026#34;ko\u0026#34;) str))) (defun korean/popup-translation (\u0026amp;optional str) \u0026#34;Display Google translation in tooltip.\u0026#34; (interactive) (let* ((str (cond ((stringp str) str) (current-prefix-arg (read-string \u0026#34;Google Translate: \u0026#34;)) ((use-region-p) (buffer-substring (region-beginning) (region-end))) (t (save-excursion (let (s) (forward-char 1) (backward-sentence) (setq s (point)) (forward-sentence) (buffer-substring s (point))))))) (translated-str (save-window-excursion (funcall \u0026#39;google-translate-to-korean (replace-regexp-in-string \u0026#34;^\\\\s-+\u0026#34; str)) (switch-to-buffer \u0026#34;*Google Translate*\u0026#34;) (buffer-string)))) (if (region-active-p) (run-at-time 0.1 nil \u0026#39;deactivate-mark)) (kill-buffer \u0026#34;*Google Translate*\u0026#34;) (popup-tip translated-str :point (point) :around t ;; :height 30 :scroll-bar t :margin t))) (evil-leader/set-key \u0026#34;xgg\u0026#34; \u0026#39;korean/popup-translation) (spacemacs/set-leader-keys \u0026#34;xgi\u0026#34; \u0026#39;google-translate-paragraphs-insert \u0026#34;xgo\u0026#34; \u0026#39;google-translate-paragraphs-overlay \u0026#34;xgQ\u0026#34; \u0026#39;google-translate-query-translate-reverse \u0026#34;xgq\u0026#34; \u0026#39;google-translate-query-translate \u0026#34;xgT\u0026#34; \u0026#39;google-translate-at-point-reverse \u0026#34;xgt\u0026#34; \u0026#39;google-translate-at-point) ;; (setq google-translate-enable-ido-completion nil) (setq google-translate-show-phonetic t) (setq google-translate-default-source-language \u0026#34;en\u0026#34; google-translate-default-target-language \u0026#34;ko\u0026#34;) ) ) ) popwin for go-transpate # [2023-03-12 Sun 09:28] 버퍼 위치를 고정해 놓는 게 편할 듯하다.\n1 2 3 4 (defun jh-writing/pre-init-popwin () (spacemacs|use-package-add-hook popwin :post-config (push \u0026#39;(\u0026#34;*Go-Translate*\u0026#34; :dedicated t :position bottom :stick t :noselect t) popwin:special-display-config))) Dictionary # dictionary server # Wordsmithing in Emacs - Mastering Emacs 위에 정리가 잘되어 있다. 23/01/17\u0026ndash;16:49 :: 내가 하려는 것은 로컬 사전 서버를 돌리는 일이다. 위의 글에 일부 내용이 있다.\nRunning your own Dictionary Server\nEmacs’s dictionary lookup will, by default, communicate with a third-party server when you ask it to look up a word. I’d rather it didn’t, so I changed it. Here’s how I did this on Ubuntu:\n$ sudo apt-get install dictd dict dict-{wn,vera,jargon,gcide,foldoc} $ sudo systemctl enable dictd\nI had to manually enable the dictionary service daemon, as that is a requirement for this to work.\nTo make Emacs use your local server instead of a remote one, customize dictionary-server to localhost:\n(setq dictionary-server \u0026ldquo;localhost\u0026rdquo;)\nThere’s a large range of dictionaries available in Ubuntu/Debian, and I only included the bare essentials above. Of note is gcide, which is a community-maintained version of Webster’s 1913 dictionary. All installed dictionaries are activated and made available to the dictionary server.\nDICT 는 RFC 2229 로 설명된 1997 년 DICT 개발 그룹에서 만든 사전 네트워크 프로토콜입니다. 목표는 웹스터 프로토콜을 능가하여 클라이언트가 균일한 인터페이스를 통해 다양한 사전에 액세스할 수 있도록 하는 것입니다\n관련 설정을 추가하자면! 로컬 호스트를 하면 오프라인 사전을 사용한다는 말. prot 설정에서 가져온다면 아래와 같다. home/junghan/sync/man/dotsamples/vanilla/prot-dotfiles/emacs.emacs.d/prot-emacs-modules/prot-emacs-langs.el:146\n1 2 3 4 5 6 7 8 (defun jh-writing/init-dictionary () (use-package dictionary :config (setq dictionary-server \u0026#34;localhost\u0026#34;) ;; (setq dictionary-server \u0026#34;dict.org\u0026#34;) (setq dictionary-default-popup-strategy \u0026#34;lev\u0026#34; ; read doc string dictionary-create-buttons nil dictionary-use-single-buffer t))) TODO 사전 패키지들 여기로 다시 옮길 것 # TODO palimpseat # 글쓰기를 위한 패키지. 지울 단락을 따로 보관해 둔다. 아주 귀한 패키지인데 아직 사용을 못하고 있네!\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 (defun jh-writing/init-palimpsest () (use-package palimpsest :defer t :after org :config ;; (add-hook \u0026#39;text-mode-hook \u0026#39;palimpsest-mode) (add-hook \u0026#39;org-mode-hook \u0026#39;palimpsest-mode) ;; Usage ;; M-x palimpsest-move-region-to-bottom ;; M-x palimpsest-move-region-to-top ;; M-x palimpsest-move-region-to-trash ;; Keyboard shortcuts are provided: ;; C-c C-r: Send selected text to bottom of buffer ;; C-c C-s: Send selected text to top of buffer ;; C-c C-q: Send selected text to trash file ) ) guess-language # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 (defun jh-writing/init-guess-language () (use-package guess-language :demand :ensure :config (setq guess-language-langcodes \u0026#39;((en . (\u0026#34;en_US\u0026#34; \u0026#34;English\u0026#34; \u0026#34;🇬🇧\u0026#34; \u0026#34;English\u0026#34;)) (ko . (\u0026#34;ko_KR\u0026#34; \u0026#34;Korean\u0026#34; \u0026#34;🇰🇷\u0026#34; \u0026#34;Korean\u0026#34;)))) (setq guess-language-languages \u0026#39;(ko en)) (setq guess-language-min-paragraph-length 35) ) ;; (setq guess-language-trigrams-directory \u0026#34;/home/junghan/sync/emacs/guess-language/trigrams/\u0026#34;) ) ;; 여기에 flyspell 언어 바꿔서 해주면 좋겠다. ;; (defun my-custom-function (lang beginning end) ;; (do-something)) ;; (add-hook \u0026#39;guess-language-after-detection-functions #\u0026#39;my-custom-function) ;; (add-hook \u0026#39;org-mode-hook (lambda () (guess-language-mode 1))) "},{"id":28,"href":"/configs/emacs/","title":"menu/Dotfiles/dot-emacs","section":"menu/Dotfiles","content":" Emacs 구성의 목표와 전체적인 소개. 상세 내용은 링크에서 확인 바랍니다. Junghanacs: Emacs 목표 # 쉬운 키바인딩 : Spacemacs VSpaceCode, SpaceVIM Spacemacs 를 사용하는 이유. 하나의 사용자 경험으로 가져가면 좋다! Offline First 마우스를 옵션으로 활용 하도록 지원! 입문자가 멘붕이 오지 않도록 마우스의 사용자 경험을 최대한 살려준다. (옵션) EVIL 모달 편집 기반! 가능한 많은 기능! 다양한 용도로 활용할 수 있도록 커스텀 레이어 관리 Emacs 내장 패키지 우선! 테마 모드라인 폰트 이모지 등 예쁘게 단 기능 우선! 터미널 환경에서도 화면 구성이 깔끔해야 한다. 화려한데 성능 잡아먹는 패키지는 아웃! CJK 를 사랑하는 패키지는 우선 선택! (한글 중심) 여러 번 입력을 하더라도 과정에서 배움이 있도록 매크로 자제! 훈련이 되야 한다. 키보드를 입력하는 자체가 배움이고 즐거움이다. Dot-Spacemacs # Dot-Spacemacs 는 Spacemacs 설정 파일 입니다. 물론 이 파일 하나에 모든 커스텀 설정을 넣을 수 있습니다. 저도 그렇게 사용 했습니다. 아쉽게도 조금씩 튜닝을 하다 보면 감당이 안되는 지점에 이르게 됩니다. 다른 배포판이나 바닐라로 넘어 가는 게 일반적인 수순일 것입니다. 그러나 구성의 목표에서 언급한 바, 가장 쉬운 길을 만들고 싶었습니다. 쉬운 길이 최선의 길은 아닙니다. 각자 자신의 길을 가기 전 까지 동반자가 되었으면 합니다.\nCustom Layers # 위 Spacemacs 설정 파일에서 로딩하는 레이어 목록 입니다. 위의 설정 파일까지 하면 양이 적지 않습니다. 왜 별도로 나누었는 지에 대한 이야기를 하려면 상당히 길어 질 것 같습니다. 일단 설정 파일을 올립니다. 마음 같아서는 조금 더 정리를 하고 싶으나\u0026hellip; 천천히 할 예정입니다. 일단 공개함으로써 저의 정리 작업은 시작이 된 것 입니다.\njh-base layer # jh-completion layer # jh-visual layer # jh-workspace layer # jh-editing layer # jh-navigation layer # jh-writing layer # jh-checker layer # jh-project layer # jh-utility layer # jh-coding layer # jh-org layer # jh-org-workflow layer # jh-pkm layer # jh-misc layer # jh-reading layer # jh-python layer # jh-javascript layer # jh-clojure layer # "},{"id":29,"href":"/configs/","title":"menu/Dotfiles","section":"Junghanacs's Home","content":" Junghanacs 의 설정 파일 소개. 누구나 쉽게 사용할 수 있도록 제공할 예정이다. 오피스 설치 정도의 노력으로 일단! 바로 시작할 수 있어야 한다. 이 페이지는 닷파일 페이지의 인덱스 입니다.\nOperating System # 리눅스를 사용하는 게 좋다. 일단 비용 안 든다. 사용 자체가 배움이 된다. 무엇보다 딴 짓을 할게 거의 없다. 한글 매뉴얼을 제공하는 국산 리눅스 배포판 =하모니카=를 배포판으로 선택했다 1. 잘 된다. 와! 쉽다. 컴퓨터를 처음 접하는 학생들이 사용하면 정말 좋을 것 같다.\nText Editor (Emacs) # 내가 커스텀해서 사용 중인 스페이스맥스 기반 이맥스 환경이다. 아래 이맥스 페이지에 가보면 설정 파일과 더불어 나름의 원칙을 적어 놓았다. 바로 사용 할 수 있도록 깃허브에 정리해서 올려 놓을 예정이다. 데스크톱에 오피스 설치 정도의 노력으로 바로 동작하게 해야만 한다. 폰트 까지 하나로 패키징이 되는 게 좋을 것 같다. Snap, Flatpack, NIX 등 활용.\n상세 정보 Dotfiles/dot-emacs Tiling Window Manager (Optional) # 타일링 윈도우 매니저 사용은 키보드 워크 플로우의 시작이다. 나는 i3WM 을 사용하고 있다. 문제는 원 클릭으로 설정을 하더라도 익숙해 지려면 약간의 시간이 필요하다.\nApplications # 이맥스와 연동을 위한 설정 및 팁을 다룬다.\nPDF 관련 Browser 관련 SNS 관련 https://hamonikr.org/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":30,"href":"/refs/peterprevosMoreProductiveEmacs2021/","title":"Peter Prevos :: More Productive with Emacs (2022)🌲","section":"References","content":" 이맥스란 무엇이며 왜 사용해야 하는지, 무엇이 장점인지 설명한다. 생산성 고수의 깔끔한 설명이 돋보인다. 특히 생산성 해킹은 키보드가 아닌 마음으로 하는 것이라는 말은 병아리 이맥서의 심장을 때린다. About References Note 레퍼런스 노트는 1. 원문 번역, 2. 나의 생각 으로 구성 됩니다. 번역은 기계 번역 후 제가 이해할 만한 수준으로 수정한 것 입니다. 나의 생각 : 훌륭하다. 초보자를 위한 3 가지 포인트. # Peter Prevos 님의 Emacs 생산성 해킹 시리즈의 서문에 해당하는 글 입니다. 1. 맨 뒤에 원문 링크를 보면 키워드에서 들어나듯이 연재 시리즈가 아주 구성이 훌륭합니다. 뭐든지 다 잘해요! 프로그램은 참 설명하기가 어렵습니다. 양도 많을 뿐더러 어느 부분을 제외하고 핵심을 다루어야 하는지를 판단하기도 애매합니다. 역시 이 분과 같은 고수는 전통을 알기에 정수를 뽑는 게 정말 남다릅니다. 저 또한 고수의 가이드를 따라 저의 글을 연재하려고 하고 있습니다.\n이 분 글의 아쉬운 점은 3 가지 입니다. Emacs 바인딩을 기준으로 하는 것, 설명에 코드가 너무 많다는 것과 패키지 구성이 올드 하다는 점입니다. 요즘에는 일부 중학생들도 VIM 기본 편집은 할 수 있지 않나요? 모드 전환해서 글쓰고 저장하는 정도 말입니다. 방향키로 물론 사용 하구요. 이러한 상황이라면 VIM 스타일 편집은 입문자에게 필수라고 생각합니다. 이것만 알면 스페이스 누르고 원하는 기능 찾을 줄만 알면 Spacemacs 스타일 이맥스는 금방 사용할 수 있습니다.\n다른 글들을 보면 설정 관련하여 코드가 너무 많습니다. 물론 개발자 연구자들에게는 큰 문제가 없을 것 입니다. 만약 생산성 해킹 도구로서 접근한다면 코드를 보면서 설정해서 사용하는 게 생산적인 일은 아닐 것 입니다. 그냥 오피스 설치하듯이 일단 설치하고 있는 대로 사용하면서 몸이 익히고 그 다음에 조금씩 평생 동안 수정을 하는 게 좋은 접근이라고 생각 합니다. 이맥스는 라이프 해킹 도구 이지요.\n그리고 패키지 구성이 올드 합니다. 기능의 측면에서도 부족할 수 있지만 제 짧은 경험 상 올드 한 패키지들은 확실히 느립니다. Emacs 빌트인 API 를 활용한 패키지들은 같은 기능을 제공 하면서 코드 양이 1/5, 1/10 이라고 하니 (예를 들어 Helm vs. Vertico) 런타임 시 확실히 다릅니다. 기능의 측면에서도 요즘 해외에서 많이 언급하는 Emacs 관련 팁들은 올드 패키지는 다루고 있지 않습니다. 그리고 예쁘고 깔끔해야 한다는 저만의 원칙이란\u0026hellip;\n저도 라이프 타임 생산성 해킹 도구로써 이맥스를 만지고 있기 때문에 이러한 글들은 저에게 많은 도움이 됩니다. 최근 이러한 글들이 많다는 점을 볼 때 생산성 해킹의 좋은 옵션으로 키보드 중심으로 하나의 프로그램으로 통합하는 게 주목 받게 될 것 입니다.\nFigure 1: My workflow: Left Agenda and this article. Right: The exported result.\n원문 번역 : More Productive with Emacs # 21 세기는 방해 요소로 가득 차 있습니다. 미디어 회사는 우리의 시선을 빼앗기 위해 끊임없는 전투를 벌이고 있으며, 그 결과 텔레비전과 인터넷 콘텐츠의 황금기를 낳았습니다. 이 전투는 훌륭한 예술 작품으로 이어지지만 우리가 창의적이고 생산적이지 못하게 할 수도 있습니다. 이 일련의 기사는 Emacs 로 생산성을 높이는 방법을 설명합니다.\n생산성을 높이는 첫 번째 단계는 우리의 노력에서 처리해야 하는 방대한 양의 정보를 관리하는 데 도움이 되는 완벽한 소프트웨어 도구를 찾는 것 입니다. 대부분의 사람들은 요구 사항을 충족하기 위해 복잡한 웹 도구들을 사용합니다.\n저는 오랫동안 이러한 상황에 있었습니다. 해야 할 일을 수행하기 위해 이 프로그램에서 저 프로그램으로 건너 다녔습니다. 작업 리스트에서 내 일정으로 이동하고, 워드 프로세서 및 스프레드시트, PDF 리더기 등을 말입니다. 이와 같은 작업들을 처리할 수 있는 하나의 프로그램이 있다면 좋지 않을까요?\nEmacs 컴퓨팅 시스템에 오신 것을 환영합니다!\nWhat is Emacs? : 이맥스란? # GNU Emacs의 공식 태그라인(tagline)은 \u0026ldquo;확장 가능한 self-documenting 텍스트 편집기\u0026rdquo; 입니다. 그러나 이러한 단어는 소프트웨어 개발 도구로서의 목적에만 초점을 맞춘 것 이기 때문에 제대로 Emacs 를 설명하는 말이 아닙니다.\nEmacs 는 정보를 관리하고, 프로젝트를 추적하고, 기사, 책, 웹 사이트 및 기타 텍스트를 다루는 일을 처리하는 다용도 컴퓨팅 환경 그 자체 입니다. 다른 말로는 Emacs 는 스테로이드를 맞은 TextEdit 또는 메모장과 같다고 말할 수 있습니다. Emacs 의 첫 번째 버전은 거의 40 년 전에 개발되었으며 이 소프트웨어가 구식인 것처럼 보일 수 있습니다. 그러나 활기찬 개발자 커뮤니티는 지속적으로 시스템을 개선합니다.\nEmacs is not a productivity hack, it is a productivity hacking system.\nEmacs 는 생산성 해킹 아니라, 생산성 해킹 시스템 입니다.\n컴퓨터를 사용하다 보면 다양한 프로그램을 사용해야 하는 경우가 많습니다. 워드 프로세서에서 메모를 작성한 다음 스프레드시트로 전환하여 그래프를 만든 다음 복사하여 메모에 붙여 넣습니다. 다음으로 이메일 클라이언트를 열어 메모를 동료에게 보냅니다. 마지막 단계는 생산성 도구에서 작업을 종료하는 것입니다. 이 힘든 작업 후에 게임을 하고 Tetris 를 열 수 있습니다. 이러한 소프트웨어를 사용할 때 프로그램마다 다른 기술을 배워야 할 수도 있습니다. 개발자가 의도한 대로 각각의 소프트웨어를 사용해야 합니다.\nEmacs 로 작업하는 것은 다른 경험입니다. Emacs 에서 메모를 작성하고, Emacs 로 그래프를 만들고, 결과를 이메일로 보내고 Emacs 로 작업을 종료합니다. 마지막으로 게임을 플레이, 짐작하셨겠지만 Emacs 내에서 말입니다. Emacs 를 사용하는 경우 소프트웨어 한 부분만 배우면 되고 프로그래머가 소프트웨어를 사용하는 방식이 아니라 원하는 방식으로 작동하도록 구성할 수 있습니다.\n처음에 Emacs 는 최신 소프트웨어라기보다 angry fruit salad처럼 보일 수 있습니다. 이 단순한 모양에 속지 마십시오. 내부적으로는 강력한 시스템입니다. 아래 비디오는 Emacs 와 조직 모드 패키지를 사용하는 것이 어떤 것인지 보여줍니다.\nEmacs Org Mode Demo 2021 - YouTube\nWhy use Emacs? : 왜 사용해야 하는가? # Emacs 는 텍스트 편집기나 워드 프로세서가 아니며 스프레드시트나 이메일 클라이언트도 아닙니다. Emacs 는 가변 소프트웨어(malleable software) 플랫폼으로 모든 작업을 수행할 수 있습니다. 키보드로 수행할 수 있습니다. Emacs 는 생산성의 Swiss-Army Chainsaw 입니다.\n가단성(melleable) 소프트웨어의 첫 번째 원칙은 변경하기 쉽다는 것입니다. Emacs 는 LISP 언어를 사용하여 소프트웨어 내에서 응용 프로그램을 만들 수 있기 때문에 유연합니다. 이와 같은 작업은 어렵게 들릴 수 있지만 가능성 측면에서 말하는 것 입니다. 대부분의 Emacs 사용자는 자신이 개발한 것을 공유하기 때문에 코드를 작성하는 것이 강제적이거나 필요하지 않습니다. 무료로 사용할 수 있는 수천 개의 패키지로 Emacs 를 확장하고 구성할 수 있습니다.\n사용자는 Emacs LISP 언어에 대한 약간의 지식만으로도 시스템의 거의 모든 것을 구성할 수 있습니다. 이 지식 요구 사항은 장애물로 보일 수 있지만 사용 방법을 배우면 처음 의도한 방식으로 컴퓨터를 자유롭게 즐길 수 있습니다. 소프트웨어는 사용자 따라 조정 할 수 있어야 합니다. 그 반대가 아닙니다.\n이 접근 방식의 장점은 이 소프트웨어를 사용하는 방법에 있어 완전한 자유가 있다는 것입니다. 원하는 거의 모든 작업을 수행하도록 지시하고 특정 요구 사항에 맞게 구성할 수 있습니다. 단점은 최신 소프트웨어와 비교하여 컴퓨팅에 대해 완전히 다른 접근 방식이 필요하다는 것입니다. Emacs 를 사용하면 컴퓨터를 사용한다는 것의 원래 의미와 진정한 사용자 친화성을 되찾게 됩니다.\n컴퓨터 사용 방식을 바꿀 준비가 되셨습니까? 매트릭스의 유명한 장면을 의역하자면 다음과 같습니다.\n파란색 Microsoft 알약을 복용하면 이야기는 끝나고, 모든 것이 동일하게 유지됩니다. 당신은 보라색 Emacs 알약을 먹으면 \u0026mdash; 이제부터 당신은 Wonderland 에 머물게 되고, 나는 당신에게 토끼 굴(Rabbit hole)이 얼마나 깊은지 보여 줄 겁니다. Redefining user-friendliness : 사용자-친화성 재정의 # Emacs 의 Apple-esque It would be Apple-esque, meaning it was high quality, and very easy to use. 디자인의 결여는 새로운 사용자가 화려한 아이콘을 마우스나 손가락으로 포인팅 할 수 없기 때문에 처음에는 낙담할 수 있습니다. 안타깝게도 대부분의 소프트웨어 개발자는 부드러운 디자인과 마우스를 사용하는 것으로 사용자 친화성을 혼동합니다. 이러한 접근 방식은 학습 된 단순성을 달성하기 위해 사용자가 가질 수 있는 많은 장점을 희생 합니다. 그래픽 기반 소프트웨어(GUI)는 도금한 새장입니다. 즐거울 수도 있지만 그럼에도 불구하고 결국 우리(cage) 일 뿐입니다.\n최신 소프트웨어는 \u0026ldquo;당신이 보는 것이 당신이 얻는 것\u0026rdquo;(WYSIWYG) 원칙을 따릅니다. 그래픽 인터페이스는 화면의 개체를 책상 위의 종이나 폴더처럼 보이게 하여 실제 세계를 시뮬레이션합니다. 문서를 가리키고 클릭하여 폴더로 드래그합니다. 문서는 종이에 있는 것처럼 표시되며 완료되면 쓰레기통으로 이동합니다. 그래픽 인터페이스는 물리적인 일을 하고 있다고 믿게 만드는 마술입니다. 이 접근 방식은 사람들이 컴퓨터 작동 방식을 이해하지 못하도록 합니다.\nEmacs 및 기타 텍스트 편집기는 \u0026ldquo;What You See Is What You Mean\u0026rdquo;(WYSIWYM) 원칙을 사용합니다. 이 책을 쓰고 있는 동안에는 현대 워드 프로세서를 사용하는 것처럼 인쇄된 형태로 어떻게 보일지 알 수 없습니다. Emacs 에서는 최종 제품이 어떻게 보여야 하는지에 대한 텍스트, 이미지 및 컴퓨터에 대한 몇 가지 지침만 볼 수 있습니다. 이 접근 방식을 통해 최종 제품에 대해 걱정하는 대신 텍스트 작성에 집중할 수 있습니다.\nWYSIWYG 접근 방식은 콘텐츠에서 마음을 산만하게 하고 사용자가 텍스트를 작성하는 대신 스타일을 만지작거리도록 유혹합니다. 전 세계의 사무원은 문서의 형식을 지정하거나 조판하는 데 많은 시간을 낭비합니다. Emacs 방식을 따르면 텍스트를 완성할 때까지 문서의 디자인에 대해 걱정함으로써 생산성을 높일 수 있습니다. 내가 이 책을 쓰고 있는 동안 몇 번의 키 입력만으로 텍스트를 완전한 형식의 전자책이나 웹 페이지로 변환하여 배포할 수 있습니다.\n아래 이미지는 이것이 어떻게 생겼는지 보여줍니다. 왼쪽에는 이 기사를 작성하는 동안의 모습이 표시됩니다. 오른쪽에는 콘텐츠를 렌더링한 후의 결과가 표시됩니다. 화면의 색상은 실제 색상이 아닌 헤더나 메타 데이터와 같은 텍스트의 기능을 나타냅니다. 글꼴은 균일하고 이미지는 숨겨져있어 텍스트에 집중할 수 있습니다. Hugo 패키지는 템플릿을 사용하여 Emacs 의 텍스트를 사용 가능한 웹사이트로 변환합니다.\nFigure 2: The WYSIWYM approach: Left, this article as I am writing it in Emacs. Right: The exported result.\nThe learning curve : 러닝 커브 # 두 번째 장애물은 Emacs 를 처음 열 때 보이는 모든 것이 스플래시(splash) 화면이라는 것입니다. Emacs 를 사용하려면 이 편집기 사용의 기본 원칙을 배우고 관련 추가 기능 중 일부를 배워야 합니다. Emacs 는 오래 된 소프트웨어이므로 일부 기본 설정과 용어는 최신 그래픽 소프트웨어와 동일하지 않습니다.\nThe steeper the learning curve, the bigger the reward.\n학습 곡선이 가파를수록 보상이 커집니다.\n예를 들어 파일을 여는 것은 \u0026lsquo;visiting a file\u0026rsquo; 입니다. 텍스트를 붙여넣는 것은 \u0026lsquo;yanking\u0026rsquo; 이고, 텍스트를 잘라내는 것은 \u0026lsquo;killing\u0026rsquo; 와 같습니다. 아마도 Emacs 용어는 자르고 붙이기와 같은 수공예 활동을 기반으로 하는 현재 용어보다 좀 더 시적일 것입니다.\nEmacs 를 배우는 비결은 사실상 무한한 구성 옵션에 압도 당하지 않고 수행해야 하는 작업에 필요한 기능의 일부만 배우는 것입니다. 어떠한 구성이 없더라도 Emacs 로 많은 일을 할 수 있습니다.\n원하는 대로 소프트웨어를 구성하려면 Emacs Lisp 를 배워야 합니다. 어렵게 들릴 수 있지만 인터넷에서 예제를 간단히 복사하여 붙여넣기(kill and yank) 할 수 있습니다. 이 웹사이트의 기사는 Emacs 가 쓰기 도구가 되기 위해 알아야 할 사항을 안내합니다. 이러한 문서에서 구성 파일을 다운로드하고 사용하여 시작할 수도 있습니다.\nGitHub에서 다운로드\nAdvantages of using Emacs 이맥스 사용의 장점 # 다음은 Emacs 를 사용하여 글로 된 콘텐츠를 만드는 주요 이점 중 일부입니다.\n하나의 소프트웨어로 대부분의 컴퓨팅 활동을 커버할 수 있기에 이 하나만 잘 배운다면 모든 생산성 을 끌어 올릴 수 있습니다. 모든 정보를 일반 텍스트 파일에 저장합니다. 난해한 파일 형식으로 인한 호환성에 문제가 없을 것입니다. 특정 작업 흐름에 맞게 소프트웨어의 거의 모든 것을 수정할 수 있습니다. Emacs 는 GNU/Linux, Windows, Chrome OS 및 Apple 의 OS X 와 ​​같은 모든 주요 운영 체제에서 실행됩니다. Emacs 는 오픈 소스이며 기꺼이 도움을 주는 대규모 커뮤니티의 지원을 받습니다. Limitations of Emacs 이맥스의 한계 # 이 다기능 편집기에 대한 찬사를 듣고 나면 Emacs 가 전능한 소프트웨어의 신이라고 생각할 것입니다. 어떤 사람들은 감탄을 표하기 위해 Emacs 교회를 가짜 종교로 세웠습니다.\nEmacs 는 이미지를 표시하고 이를 텍스트와 통합할 수 있지만 그래픽 파일을 생성하거나 수정하는 기능은 제한되어 있습니다. 그림을 만들거나 편집해야 하는 경우 GIMP(GNU Image Manipulation Program) 사용을 고려해야 합니다. 비디오 콘텐츠는 지원되지 않으며 파일 또는 웹 페이지에 대한 하이퍼링크 이외의 텍스트와 쉽게 통합될 수 없습니다.\n두 번째 단점은 Emacs 에 (아직) 완전히 작동하는 웹 브라우저가 없다는 것입니다. Emacs 내에서 웹 서핑을 할 수 있는 패키지가 있지만 기능이 다소 제한적입니다.\nEmacs 는 생산성 싱크(sink)가 될 위험이 있습니다. 그러나 모든 것을 구성할 수 있다고 해서 반드시 구성해야 한다는 의미는 아닙니다. 작업 흐름에 대해 걱정하는 데 너무 많은 시간을 소비하지 말고 그 시간을 작업 흐름에 사용하십시오. 참고로 대부분의 생산성 해킹은 키보드가 아닌 본인의 마음가짐의 영향을 크게 받기 때문에 모든 구성을 사전에 꼭 해야 하는 것은 아닙니다.\nMore Productive with Emacs : 앞으로 배워 나갈 것들 # 이 웹 사이트에는 최소한이지만 합리적인 구성을 사용하여 Emacs 로 작업을 완료하는 데 도움이 되는 일련의 기사가 포함되어 있습니다.\n이 일련의 기사는 연구원과 작가가 수행하는 대부분의 작업을 다룹니다. 각 기사는 활동에 대해 논의하고 Emacs 로 이를 수행하는 방법을 설명합니다.\n다음 두 기사에서는 Emacs 설치, 구성 및 사용 방법을 소개합니다. 이 웹 사이트의 나머지 문서에서는 다양한 작업을 완료하는 방법에 대해 설명합니다. 이 기사에서 다루지 않는 유일한 주제는 Emacs 로 소프트웨어를 개발하는 것입니다.\nGetting Started with Emacs Configure Emacs Emacs Completion System Ricing Org mode Distraction-Free Writing Taking Notes with Org-Roam Manage your literature with Emacs BibTeX Mode Bibliographic notes with Denote and Citar Writing Articles and Books with Org Mode Create Websites Getting Things Done Manage files with dired Manage images with image-dired Read RSS feeds with Elfeed Play Music with the Emacs Multimedia System Using Emacs on a Chromebook Emacs 는 수정 변형이 가능한 (melleable) 시스템이므로 모든 사람이 작업을 수행하기 위해 개인적으로 선호하는 것이 있습니다. 따라서 Emacs 로 생산성을 높이는 방법에 대한 모든 기사는 독단적입니다. 다른 작업 방식이 있는 경우 의견을 공유하고 아래에 의견을 남기거나 문의 양식을 작성하여 저에게 이메일을 보내주십시오.\nMore Productive with Emacs: Writing, Researching, Publishing\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":31,"href":"/refs/tecosaurOrgGlossary2023/","title":"Tecosaur :: Org Glossary (2022)🌲","section":"References","content":" Terms, Glossary 를 다루는 전략. 가히 아름답다. About References Note 레퍼런스 노트는 1. 원문 번역, 2. 나의 생각 으로 구성 됩니다. 제 공부를 위해서 간단히 번역 한 것이니 참고 바랍니다. 본 레퍼런스 노트는 [1] 문서를 번역한 것 입니다.\nReferences # [1]tecosaur, “Org Glossary.” May 26, 2023. Accessed: Jun. 08, 2023. [Online]. Available: https://github.com/tecosaur/org-glossary 용어를 아십니까 # (\u0026ldquo;Glossary\u0026rdquo; \u0026ldquo;Acronyms\u0026rdquo; \u0026ldquo;Index\u0026rdquo; \u0026ldquo;Text Substitutions\u0026rdquo;)\nglossaries 용어 사전 acronyms 줄임말 indices 색인 나의 생각 : 어떻게 활용 할 수 있을까?! # 용어 사전을 직접 만들어 보고 사용해 봐야 한다. 한글과 영어아 혼재하는 경우를 예를 들어서 만들어 보자.\n내보내기 보다는 스타일을 맞춰 줬으면 좋겠는데?! 여기서 나온 이야기를 보자면 내 시나리오에 완벽히 커버가 되잖아.\n원문 번역 : Org Glossary Manual # Introduction # Summary 요약 # Org Glossary 는 모든 ox-* 백엔드에 대해 정의된 용어의 버퍼 내 강조 표시 및 높은 품질의 내보내기를 지원하여 Org 문서 내에서 glossary-like 구조 (용어집, 두 문자어, 색인 등)로 작업하기 위한 유연한 모델을 정의합니다.\nQuickstart # 용어집 항목을 정의하려면 Glossary 또는 =Acronyms=라는 제목의 문서에 최상위 제목을 배치하고 다음과 같이 Org 정의 목록을 사용하여 용어를 정의합니다.\n1 2 3 4 * Glossary - Emacs :: A lisp-based generic user-centric text manipulation environment that masquerades as a text editor. - Org mode :: A rich and versatile editing mode for the lovely Org format. 그런 다음 글을 쓸 때 평소 사용하던 대로 용어를 사용하면 됩니다. 내보낼 때 Org Glossary 는 자동으로 다음을 수행합니다.\nPick up on the uses of defined terms Generate a Glossary/Acronym section at the end of the document Link uses of terms with their definitions, in a backend-appropriate manner (e.g. hyperlinks in html) Give the expanded version of each acronym in parenthesis when they are first used (e.g. \u0026ldquo;PICNIC (Problem In Chair, Not In Computer)\u0026rdquo;) 특정 용어에 대한 색인을 생성하려면 거의 동일한 작업을 수행할 수 있습니다. Index 헤딩을 사용하고 그저 일반 목록 (plain list)으로 용어를 나열하면 됩니다.\n1 2 * Index - org-mode 이 모든 것이 어떻게 작동하는지 확인하려면 Org Glossary 가 설치된 상태에서 다음 예제를 내보내십시오.\n1 2 3 4 5 6 7 8 9 10 11 Try using Org Glossary for all your glosses, acronyms, and more within your favourite ML with a unicorn mascot. It attempts to provide powerful functionality, in keeping with the simplicity of the Org ML we all know and love. * Glossary - glosses :: Brief notations, giving the meaning of a word or wording in a text. * Acronyms - ML :: Markup Language * Index - unicorn Org 모드에 있는 동안 용어 사용에 대한 visual indication 을 보려면 =M-x org-glossary-mode=를 호출하십시오.\nFigure 1: Visual Indication on org-glossary-mode\nDesign # 분량이 많거나 기술적인 문서에서는 종종 용어를 명확히 하고 발생 항목을 나열하는 부록이 필요합니다. 이것은 용어집, 색인 또는 다른 형태를 취할 수 있습니다. Org Glossary 는 이러한 모든 용어집과 유사한 형식을 /tracked generated text replacements/로 추상화합니다. 대부분의 구조는 다음과 같습니다.\nSearch for definitions of $term Replace all uses of $term with f($term) Generate a definition section for all used terms, linking to the uses Out of the box, four glossary-like structures are configured:\n기본적으로 4 개의 용어집과 유사한 구조가 구성됩니다.\nGlossary The term is transformed to the same text, but linking to the definition. Acronyms The first use of the term adds the definition in parentheses, and subsequent uses simply link to the definition (behaving the same as glossary terms). Index The term is unchanged (the entire purpose of the index is achieved via step 3. alone). Text Substitutions The term is replaced with its definition. 인덱스 관련 동작과 (usage detection)과 텍스트 대체하는 동작(fontification)에 관한 약간 특별한 케이스가 있지만, 이는 향후 일반화를 통해 최소한으로 유지되고 이상적으로는 제거가 될 것 입니다.\nUsage # Defining terms # Placement of definitions : org-glossary-headings\n정의는 기본적으로 org-glossary-headings 에 나열된 특별히 명명된 제목 중 하나 아래에 배치되어야 합니다.\n1 2 3 4 * Glossary * Acronyms * Index * Text Substitutions org-glossary-toplevel-only~가 t 라면, 위와 같이 헤드라인도 레벨 1의 제목이어야 합니다. nil 이면 문서에서 발생하는 모든 위치에서 인식됩니다. 하위 트리 내보내기 (subtree export) 할 때 ~org-glossary-toplevel-only 가 non-nil 이라면, 전체 문서에서 헤딩 레벨 1 의 제목만 인식됩니다 (즉, 비-하위 트리 내보내기와 동일하게 작동함). 서브트리로 관리할 것 인가? 파일을 나누어 관리 할 것 인가 문제이다. 일단 시작은 파일로 나눠서 헤딩 레벨 1 로 제한하는 것이 편할 것이다. 복잡하게 관리하다 보면 결국 감당하기 어렵다. External definition sources\nOrg Glossary 은 다른 #+include 파일들에 대해서 제목 및 줄 번호의 범위와 같은 조건을 반영하여 용어 정의와 검색을 지원합니다. ~org-glossary-global-terms~를 통해 전역으로 사용할 수 있는 정의를 제공하는 경로를 지정할 수도 있습니다.\n사용하려는 일반적인 용어 소스 집합을 유지 관리하는 경우 #+include 를 사용하는 대신 키워드 #+glossary_sources 를 사용할 수 있습니다.\n#+glossary_sources 의 값은 공백으로 구분하여 위치 목록을 형성합니다. 각 위치는 org-glossary-collection-root 를 기준으로 경로가 설정 됩니다.\n예를 들어, org-glossary-collection-root 가 여러 개의 파일로 나뉘어 관리되는 경우라면 다음과 같이 설정할 수 있습니다.\n1 #+glossary_sources: abbrevs physics.org::*Quantum foo bar.org 이는 다음과 동일합니다.\n1 2 3 4 #+include: COLLECTION-ROOT/abbrevs.org #+include: COLLECTION-ROOT/physics.org::*Quantum :only-contents t #+include: COLLECTION-ROOT/foo.org #+include: COLLECTION-ROOT/bar.org 제목/사용자 정의 ID 검색이 있는 소스는 자동으로 =:only-contents t=가 추가됩니다(예제에서 볼 수 있음). 이렇게 하면 ~org-glossary-toplevel-only~가 설정되어 있을 때에도 서브헤딩을 명시적으로 사용할 수 있습니다.\nBasic definitions\nOrg 모드에는 이미 용어 정의 연결(term-definition associations), 설명 목록(description lists) 에 대한 매우 자연스러운 구조가 있습니다. 용어 정의는 모든 중첩되지 않은 설명 목록에서 추출되며 다른 요소는 무시됩니다.\n예를 들어 \u0026ldquo;late pleistocene wolf\u0026rdquo; 를 정의하려면 다음과 같이 설명 목록 항목을 사용할 수 있습니다.\n1 2 - late pleistocene wolf :: an extinct lineage of the grey wolf, thought to be the ancestor of the dog 이는 다음과 같은 기본 구조의 해당 합니다.\n1 - TERM :: DEFINITION Advanced definitions\nautomaton :: A thing or being have to have power to have the power or action 과 같이 간단한 정의를 내릴 때 Org Glossary 는 실제로 몇 가지 가정 합니다.\nautomaton 은 정의 된 대로 automaton 을 연결 한다. 복수형은 org-glossary-plural-function 호출하여 복수형인 automata 를 연결 한다. 이는 다음 \u0026ldquo;전체 형식\u0026quot;으로 나타낼 수 있습니다.\n1 2 - automaton,automata = automaton,automata :: A thing or being regarded as having the power of spontaneous motion or action 이는 다음과 같은 구조입니다.\n1 - SINGULAR KEY, PLURAL KEY = SINGULAR FORM, PLURAL FORM :: DEFINITION 이것은 지나치게 복잡해 보일 수 있지만, 불행히도 불규칙 복수형 과 동형이의어 가 존재합니다. 다음은 이 기능이 작동하는 몇 가지 예입니다.\n1 2 - eveningtime=evening :: The latter part of the day, and early night. - eveninglevel=evening :: To make more even, to become balanced or level. 여기서 우리는 \u0026ldquo;evening\u0026quot;이라는 동일한 용어의 다른 용도를 명확히 하고, 각 용도에 대해 고유한 키를 정의하고자 합니다. 글을 쓸 때 다음과 같이 키를 사용합니다.\n1 In the eveningtime I take to eveninglevel out the sand pit. 이제 불규칙 복수형(irregular plurals) 과 결함 명사(defective nouns) 를 모두 살펴보겠습니다.\n1 2 3 - ox, oxen :: A male bovine animal. - sheep, :: A domesticated ruminant mammal with a thick wooly coat. - glasses, :: An optical instrument worn to correct vision. \u0026ldquo;ox, oxen\u0026quot;의 경우 명시적으로 불규칙 복수형을 부여합니다. \u0026ldquo;Sheep\u0026quot;도 불규칙 복수형이며 쉼표만 넣고 복수형을 생략하면 복수형이 생성되지 않습니다(/singularia tantum/으로 처리됨). \u0026ldquo;안경\u0026quot;에서도 동일한 동작이 발생하며 내부적으로는 /복수형 tantum/이지만 /singularia tantum/으로 표시되지만 동작은 동일하므로 괜찮습니다.\nAlias terms : 별칭 용어\n때로는 한 용어가 여러 이름으로 사용 될 수 있습니다. 이는 \u0026ldquo;alias terms\u0026rdquo; 으로 처리 됩니다.\n이것은 분자 생물학 분야를 방문할 예를 통해 가장 잘 설명됩니다.\n1 2 3 - beta sheet :: Common structural motif in proteins in which different sections of the polypeptide chain run alongside each other, joined together by hydrogen bonding between atoms of the polypeptide backbone. 베타 시트는 \u0026ldquo;beta\u0026rdquo; 대신 그리스 문자 β 를 사용하거나 \u0026ldquo;beta pleated sheet\u0026rdquo; 라고도 합니다. 다음과 같이 이러한 변형을 지원할 수 있습니다.\n1 2 3 - \\beta sheet :: beta sheet - beta pleated sheed :: beta sheet - \\beta-pleated sheet :: beta sheet 이러한 각 용어의 정의는 \u0026ldquo;beta sheet\u0026quot;와 정확히 일치하므로 해당 용어의 별칭으로 인식됩니다.\nCategorisation : 카테고리화\n많은 용어들의 모음을 보다 쉽게 ​​사용하려면 부제목(sub-headings)을 사용할 수 있습니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 * Glossary ** Animals - late pleistocene wolf :: an extinct lineage of the grey wolf, thought to be the ancestor of the dog - ox, oxen :: A male bovine animal. - sheep, :: A domesticated ruminant mammal with a thick wooly coat. ** Technology - Emacs :: A lisp-based generic user-centric text manipulation environment that masquerades as a text editor. - glasses, :: An optical instrument worn to correct vision. 이 구조는 내보내기에서 무시되므로 내보내기에 어떤 영향을 미칠지 걱정하지 않고 자유롭게 구성할 수 있습니다. 내보낸 항목을 범주로 분할하려면 :category: 태그가 있는 부제목을 사용하면 됩니다. 범주 태그가 지정된 부제목을 서로 중첩할 수 있지만 가장 안쪽 (innermost) 범주만 적용됩니다.\n1 2 3 4 5 * Glossary ** Animals :category: ** Technology :category: *** Text Editors :category: *** Mechanical :category: Using terms # Org Glossary 는 모든 정의된 용어를 작성한 글과 연결하려고 한다고 가정합니다. 따라서 내보낼 때 문서에서 정의된 용어의 모든 인스턴스를 스캔하고 이를 네 가지 용어집 링크 유형 중 하나로 변환합니다.\ngls, singular lowercase glspl, plural lowercase Gls, singular sentence case Glspl, plural sentence case To switch from implicit associations to explicit, set org-glossary-automatic to nil and then only gls​/​glspl​/​Gls​/​Glspl links will be picked up. To convert implicit associations to explicit links, you can run M-x org-glossary-apply-terms (if nothing happens, try running M-x org-glossary-update-terms first).\n암시적 연결에서 명시적 연결로 전환하려면 ~org-glossary-automatic~을 ~nil~로 설정하면 gls / glspl / Gls / Glspl 링크만 선택됩니다. 암시적 연결을 명시적 링크로 변환하려면 =M-x org-glossary-apply-terms=를 실행할 수 있습니다(아무 일도 일어나지 않으면 =M-x org-glossary-update-terms=를 먼저 실행해 보십시오).\nOrg Glossary 은 링크에 의존하므로 링크로써 적절한 위치에서만 처리 됩니다. (예: 소스 블록, 약어 텍스트 또는 다른 링크 등 내부가 아님). 또한 제목의 용어는 일반적으로 적절한 것으로 간주되므로 무시됩니다.\nIn addition to all this, there\u0026rsquo;s a bit of special behaviour for indexing. As you can discuss a topic without explicitly stating it, we support ox-texinfo-style #+[cfkptv]?index keywords. For example:\n그 밖에도 인덱싱을 위한 약간의 특별한 동작이 있습니다. 명시적으로는 언급하지 않고 주제에 대해서 토론할 수도 있기 때문에 ox-texinfo 스타일의 #+[cfkptv]?index 키워드를 지원합니다. 예를 들어:\n1 2 3 4 5 6 #+index: penguin The Linux operating system has a flightless, fat waterfowl (affectionately named Tux) as its mascot. * Index - penguin Printing definition sections # 문서를 내보낼 때 식별된 모든 용어집 머리글은 무조건 문서에서 제거됩니다. 다른 조치가 없다면, 용어 사용 정의 섹션을 기반으로 문서에 추가됩니다.\n기본 \u0026ldquo;generate and append to document\u0026rdquo; 동작을 비활성화하는 #+print_glossary: 키워드를 통해 정의 섹션 생성에 대한 세밀한 제어가 가능합니다.\n#+print_glossary: 키워드를 삽입하기만 하면 #+print_glossary: 키워드 위치에 기본적으로 생성된 정의 섹션이 삽입됩니다. 그러나 다음과 같이 여러 babel 스타일 :key value 옵션을 통해 동작을 사용자 정의할 수 있습니다.\n:type ( glossary acronym index by default), the specific glossary-like structures that definition sections should be generated for :level (0 by default), both: The scope in which term uses should be searched for, with 0 representing the whole document, 1 within the parent level-1 heading, 2 the parent level-2 heading, etc. One less than the minimum inserted heading level. :consume (nil by default), if t or yes then marks terms defined here as having been defined, preventing them from being listed in any other #+print_glossary: unless :all is set to t or yes. :all (nil by default), behaves as just described in :consumed. :only-contents (nil by default), if t or yes then the :heading (from the export template) is excluded from the generated content. 이 모든 것을 종합하면 기본 #+print_glossary: 명령은 다음과 같습니다.\n1 #+print_glossary: :type glossary acronym index :level 0 :consume no :all no :only-contents no The minor mode # 정의된 용어 인스턴스의 시각적인 표시는 마이너 모드 org-glossary-mode 에서 제공됩니다. 이는 기본적으로 두 가지 작업을 수행합니다.\nRun org-glossary-update-terms to update an buffer-local list of defined terms Add some fontification rules to make term uses stand out. 정의된 용어 및 글꼴의 로컬 목록은 다음과 같은 몇 가지 세부 사항을 허용합니다.\nShowing the term definition in the minibuffer when hovering over a fontified use Calling M-x org-glossary-goto-term-definition or clicking on a fontified use to go to the definition M-x org-glossary-insert-term-reference to view the list of currently defined terms, and perhaps insert a use. In the case of Text Substitutions, displaying the replacement text on top of the use, when org-glossary-display-substitute-value is non-nil. Export configuration # Setting export parameters # 내보내기를 위해 생성된 콘텐츠는 org-glossary-export-specs 에 정의된 템플릿에 의해 관리됩니다. 곧 이에 대해 자세히 논의하겠지만 지금은 상황에 따라 다르게 생성된 콘텐츠를 원할 것이라고 생각합니다. 이것이 적용되는 두 가지 수준이 있습니다.\nBy export backend By the type of glossary-like structure (Glossary, Acronyms, Index, etc.) 이는 alist of alists of templates 를 생성하여 설명합니다.\nFirst, we create associations between export backends and specs, with the special \u0026ldquo;backend\u0026rdquo; t as the default value, i.e.\n먼저 특수 \u0026ldquo;backend\u0026rdquo; t 를 기본 값으로 사용하여 내보내는 백엔드와 스펙 간의 연결을 만듭니다.\n1 2 3 4 ((t . DEFAULT-TEMPLATE-SET) (html . HTML-TEMPLATE-SET) (latex . LATEX-TEMPLATE-SET) ...) 적절한 템플릿 세트를 선택할 때 실제로 org-export-derived-backend-p (순서대로)를 사용하여 현재 내보내기 백엔드에 대해 각 항목을 확인합니다. 여기에는 두 가지 의미가 있습니다.\nYou can export to derived backends (e.g. beamer) and things should just work If specifying a template set for a derived backend (e.g. beamer) be sure to put it before any parent backends (i.e. latex, in beamer\u0026rsquo;s case) in org-glossary-export-specs to ensure it is actually used. 백엔드에 적합한 템플릿 세트는 그 자체로 다음과 같은 템플릿 목록입니다.\n1 2 3 4 ((t . TEMPLATE) (glossary . TEMPLATE) (acronym . TEMPLATE) (index . TEMPLATE)) 다시 한 번 t 는 기본값을 의미합니다. org-glossary-headings 에 나열된 각 유형에 대해 백엔드별 기본 템플릿에서 먼저 가져온 다음 전역 기본값에서 템플릿을 채웁니다. 이것은 현재 백엔드에 대한 용어집과 같은 구조의 각 유형에 대한 내보내기 동작을 제어하는 ​​완전한 템플릿 세트를 제공합니다.\nStructure of an export template set # 용어 사용 및 정의 내보내기는 템플릿 세트 에 의해 관리됩니다. 기본 템플릿 세트는 (alist-get t (alist-get t ~org-glossary-export-specs)) 에 의해 제공되며, 기본값은 다음 속성 목록에 의해 제공됩니다.\n1 2 3 4 5 6 7 8 9 (:use \u0026#34;%t\u0026#34; :first-use \u0026#34;%u\u0026#34; :definition \u0026#34;%t\u0026#34; :backref \u0026#34;%r\u0026#34; :heading \u0026#34;\u0026#34; :category-heading \u0026#34;* %c\\n\u0026#34; :letter-heading \u0026#34;*%L*\\n\u0026#34; :definition-structure-preamble \u0026#34;\u0026#34; :definition-structure \u0026#34;*%d*\\\\emsp{}%v\\\\ensp{}%b\\n\u0026#34;) 각 속성은 특정 상황을 나타내며 값은 다음 중 하나입니다.\nA format string that represents the content that should be used A function with the same signature as org-glossary\u0026ndash;export-template, that generated the replacement content string. :use, :first-use, :definition 및 :backref 속성은 백엔드별 콘텐츠 트랜스코딩(즉, 백엔드 출력 구문 사용) 중에 적용되는 반면 :definition-structure , :category-heading 및 ~:letter-seperator~는 백엔드별 내보내기 프로세스 직전에 Org 문서의 사본에 적용됩니다(그래서 Org 구문을 사용하여 작성해야 함).\n형식 문자열은 다음 토큰을 사용할 수 있습니다.\n%t, the term being defined/used. This is pluralised and capitalised automatically based on the link type (gls​/​glspl​/​Gls​/​Glspl). %v, the term definition value. %k, the term key. %K, the term key buffer-local nonce (number used only once). This will only be consistent within a particular Emacs session. %l, the first letter of the term, in lower case. %L, the first letter of the term, in upper case. %r, the term reference index (only applicable to :use and :first-use). %n, the number of times the term is used/referenced. %c, the term category. %u, the result of :use (primarily intended for convenience with :first-use) %d, the result of :definition (only applicable to :definition-structure) %b, all the :backref results joined with \u0026quot;, \u0026quot; (only applicable to :definition-structure). :definition-structure-preamble 및 :heading 매개변수는 백엔드별 내보내기 단계 직전에 Org 문서 사본에 삽입되는 리터럴 문자열이기도 합니다.\n이러한 속성이 어떻게 작동하는지 설명하기 위해 다음 예제에서는 생성된 콘텐츠 대신 속성 이름을 사용합니다.\n1 2 3 4 5 6 7 8 9 10 11 Here\u0026#39;s some text and now the term :first-use, if I use the term again it is now :use. Once more, :use. Now we have the appendix with glossary-like definitions. :heading :category-heading :letter-heading :definition-structure-preamble :definition-structure(:definition def-value :backref) 불필요한 문자 제목(즉, 도움이 되지 않음)을 피하기 위해 org-glossary-print-letter-minimums 가 있습니다. 이 변수는 :letter-heading 템플릿을 삽입하기 전에 동일한 문자를 가진 고유한 초기 용어 문자 및 용어의 최소 임계값 수를 지정합니다.\n:heading, :category-heading 또는 ~:letter-heading~이 =\u0026rdquo;* \u0026ldquo;=로 시작하면 제목을 적절한 수준으로 설정하기 위해 별표가 자동으로 접두사로 추가됩니다.\nCreating a new glossary type # 몇 가지 예를 살펴보겠습니다. 우선 Index 대신 Indices 제목 아래에 색인화된 용어를 정의할 수 있기를 원한다고 가정해 보겠습니다. 이렇게 하려면 ~org-glossary-headings~에 항목을 추가하기만 하면 됩니다. 이 작업은 사용자 지정 인터페이스를 통해 또는 다음 스니펫을 사용하여 수행할 수 있습니다.\n1 2 3 4 (customize-set-value \u0026#39;org-glossary-headings (cl-remove-duplicates (append org-glossary-headings \u0026#39;((\u0026#34;Indices\u0026#34; . index))))) 이것이 실제로 내보내기에 반영되도록 하려면 다음 중 하나를 수행할 수 있습니다.\nRename the index heading to * Indices, or Create a near-copy of index, just changing the heading 첫 번째 경우에는 다음 스니펫을 실행하기만 하면 됩니다.\n1 (org-glossary-set-export-spec t \u0026#39;index :heading \u0026#34;* Indices) Indices=를 사전 정의된 색인 용어와 연결하는 대신 내보내기에 실제로 반영하려면 먼저 ~(\u0026quot;Indices\u0026quot; . indicies)~ 쌍을 ~org-glossary-headings~에 추가합니다( 이전과). 그런 다음 현재 ~org-glossary-export-specs~에 있는 각 =index 템플릿을 복사하고 방금 =index=에 대해 수행한 것처럼 기본 ~:heading~을 업데이트할 수 있습니다.\n1 2 3 4 5 (dolist (template-set org-glossary-export-specs) (when-let ((index-template (alist-get \u0026#39;index (cdr template-set)))) (push (cons \u0026#39;indices index-template) (cdr template-set)))) (org-glossary-set-export-spec t \u0026#39;indices :heading \u0026#34;* Indices) 마지막 예에서는 =Abbreviations=에 대한 지원을 추가하고 싶다고 가정해 보겠습니다. 이것은 두문자어와 거의 같은 방식으로 작동하지만 첫 글자로 구성되지 않은 단어나 구의 축약형을 사용합니다. 이전과 동일한 방식으로 (\u0026ldquo;Abbreviations\u0026rdquo; . abbreviation) 쌍을 ~org-glossary-headings~에 추가한 후 다음과 같이 간단합니다.\n1 2 3 (push \u0026#39;(abbreviation :heading \u0026#34;* Abbreviations\u0026#34; :first-use \u0026#34;%v (%u)\u0026#34;) (plist-get t org-glossary-export-specs)) Tweaking specific exports # org-glossary-export-specs 를 덮어쓰는 대신 다음과 같이 setcdr 또는 plist-put 을 대신 사용하는 것이 좋습니다.\n1 2 3 4 (org-glossary-set-export-spec \u0026#39;latex t :backref \u0026#34;gls-%k-use-%r\u0026#34; :backref-seperator \u0026#34;,\u0026#34; :definition-structure \u0026#34;*%d*\\\\emsp{}%v\\\\ensp{}@@latex:\\\\ifnum%n\u0026gt;0 \\\\labelcpageref{@@%b@@latex:}\\\\fi@@\\n\u0026#34;) 이 예에서는 :definition-structure=를 함수로 설정하여 =\\ifnum%n\u0026gt;0 LaTeX 스위치를 피할 수 있습니다.\n1 2 3 4 5 6 7 8 9 (org-glossary-set-export-spec \u0026#39;latex t :definition-structure (lambda (backend info term-entry form \u0026amp;optional ref-index plural-p capitalized-p extra-parameters) (org-glossary--export-template (if (plist-get term-entry :uses) \u0026#34;*%d*\\\\emsp{}%v\\\\ensp{}@@latex:\\\\labelcpageref{@@%b@@latex:}@@\\n\u0026#34; \u0026#34;*%d*\\\\emsp{}%v\\n\u0026#34;) backend info term-entry ref-index plural-p capitalized-p extra-parameters))) 이를 통해 다른 백엔드의 모든 변경 사항이나 특별히 연결되지 않은 기본값을 자유롭게 업데이트할 수 있습니다.\n"},{"id":32,"href":"/posts/open_my_lovely_blog/","title":"블로그 오픈 : 텍스트로 삶을 채워 가는 즐거움🌱","section":"Articles","content":" 드디어 블로그를 오픈했다. 아무것도 아닌 이 일이 나에게 왜 이렇게 큰 기쁨을 주는 것일까? 아직 아무것도 없는 이 공간을 만들기까지 많은 고민이 있었다. 이제 글쓰는 기쁨을 온전히 그리고 멋지게 나누어 보고 싶다. Junghanacs: 자네 급하게 하지 마시게!\nJunghan: 아이고 이 글을 잊지 않았구만! 어떻게 해야 좋을까? 나에게 가장 중요하긴 한데\u0026hellip;\nJunghanacs: 🌱 시작하지 않았는가? 급한 글도 아닐세. 내가 계속 함께 고민하고 있겠네! 정리되면 보내 줄테니 받으시게!\n질문: 왜 오래 걸렸는가? # 쓰고 픈 말이 많다고 다 쓸 수 있는 것은 아니다. 필요한 기능 부터 검증하고, 필요할 글을 채워 나가자. 이 글을 틈틈히 써야 한다. 쓰고 싶다. 도대체 왜 이렇게 오래 걸렸을까?\nFortune # 내가 아끼는 기능이다.\n우리가 반복적으로 행하는 것이 우리 자신이다. 그렇다면 탁월함은 행동이 아닌 습관인 것이다. — 아리스토텔레스 "},{"id":33,"href":"/notes/org_org_roam_hugo_meta_format/","title":"Ox-Hugo Blogging Advanced Tips and Examples 🌲","section":"Notes","content":" Org-Roam 에서 작성한 문서를 Hugo Markdown 으로 변환하기는 쉽다. 근데 각주, 인용, 태그, 요약, 코드, 일부 내용 감추기 등을 어떻게 하는가? 여기에 대한 답을 찾는다. ox-hugo 의 모든 예제는 다음 주소에 있다. 여기서 찾아보자. 1\nTODO [1/2] Check Lists # [ ] Sidenote and book_menu are collapsed after-menu.html [X] mermaid caption 문제 \u0026ndash; 이미지로 넣어라.\nHeading # [2023-06-19 Mon 17:51] h2 은 레드 계열 heading 은 숫자보다는 정통 별표로 가는게 예쁘다.\nFigure 1: modus-themes-list-colors-current for heading asterisks\nHeading 2 # 헤딩 h3 yello 계열\nHeading 3 # h4 blue [2023-06-19 Mon 17:51]\nSidenote 추가 정보 # abc 사이드 노트에 대한 나의 사랑은 엄청 납니다. 사이드 노트 예제 입니다.\n사이드노트 아직 메뉴와 겹쳐지는 문제를 해결해야 합니다. 다만 사용하는데 지장 없습니다. 는 좋습니다.\n숏코드는 tempel 에 hugoside 로 만들어 두었습니다.\nFigure 2: 사이드노트 예\nMarkup # org-mode 마크업은 다음의 주소에서 확인 바람. 2 ox-hugo 관련 내용은 다음 주소에서 확인.3 결과를 비교하면 org-code 와 verbatim 이 다르다. 맞춰줘야 한다. verbatim 은 맞추기가 까다롭다. kbd 을 많이 사용하라!\n헤딩에는 _ 만 사용하라! 본문에는 ~, = 깔끔하다. *, / 은 편하게 사용하되 헤딩에만 피해라! org-bold : * org-code : ~ (org-hugo-use-code-for-kbd t) org-italic : / org-strike : + org-underline : _ org-verbatim : = Summary 블록 # 요약문은 한글, 컬럼 80 으로 2.5 줄 정도 가능하다. 간단히 쓰는게 항상 답이다. 간단히 요약하기란 쉽지 않다. 하지만 중요하다. 아래와 같이 포스팅 맨 위에 짧은 글을 넣으면 된다. #+hugo: more 이 구분자 역할을 한다. 왠만하면 문서에 html 코드를 넣고 싶지 않다. 제공하는 방법을 사용한다.\n1 2 3 4 5 My post summary. #+hugo: more My post content. Citation 서지 정보 # 다음과 같이 상/하단에 넣어야 한다. 레퍼런스를 달아 봅니다. SPC B i 로 바인딩을 해 놓았다. [1] [2] citar 사용법을 여기서 다룰 것은 아니다. 아무튼 깔끔하게 들어간다.\n1 2 3 4 #+EXPORT_HUGO_PANDOC_CITATIONS: t ,[cite:@HaekeowaHwaga14] #+print_bibliography: Below, the \u0026#34;References\u0026#34; heading will be auto-inserted. 현재 라인 다음에 References 이 추가 된다.\nReferences # [1]P. Graham, 해커와 화가. 2014. Available: http://www.yes24.com/Product/Goods/11775130 [2]Jethro Kuan, “How I Take Notes with Org-roam,” 2022. https://jethrokuan.github.io/org-roam-guide/ (accessed May 16, 2023). Footnote 각주 관리 # 각주는 이렇게 들어갑니다. 4\n코드, 인용, 예시 블록 # \u0026lsquo;:\u0026rsquo; 을 애용한다. 1 라인 블록.\n1 안녕하세요. 간단해서 좋습니다. example : 앞에 탭 사이즈 공백이 들어 간다.\n1 위에 요약문의 분량입니다. 대략 2.5 줄 정도 입니다. 한글로. quote\n위에 요약문의 분량입니다. 대략 2.5 줄 정도 입니다. 한글로.\nsrc 소스코드 블록이다.\n1 2 3 4 5 (with-eval-after-load \u0026#39;ox-hugo (setq org-hugo-auto-set-lastmod \u0026#39;t org-hugo-section \u0026#34;posts\u0026#34; org-hugo-suppress-lastmod-period 43200.0 ) center\n위에 요약문의 분량입니다. 대략 2.5 줄 정도 입니다. 한글로.\nverse\n위에 요약문의 분량입니다. 대략 2.5 줄 정도 입니다. 한글로.\n일부 내용 숨기기 (noexport) # 블로그 리포는 공개되어 있다. 여기에 Markdown 파일이 그대로 있다. 숨기고 싶은 또는 숨겨야 하는 내용이 분명히 있을 것이다. 그렇다면 org 파일에서 아래와 같은 방법으로 숨기면 된다. 아예 private 프로퍼티를 넣고 ox-hugo 에서 걸러주는 방법도 있다. 나는 왠만하면 다 내용을 오픈하고자 한다. 다만 문제가 되거나 퀄리티가 많이 부족한 부분은 헤딩 수준에서 숨기길 원한다.\nnoexport 태그 활용 # 아래 헤딩은 안보입니다. 뭔가 더 있는데 안보이죠? 그럼 된겁니다.\n1 * 숨기고 싶은 헤딩이라면 태그를 달아라 :noexport: 파일 숨기기 (비추) # 연결 된 노트를 작성하는 경우라면 좋지 않은 방법이다. 링크를 블록하는 처리를 해줘야 한다.\n1 ,:EXPORT_FILE_NAME: excluded-post 태그를 키워드로 변환 # 키워드로 빼고 태그는 명시하는게 좋겠다. 태그와 카테고리는 관리가 필요하다. 지식 관리를 할 때 태그, 카테고리는 매우 중요한 분류 방법이다. 태그를 마구잡이로 잡는 것은 좋지 않은 방법이다. 대략 분류를 해놓고 그 안에서 설정을 하는게 좋다. 특히 디지털 가든에서는 태그 관리가 더 중요하다. 그래서 파일 태그가 이리저리 많더라도 변환 할 때는 키워드로 할당되도록 한다. 즉 블로그의 태그는 적절하게 관리한다. 자동화가 언제나 효과적인 것은 아니다.\n1 #+hugo_front_matter_key_replace: tags\u0026gt;keywords Shotcodes 지원 # [2023-06-08 Thu 12:19] Hugo Book 데모 페이지를 확인한다. 5\n여기에 보면 문서 편집하기 위한 여러 코드들을 제공하고 있다. 나는 마크다운으로 편집하지 않기 때문에 각각 기능 검증이 필요하다. ox-hugo 가 있으니 문제 될 것은 없다. 오히려 이맥스의 확장성을 제한하기 때문에 선택과 집중이 필요하다.\nhint and details # [2023-06-05 Mon 13:44] org 파일에서 제공하는 기능은 아니지만 블로그에서 보다 정보를 깔끔하게 정리하기 위해서 short-code 를 사용할 수 있다. 스니펫으로 만들어 놓으니 아주 편리하다.\n이맥스의 기본 Quote 변환. 나는 serif 폰트로 변경했다.\nQuote 인용문\nhint 에서 레벨에 맞는 컬러 효과가 가능하다.\nhint info 인포 hint warning 경고 hint error 에러 expand 도 가능하다. (details)\nCustom Label Markdown content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa mermaid diagram # 벡터 포멧을 지원하지 않지만 PNG 로 바로 결과를 확인하고 내보내기가 가능한 ob-mermaid 를 활용하는게 더 편하다. 보는 입장에서도 이미지가 더 활용하기 쉽다. mermaid 다이어그램을 생성하는 방법은 2 가지다.\norg-babel : ox-mermaid Short-code : mermaid 아래와 같은 코드를 변환한다고 하자.\nDetails stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 \u0026ndash;\u0026gt; State2 note left of State2 : This is the note to the left. org-babel 의 이점은 org 문서에서 바로 결과를 확인할 수 있다는 점이다. 편집하면서 바로 보고 블로그로 바로 내보내면 된다. 물론 로컬에 mermaid 를 설치해 놓아야 한다. 물론 ob-mermaid 로 설정은 기본이다. 6\n1 npm install -g @mermaid-js/mermaid-cli 단점은 명확하다. png 만 지원 된다.\nOb-Mermaid 이용한 결과다. png 파일의 한계.\n:exports 옵션은 code, results, both, none 7\n1 2 3 4 5 6 7 8 stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u0026gt; State2 note left of State2 : This is the note to the left. Code Snippet 1: My class diagram (code and png) Short-code 를 이용한 결과. 벡터 포멧의 장점 적절히 사용하면 된다. 다만 캡션이 왜 안들어가는지 확인이 필요하다. 위의 방식과 다르게 해야 한다.\nstateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u0026gt; State2 note left of State2 : This is the note to the left. TODO d2 diagram # [2023-06-16 Fri 12:52] 동작은 되는데 설정하는 방법을 좀 봐야겠다. 억지로 꼳 가져갈 필요 없다.\nDetails and Summary # details\nWhy is this in green? You will learn that later below css section. summary 블록을 사용하면 다음과 같다. 헤딩을 무시\nWhy is this in green? 일반 리스트는 헤딩 아래에 들어간다. 다음과 같다.\nWhy is this in green? TODO katex and math typesetting # [2023-06-08 Thu 12:18] Emacs 가지는 옵션도 많이 있다. 가장 범용적이고 쉬운 방법을 선택할 것이다. org 모드로 편집하기 때문에 여기서 preview 가 되는 것이 가장 중요하다.\nTODO 결과에 caption 넣는 방법 # [2023-06-08 Thu 12:25] 변환 된 코드 블록의 결과 이미지에 캡션을 넣어야 한다.\nOrg-translate 블록 번역 # [2023-06-08 Thu 12:52] 블록 번역 테스트.\n1 ,#+BEGIN_SRC translate :src en :dest ko :noexport 코드 블록을 번역 하여 하단에 삽입한다.\n1 2 3 4 5 6 Doom is a configuration framework for GNU Emacs tailored for Emacs bankruptcy veterans who want less framework in their frameworks, a modicum of stability (and reproducibility) from their package manager, and the performance of a hand rolled config (or better). It can be a foundation for your own config or a resource for Emacs enthusiasts to learn more about our favorite operating system. Doom 은 프레임워크에 적은 프레임워크, 패키지 관리자의 약간의 안정성(및 재현성), 수동 구성의 성능(또는 그 이상)을 원하는 Emacs 파산 베테랑을 위해 맞춤화된 GNU Emacs 용 구성 프레임워크입니다. 자신의 구성을 위한 기초가 될 수도 있고 Emacs 애호가가 선호하는 운영 체제에 대해 자세히 알아볼 수 있는 리소스가 될 수도 있습니다.\nHeader Template # capture 를 하면 아래와 같이 노트의 타입에 맞게 헤더가 생성 된다. publish, lastmod 는 직접 수정 한다. 그래야 깔끔하다.\n1 2 3 4 5 6 7 8 9 10 ,:PROPERTIES: ,:ID: 3dcd5b7a-9e78-41a9-a3da-xxxxxxxx ,:END: #+title: HELLO WORLD #+date: \u0026lt;2023-06-22 Thu 10:27\u0026gt; #+hugo_publishdate: \u0026lt;2023-06-22 Thu 10:27\u0026gt; #+hugo_lastmod: \u0026lt;2023-06-22 Thu 10:27\u0026gt; #+filetags: 🎶 #+HUGO_DRAFT: true #+HUGO_SECTION: notes 노트를 캡처 하면 아래와 같다.\nFigure 3: Sample notes after org-roam-capture\n그 다음에 template 을 가져 온다. 자동으로 가능한 부분을 거의 다 제거 했다. 내보내기 전에 확인하고 직접 하는 것이 노트에 대한 나의 자세가 아닐까 싶다.\n아 물론 SETUPFILE 을 이용해서 표준화 시킬 수 있다. 그렇게 했었다. 근데 이 또한 섣부른 자동화가 아닐까? 하루에 1-2 개 노트를 만드는데 뭘 더 자동화 하려는 것인가?! 귀하게 다루자. 받들어 모시자.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 (hugofront \u0026#34; ,# :ROAM_ALIASES: \\\u0026#34;\u0026gt;\u0026gt;\\\u0026#34; #+SUBTITLE: #+URL: #+LANGUAGE: ko ,# #+STARTUP: overview ,# == TAGS == ,# 🌱 🪴 🌳 #+filetags: :draft: #+filetags: 🌱 #+HUGO_TAGS: ,# == Taxonomies == ,# #+HUGO_CATEGORIES: ,# #+HUGO_SERIES: ,# == Glossary == #+glossary_sources: glossary ,# == Front-matter == #+hugo_front_matter_key_replace: tags\u0026gt;keywords ,# #+hugo_front_matter_key_replace: aliases\u0026gt;nil ,# #+hugo_paired_shortcodes: hint details mermaid sidenote #+EXPORT_HUGO_PANDOC_CITATIONS: t ,# #+print_bibliography: ,# == Summary == #+attr_shortcode: info #+begin_hint\u0026#34; n\u0026gt; r\u0026gt; n\u0026gt; \u0026#34;,#+end_hint #+hugo: more * HIDDEN :noexport: * ChangeLog :noexport: \u0026#34;) https://raw.githubusercontent.com/kaushalmodi/ox-hugo/main/test/site/content-org/all-posts.org\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://orgmode.org/manual/Markup-for-Rich-Contents.html\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://ox-hugo.scripter.co/doc/formatting\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nHow I Take Notes with Org-roam\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://hugo-book-demo.netlify.app/docs/shortcodes/katex/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/arnm/ob-mermaid\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://orgmode.org/manual/Exporting-Code-Blocks.html\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":34,"href":"/refs/giovannicrisalfiStartQutebrowserNow2022/","title":"Giovanni Crisalfi :: Start Qutebrowser Now (2022)🌲","section":"References","content":" 저자에게 파이어폭스는 마우스를 사용하게 만드는 유일한 소프트웨어였다. 빔 관련 플러그인만으로는 만족할 수 없었다. 그래서 결국 정착한 녀석이 Qutebrowser 이다. 그에게 배워보자. 1 2 레퍼런스 노트는 1. 나의 생각 2. 원문 번역 으로 구성 됩니다. 번역은 기계 번역 후 제가 이해할 만한 수준으로 수정한 것 입니다. 나의 생각 : 키보드 기반 웹 브라우저를 향하여! # 레퍼런스 노트는 원문 번역과 나의 생각으로 구성 된다. 오늘 다룰 글은 연습 삼아 짧은 글을 선택했다. 웹브라우저 관련 글인데 그의 설정 파일은 나에게 매우 도움이 되었다. 1\n나 역시도 이상하게 웹 브라우징을 할 때 마우스를 사용하게 된다. 플러그인을 설치해서 키보드로 사용할 수 있음에도 마우스를 사용하게 된다. 그렇다고 이맥스에서 EWW, EAF 등을 사용하지는 않는다. 참 웹 브라우저는 기존 사용자 경험을 무시하기가 어려운 녀석 중에 하나다.\n쓸만한 키보드 기반 브라우저로는 Nyxt 와 Qutebrowser 가 있다. Nyxt 는 Common Lisp 개발되어 이맥스와 궁합이 잘 맞는다고는 하는데 내 리눅스에서는 뭔가 꼬여서 잘 동작이 안된다. 아무튼 좋은 기억이 없다. 그래서 남은게 Qutebrowser 인데 패키지 매니저에서 쉽게 설치할 수 있어서 실행해보기는 참 좋다. QtWebEngine 이라 사용성에도 떨어지지 않는다. 근데 안쓰게 된다. 왜!?\n언제까지 마우스 사용 할 것인가? 해결 해야 했다. 해결 해야만 했다. 근데 급한 문제는 아니기에 영영 해결이 안될 것 같았다. 그러다가 저자의 글을 읽고 그의 설정 파일을 받아서 실행했다. 흠. 대충 감이 오는데?! 딱 이거다! 라는 생각이 들었다. 내 이맥스와 키 바인딩이 비슷하기 때문이다.\n이미 이맥스를 사용하면서 키보드 바인딩을 정리한 상황인데 또 뭘 추가한다는게 정말 불편했다. 더 편한 것도 필요 없다. 그냥 일관성만 있으면 된다. 이런 와중에 저자의 설정 파일은 운좋게 얻어 걸린 선물과도 같았다. 여전히 나는 Qutebrowser 에 정착하지 않았다. 다만 가는 길을 알았으니 조만간 도달 할 것이다.\n키보드 워크플로우는 나에게 엄청난 행복을 주었다. 이 엄청난 몰입감은 생산성 향상이라는 말로 담기에는 부족하다. 생산성 향상하자고 이렇게 하는게 아니다. 행복하자고 하는 것이다. 멀티 모니터도 이제 필요가 없다. 정말 그냥 모니터 하나 그리고 나의 전용 키보드 하나만 있으면 된다. 그리고 이맥스만 실행하면 끝난다.\n우리가 지적인 노력을 하는 모든 것은 결국 텍스트 놀이이다. 읽거나 쓰거나 말하거나 듣거나 다 텍스트 뿐이다. 인간의 언어나 컴퓨터의 언어나 다 텍스트 일 뿐이다. 그러기에 키보드 하나면 충분하다. 오직 이 뿐이다.\n스크린샷: 작성 중인 문서. org-hugo-export-wim-to-md 를 실행하면 바로 블로그로 내보내기 된다. 각주, 레퍼런스, 요약 등 완벽하게 하나다. 나는 Org 파일 하나로 다 할 수 있다. 진심으로 아름답다. 행복하다. 테마는 ef-themes 중에 \u0026lsquo;봄\u0026rsquo; 이다. 이 또한 사랑스럽다. 원문 번역 : Start Qutebrowser Now (2022) # 며칠 전 Qutebrowser 를 사용하기 시작했습니다. 실 사용을 의미합니다. 처음으로 설치한 것은 아니었습니다. 이전에 여러 번 시도해 보았지만 Firefox 를 떠날 생각은 전혀 없었습니다. 이번에는 일일 드라이버로 사용하여 전체 작업 흐름을 마이그레이션합니다.\n하지만 Firefox 를 떠나는 미친 생각을 한 이유는 무엇입니까?\n마우스를 체계적으로, 반복해서 사용하게 만든 유일한 소프트웨어였기 때문입니다. 예, 물론 Firefox 에서 많은 키 바인딩을 설정할 수 있으며 Vim Vixen 과 같은 애드온을 설치하여 키보드로만 사용할 수 있지만, 네이티브로 지원 되는 게 아니므로 여전히 불편함을 느낍니다. 즉, 모든 명령 자바스크립트를 통해 전달되어야 합니다. 물론 파이어폭스의 잘못은 아닙니다. 파이어폭스는 이와 같은 사용자를 염두에 두고 개발되지 않았기 때문에 키보드 전용으로 사용하는 방식을 상상할 수 없었을 것입니다. 아마도 오래된 확장 관련 기능을 포기하지 않았다면 실제로 키보드 기반 브라우저로 만들 수 있었을 것입니다. 하지만 WebExtension 을 켜는 것은 Mozilla 에서 제공하는 것이 아니므로 이러한 일탈(digressing)을 피해야 합니다. 즉 요점은 Firefox 는 키보드 기반 브라우저가 아니므로 다른 녀석을 찾아봐야 한다는 점 입니다.\n저와 같이 키보드에 집착하는 사용자는 실제로 소수이지만 일반적으로 끈질긴(tenacious) 프로그래머 커뮤니티에 해당합니다. 이들은 상당히 많은 키보드 기반 브라우저들을 다루고 있습니다. Qutebrowser 외에도 Surf, Nyxt(이전의 Next)와 더불어 오래된 파이어폭스를 포크한 PaleMoon 등이 있습니다.\n불행히도 이러한 브라우저에는 일반적으로 어떤 의미에서 몇 가지 제한이 있기 때문에 양이 자동으로 많은 선택을 의미하지는 않습니다. 그 중에서 Qutebrowser 가 가장 견고한 것 같습니다. Qutebrowser 에는 일련의 장점이 있습니다. PyQt5 에서 실행됩니다. 즉, Chromium 을 기반으로 하는 QtWebEngine 을 사용합니다. Chromium 의 엔진을 사용하는 것이 저를 가장 itchy 하게 만드는 것입니다. 하지만 이는 Qutebrowser 를 많은 서비스 지원과 호환성을 높이는 동시에 보안 관점에서도 신뢰하게 만드는 점임을 인정합니다.\n저자이자 관리자인 Florian Bruhin 의 헌신과 더불어 작지만 계속 이어오는 개발자 및 사용자 커뮤니티 덕분에 Qutebrowser 는 이미 테마, 북마크, 다크 모드, Brave Browser 의 Rust 라이브러리를 기반으로 하는 우수한 광고 차단과 같은 주요 요구 사항을 처리하고 있습니다. 그럼에도 불구하고 Chromium 및 Firefox 확장에서 발생하는 것과 같이 흔하지 않은 모든 문제에 대해 즉각적인 해결책을 기대할 수는 없습니다. 이러한 경우 코딩 작업 외에 다른 대안이 없습니다. 그리고 그것이 Qutebrowser 와의 실제 여정이 시작되는 곳입니다. 이와 관련하여 Qutebrowser 에 대한 저의 첫 번째 사용자 스크립트인 SwapForQute 를 참조하십시오.\nSwapForQute(또는 그냥 SFQ)는 설정하기 쉬운 구성에 따라 URL 을 새 URL 로 대체하는 qutebrowser 용 사용자 스크립트입니다.\n설치 방법, 작동 방식, 키 바인딩 빌드 방법 등에 대한 자세한 설명은 GitHub에서 저장소 확인을 참조하세요.\n레빗홀(the rebbit hole)에 더 깊이 들어가고 싶다면 my Qutebrowser literate 구성 참조도 있습니다.\nhttps://www.zwitterio.it/en/software/start-qute-now/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":35,"href":"/configs/emacs/spacemacs/","title":"Dot-Spacemacs","section":"menu/Dotfiles/dot-emacs","content":" Spacemacs 닷 파일. 정리가 필요하다. 정리는 주석 삭제부터. noexport 를 적절히 사용 Currently tailored for GNU Emacs 29+ 29.1 릴리즈가 되니까 거기에 집중한다.\nPrerequisites # Spacemacs init.el # This file is loaded before the initialization of emacs begins. It is sometimes helpful to pre-configure stuff in here. Note: The :PROPERTIES: drawer in this section flags org-babel to make sure that the .emacs.d/ directory exists using the :mkdirp yes argument.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; This file was generated using literate programming. ;; Please see the spacemacs.org file. ;;; Load paths ;; optimize: force \u0026#34;lisp\u0026#34;\u0026#34; and \u0026#34;site-lisp\u0026#34; at the head to reduce the startup time. ;; (add-to-list \u0026#39;load-path (concat dotspacemacs-directory \u0026#34;lisp\u0026#34;)) (dolist (dir \u0026#39;(\u0026#34;site-lisp\u0026#34; \u0026#34;lisp\u0026#34;)) (push (expand-file-name dir dotspacemacs-directory) load-path)) ;; Emacs version 29 added a new frame parameter for \u0026#34;true\u0026#34; transparency, which ;; means that only the blackground is transparent while the text is not. ;; started to use new #emacs 29 alpha-background frame-parameters. It only works on ;; gnu/#linux at the moment and look beautiful : (if (eq system-type \u0026#39;gnu/linux) (setq default-frame-alist (push \u0026#39;(alpha-background . 94) default-frame-alist)) (setq default-frame-alist (push \u0026#39;(alpha . (95 90)) default-frame-alist))) (setq emacs-major-version-string (format \u0026#34;%s\u0026#34; emacs-major-version)) ;; only for window-system ;; (setq default-frame-alist (push \u0026#39;(internal-border-width . 5) default-frame-alist)) ;; (setq default-frame-alist (push \u0026#39;(right-divider-width . 20) default-frame-alist)) ;; (setq default-frame-alist (push \u0026#39;(scroll-bar-with . 12) default-frame-alist)) ;;; Load \u0026#39;Spacemacs\u0026#39; (load-file (concat dotspacemacs-directory \u0026#34;spacemacs.el\u0026#34;)) ;;; Show \u0026#39;Startup-Time\u0026#39; (defun display-startup-echo-area-message () \u0026#34;Display startup message.\u0026#34; (message (concat \u0026#34;Startup time: \u0026#34; (emacs-init-time)))) ;;; init.el ends here Custom Settings emacs-custom.el # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; This file is where Emacs writes custom variables. ;; Spacemacs will copy its content to your dotfile automatically in the ;; function `dotspacemacs/emacs-custom-settings\u0026#39;. ;; Do not alter this file, use Emacs customize interface instead. ;;; Custom-set-variables (custom-set-variables ;; custom-set-variables was added by Custom. ;; If you edit it by hand, you could mess it up, so be careful. ;; Your init file should contain only one such instance. ;; If there is more than one, they won\u0026#39;t work right. \u0026#39;(safe-local-variable-values \u0026#39;( (org-cite-export-processors (t csl \u0026#34;~/org/roam/ieee.csl\u0026#34;)) (eval add-hook \u0026#39;after-save-hook (lambda nil (org-babel-tangle)) nil t)))) ;;; Custom-set-faces (custom-set-faces ;; custom-set-faces was added by Custom. ;; If you edit it by hand, you could mess it up, so be careful. ;; Your init file should contain only one such instance. ;; If there is more than one, they won\u0026#39;t work right. \u0026#39;(translate-paragraph-highlight ((t (:extend t :background \u0026#34;red\u0026#34;)))) \u0026#39;(spell-fu-incorrect-face ((t (:underline (:color \u0026#34;dark violet\u0026#34; :style wave :position nil))))) \u0026#39;(pocket-reader-archived ((t (:weight semi-light)))) \u0026#39;(pocket-reader-unread ((t (:underline t :weight normal)))) \u0026#39;(wcheck-default-face ((t (:foreground \u0026#34;HotPink1\u0026#34; :underline (:color foreground-color :style wave :position nil))))) \u0026#39;(sideline-blame ((t (:foreground \u0026#34;#7a88cf\u0026#34; :background unspecified :height 1.0 :italic t)))) ) ;;; emacs-custom.el ends here Dotfile Headers spacemacs.el # This generates the top of the init file, which will set up the lexical scope and describe to Emacs what the file does.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;; ;; This program is free software: you can redistribute it and/or modify it under ;; the terms of the GNU General Public License as published by the Free Software ;; Foundation, either version 3 of the License, or (at your option) any later ;; version. ;; ;; This program is distributed in the hope that it will be useful, but ;; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or ;; FITNESS FOR A PARTICULAR PURPOSE. ;; ;; See the GNU General Public License for more details. You should have received ;; a copy of the GNU General Public License along with this program. If not, see ;; \u0026lt;https://www.gnu.org/licenses/\u0026gt;. ;; ;; ____ ;; / ___| _ __ __ _ ___ ___ _ __ ___ __ _ ___ ___ ;; \\___ \\| \u0026#39;_ \\ / _` |/ __/ _ \\ \u0026#39;_ ` _ \\ / _` |/ __/ __| ;; ___) | |_) | (_| | (_| __/ | | | | | (_| | (__\\__ \\ ;; |____/| .__/ \\__,_|\\___\\___|_| |_| |_|\\__,_|\\___|___/ ;; |_| ;; ;; This program was generated using literate programming. ;; Reproducible information # This configuration is continuingly being improved. I build my own Emacs from source in order to take advantage of some experimental features. There are also (packages! ...) calls to external Emacs packages that are unpinned to any specific version. As such, there might be incompabilities if one blindly copies codes from this configurations. Although I\u0026rsquo;ll try to document which features are based on developing softwares and are likely to be changed in the future, it is inevitable that some bits of information are going to fall through the cracks.\nIn this section, I reiterate the relevant info about the version of the software I\u0026rsquo;m using here, in case someone finds this infomation useful. Here\u0026rsquo;s my current build of Emacs:\n1 (emacs-version) 1 2 GNU Emacs 29.0.90 (build 1, x86_64-pc-linux-gnu, GTK+ Version 3.24.33, cairo version 1.16.0) of 2023-04-19 1 2 GNU Emacs 29.0.90 (build 2, x86_64-pc-linux-gnu, GTK+ Version 3.24.33, cairo version 1.16.0) of 2023-04-16 1 2 GNU Emacs 29.0.60 (build 2, x86_64-pc-linux-gnu, GTK+ Version 3.24.33, cairo version 1.16.0) of 2023-02-23 This Emacs is built with the following configuration options:\n1 system-configuration-options 1 --with-native-compilation --with-json --without-pop --with-gnutls --without-mailutils --with-sqlite3 --with-rsvg --with-png --with-jpeg --with-tiff --with-imagemagick --with-tree-sitter=ifavailable --with-cairo --with-lcms2 --with-modules --with-xwidgets --with-x-toolkit=gtk3 \u0026#39;--program-transform-name=s/^ctags$/ctags.emacs/\u0026#39; \u0026#39;CFLAGS=-O2 -pipe -mtune=native -march=native -fomit-frame-pointer\u0026#39; 1 --with-native-compilation --with-json --without-pop --with-gnutls --without-mailutils --with-sqlite3 --with-tree-sitter=ifavailable --with-cairo --with-lcms2 --with-modules --with-xwidgets --with-x-toolkit=gtk3 \u0026#39;--program-transform-name=s/^ctags$/ctags.emacs/\u0026#39; \u0026#39;CFLAGS=-O2 -pipe -mtune=native -march=native -fomit-frame-pointer\u0026#39; Base Configuration and Layer Declaration # Configuration Layers declaration. You should not put any user code in this function besides modifying the variable values.\nSTART dotspacemacs/layers () # 1 2 ;;; Spacemacs Layer (defun dotspacemacs/layers () Base Configurations # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 ;;;; \u0026#39;Base\u0026#39; Configurations (setq-default ;; Base distribution to use. This is a layer contained in the directory ;; `+distribution\u0026#39;. For now available distributions are `spacemacs-base\u0026#39; ;; or `spacemacs\u0026#39;. (default \u0026#39;spacemacs) dotspacemacs-distribution \u0026#39;spacemacs-base ;; 명시적으로 아래 정의한 패키지만 사용한다. ;; Lazy installation of layers (i.e. layers are installed only when a file ;; with a supported type is opened). Possible values are `all\u0026#39;, `unused\u0026#39; ;; and `nil\u0026#39;. `unused\u0026#39; will lazy install only unused layers (i.e. layers ;; not listed in variable `dotspacemacs-configuration-layers\u0026#39;), `all\u0026#39; will ;; lazy install any layer that support lazy installation even the layers ;; listed in `dotspacemacs-configuration-layers\u0026#39;. `nil\u0026#39; disable the lazy ;; installation feature and you have to explicitly list a layer in the ;; variable `dotspacemacs-configuration-layers\u0026#39; to install it. ;; (default \u0026#39;unused) dotspacemacs-enable-lazy-installation nil ;; dotspacemacs-enable-lazy-installation \u0026#39;unused dotspacemacs-ask-for-lazy-installation t dotspacemacs-configuration-layer-path \u0026#39;(\u0026#34;~/.spacemacs.d/layers/\u0026#34;) ; add private layer here! ;; 기본 스니펫 폴더 설정 dotspacemacs-directory-snippets-dir \u0026#39;(concat doctspacemacs-directory \u0026#34;snippets\u0026#34;)) Extra Package Options extra # \u0026ldquo;Frozen Packages\u0026rdquo; is list of packages that you do not want to be updated \u0026ldquo;Excluded Packages\u0026rdquo; is list of packages that will not be installed or loaded \u0026lsquo;Install packages\u0026rsquo;: Defines the behaviour of Spacemacs when installing packages. \u0026lsquo;used-only\u0026rsquo;: installs only explicitly used packages and uninstall any unused packages as well as their unused dependencies. `used-but-keep-unused\u0026rsquo;: installs only the used packages but won\u0026rsquo;t uninstall them if they become unused. `all\u0026rsquo; installs all packages supported by Spacemacs and never uninstall them. (default is `used-only\u0026rsquo;) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ;;;; \u0026#39;Extra\u0026#39; Package Options (setq-default dotspacemacs-frozen-packages \u0026#39;() dotspacemacs-excluded-packages \u0026#39;( web-beautify prettier-js company org-superstar emoji-cheat-sheet-plus ; dependent helm tern fancy-battery fish-mode valign undo-tree volatile-highlights ) dotspacemacs-install-packages \u0026#39;used-only ) Layer Declarations declaration # Declarations of layers which spacemacs should install. When layers are called there are different options for how this should be done. Spacemacs layers list\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ;;;; \u0026#39;Layer\u0026#39; Declarations ;; Default Layer Configurations ;; List of configuration layers to load. (setq-default dotspacemacs-configuration-layers \u0026#39;( jh-base jh-completion jh-visual jh-workspace jh-editing jh-navigation jh-writing jh-checker jh-project jh-utility jh-coding jh-org jh-org-workflow jh-pkm jh-misc jh-reading )) ;; Load custom-layer-filename (let ((custom-layer-filename (concat dotspacemacs-directory \u0026#34;layers/load-\u0026#34; emacs-major-version-string \u0026#34;.el\u0026#34;))) (when (file-exists-p custom-layer-filename) (load-file custom-layer-filename))) Additional Packages addition # List of additional packages that will be installed without being wrapped in a layer. If you need some configuration for these packages, then consider creating a layer. You can also put the configuration in `dotspacemacs/user-config\u0026rsquo;.\n여기 안넣고 아래에 use-package 하게되면, 다시켤 때 마다 지우고 설치하게 된다. 그러니 여기 넣어라. 순서만 잘 맞춰주면 된다.\n여기에 상당히 구성이 잘 되어 있으니까 위에 양식을 일부 사용해서 분류를 하자. 그렇게 되면 현재 Spacemacs 와 내 구성의 차이와 개선 및 단점을 볼 수 있다. 더불어 다양한 언어를 활용 할 수도 있기 때문에 상황에 맞게 활용 할 수 있다. 각자의 노하우를 합쳐가면 좋지 않겠는가?!\n1 2 3 ;;;; \u0026#39;Additional\u0026#39; Packages (load-file (concat dotspacemacs-directory \u0026#34;additional-packages.el\u0026#34;)) END dotspacemacs/layers # 1 2 3 ;;;; END ) ; defun dotspacemacs/layers Spacemacs Configuration # START dotspacemacs/init # 1 2 3 ;;; Spacemacs Configuration (defun dotspacemacs/init () Start and several functions # Initialization function. This function is called at the very startup of Spacemacs initialization before layers configuration. You should not put any user code in there besides modifying the variable values.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 ;;;; Start and several functions ;; This setq-default sexp is an exhaustive list of all the supported ;; spacemacs settings. (setq-default ;; If non-nil then enable support for the portable dumper. You\u0026#39;ll need to ;; compile Emacs 27 from source following the instructions in file ;; EXPERIMENTAL.org at to root of the git repository. ;; ;; WARNING: pdumper does not work with Native Compilation, so it\u0026#39;s disabled ;; regardless of the following setting when native compilation is in effect. ;; ;; (default nil) dotspacemacs-enable-emacs-pdumper nil ;; Name of executable file pointing to emacs 27+. This executable must be ;; in your PATH. ;; (default \u0026#34;emacs\u0026#34;) dotspacemacs-emacs-pdumper-executable-file \u0026#34;emacs\u0026#34; ;; Name of the Spacemacs dump file. This is the file will be created by the ;; portable dumper in the cache directory under dumps sub-directory. ;; To load it when starting Emacs add the parameter `--dump-file\u0026#39; ;; when invoking Emacs 27.1 executable on the command line, for instance: ;; ./emacs --dump-file=$HOME/.emacs.d/.cache/dumps/spacemacs-27.1.pdmp ;; (default (format \u0026#34;spacemacs-%s.pdmp\u0026#34; emacs-version)) dotspacemacs-emacs-dumper-dump-file (format \u0026#34;spacemacs-%s.pdmp\u0026#34; emacs-version) ;; If non-nil ELPA repositories are contacted via HTTPS whenever it\u0026#39;s ;; possible. Set it to nil if you have no way to use HTTPS in your ;; environment, otherwise it is strongly recommended to let it set to t. ;; This variable has no effect if Emacs is launched with the parameter ;; `--insecure\u0026#39; which forces the value of this variable to nil. ;; (default t) dotspacemacs-elpa-https t ;; Maximum allowed time in seconds to contact an ELPA repository. ;; (default 5) dotspacemacs-elpa-timeout 15 ;; Set `gc-cons-threshold\u0026#39; and `gc-cons-percentage\u0026#39; when startup finishes. ;; This is an advanced option and should not be changed unless you suspect ;; performance issues due to garbage collection operations. ;; (default \u0026#39;(100000000 0.1)) dotspacemacs-gc-cons \u0026#39;(100000000 0.1) ;; dotspacemacs-gc-cons \u0026#39;(256000000 0.1) ;; dotspacemacs-gc-cons \u0026#39;(512000000 0.3) ;; Set `read-process-output-max\u0026#39; when startup finishes. ;; This defines how much data is read from a foreign process. ;; Setting this \u0026gt;= 1 MB should increase performance for lsp servers ;; in emacs 27. ;; (default (* 1024 1024)) dotspacemacs-read-process-output-max (* 1024 1024) ;; If non-nil then Spacelpa repository is the primary source to install ;; a locked version of packages. If nil then Spacemacs will install the ;; latest version of packages from MELPA. Spacelpa is currently in ;; experimental state please use only for testing purposes. ;; (default nil) dotspacemacs-use-spacelpa nil ;; If non-nil then verify the signature for downloaded Spacelpa archives. ;; (default t) dotspacemacs-verify-spacelpa-archives t ;; If non-nil then spacemacs will check for updates at startup ;; when the current branch is not `develop\u0026#39;. Note that checking for ;; new versions works via git commands, thus it calls GitHub services ;; whenever you start Emacs. (default nil) dotspacemacs-check-for-update nil ;; If non-nil, a form that evaluates to a package directory. For example, to ;; use different package directories for different Emacs versions, set this ;; to `emacs-version\u0026#39;. (default \u0026#39;emacs-version) dotspacemacs-elpa-subdirectory \u0026#39;emacs-version ;; One of `vim\u0026#39;, `emacs\u0026#39; or `hybrid\u0026#39;. ;; `hybrid\u0026#39; is like `vim\u0026#39; except that `insert state\u0026#39; is replaced by the ;; `hybrid state\u0026#39; with `emacs\u0026#39; key bindings. The value can also be a list ;; with `:variables\u0026#39; keyword (similar to layers). Check the editing styles ;; section of the documentation for details on available variables. ;; (default \u0026#39;vim) dotspacemacs-editing-style \u0026#39;vim ;; dotspacemacs-editing-style ;; \u0026#39;(vim :variables ;; vim-style-visual-feedback nil ;; vim-style-remap-Y-to-y$ nil ;; vim-style-retain-visual-state-on-shift t ;; vim-style-visual-line-move-text nil ;; vim-style-ex-substitute-global nil) ;; If non-nil show the version string in the Spacemacs buffer. It will ;; appear as (spacemacs version)@(emacs version) ;; (default t) dotspacemacs-startup-buffer-show-version t ;; Specify the startup banner. Default value is `official\u0026#39;, it displays ;; the official spacemacs logo. An integer value is the index of text ;; banner, `random\u0026#39; chooses a random text banner in `core/banners\u0026#39; ;; directory. A string value must be a path to an image format supported ;; by your Emacs build. ;; If the value is nil then no banner is displayed. (default \u0026#39;official) dotspacemacs-startup-banner 100 ; \u0026#39;random ;; dotspacemacs-startup-banner (concat ;; dotspacemacs-directory \u0026#34;splash/spacemacs1.svg\u0026#34;) ;; Scale factor controls the scaling (size) of the startup banner. Default ;; value is `auto\u0026#39; for scaling the logo automatically to fit all buffer ;; contents, to a maximum of the full image height and a minimum of 3 line ;; heights. If set to a number (int or float) it is used as a constant ;; scaling factor for the default logo size. dotspacemacs-startup-banner-scale \u0026#39;auto ;; List of items to show in startup buffer or an association list of ;; the form `(list-type . list-size)`. If nil then it is disabled. ;; Possible values for list-type are: ;; `recents\u0026#39; `recents-by-project\u0026#39; `bookmarks\u0026#39; `projects\u0026#39; `agenda\u0026#39; `todos\u0026#39;. ;; List sizes may be nil, in which case ;; `spacemacs-buffer-startup-lists-length\u0026#39; takes effect. ;; The exceptional case is `recents-by-project\u0026#39;, where list-type must be a ;; pair of numbers, e.g. `(recents-by-project . (7 . 5))\u0026#39;, where the first ;; number is the project limit and the second the limit on the recent files ;; within a project. ;; dotspacemacs-startup-lists \u0026#39;( ;; ;; (projects . 5) ; projectile ;; ;; (agenda . 5) ; slowzy ;; (bookmarks . 5) ;; (recents . 5) ;; ) dotspacemacs-startup-lists nil ;; True if the home buffer should respond to resize events. (default t) dotspacemacs-startup-buffer-responsive t ;; Show numbers before the startup list lines. (default t) dotspacemacs-show-startup-list-numbers t ;; The minimum delay in seconds between number key presses. (default 0.4) dotspacemacs-startup-buffer-multi-digit-delay 0.4 ;; If non-nil, show file icons for entries and headings on Spacemacs home buffer. ;; This has no effect in terminal or if \u0026#34;all-the-icons\u0026#34; package or the font ;; is not installed. (default nil) dotspacemacs-startup-buffer-show-icons nil ;; Default major mode for a new empty buffer. Possible values are mode ;; names such as `text-mode\u0026#39;; and `nil\u0026#39; to use Fundamental mode. dotspacemacs-new-empty-buffer-major-mode \u0026#39;org-mode ;; Default major mode of the scratch buffer (default `text-mode\u0026#39;) dotspacemacs-scratch-mode \u0026#39;emacs-lisp-mode ;; If non-nil, *scratch* buffer will be persistent. Things you write down in ;; *scratch* buffer will be saved and restored automatically. dotspacemacs-scratch-buffer-persistent t ;; If non-nil, `kill-buffer\u0026#39; on *scratch* buffer ;; will bury it instead of killing. dotspacemacs-scratch-buffer-unkillable t ;; Initial message in the scratch buffer, such as \u0026#34;Welcome to Spacemacs!\u0026#34; dotspacemacs-initial-scratch-message \u0026#34;;; Welcome to Junghanacs!\u0026#34; Configuration # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 ;;;; Configuration dotspacemacs-themes (let ((hr (nth 2 (decode-time)))) (if (or (\u0026lt; hr 7) (\u0026lt; 20 hr)) ; between 8 PM and 7 AM \u0026#39;(spacemacs-dark spacemacs-light) ; load dark theme first \u0026#39;(spacemacs-light spacemacs-dark))) ;; dotspacemacs-themes \u0026#39;(modus-operandi modus-vivendi) dotspacemacs-mode-line-theme \u0026#39;(spacemacs :separator nil :separator-scale 1.5) ;; Default font or prioritized list of fonts. The `:size\u0026#39; can be specified as ;; a non-negative integer (pixel size), or a floating-point (point size). ;; Point size is recommended, because it\u0026#39;s device independent. (default 10.0) dotspacemacs-default-font \u0026#39;(\u0026#34;Sarasa Term K Nerd Font\u0026#34; :size 13.5 ; 13.5, 15.0 :width normal :weight regular) ;; If non-nil the cursor color matches the state color in GUI Emacs. dotspacemacs-colorize-cursor-according-to-state t dotspacemacs-leader-key \u0026#34;SPC\u0026#34; ;; The key used for Emacs commands `M-x\u0026#39; (after pressing on the leader key). dotspacemacs-emacs-command-key \u0026#34;SPC\u0026#34; ;; The key used for Vim Ex commands (default \u0026#34;:\u0026#34;) dotspacemacs-ex-command-key \u0026#34;:\u0026#34; ;; The leader key accessible in `emacs state\u0026#39; and `insert state\u0026#39; ;; (default \u0026#34;M-m\u0026#34;) dotspacemacs-emacs-leader-key \u0026#34;M-m\u0026#34; ;; Major mode leader key is a shortcut key which is the equivalent of ;; pressing `\u0026lt;leader\u0026gt; m`. Set it to `nil` to disable it. (default \u0026#34;,\u0026#34;) dotspacemacs-major-mode-leader-key \u0026#34;,\u0026#34; ;; Major mode leader key accessible in `emacs state\u0026#39; and `insert state\u0026#39;. ;; (default \u0026#34;C-M-m\u0026#34; for terminal mode, \u0026#34;\u0026lt;M-return\u0026gt;\u0026#34; for GUI mode). ;; Thus M-RET should work as leader key in both GUI and terminal modes. ;; C-M-m also should work in terminal mode, but not in GUI mode. dotspacemacs-major-mode-emacs-leader-key (if window-system \u0026#34;\u0026lt;M-return\u0026gt;\u0026#34; \u0026#34;C-M-m\u0026#34;) ;; These variables control whether separate commands are bound in the GUI to ;; the key pairs `C-i\u0026#39;, `TAB\u0026#39; and `C-m\u0026#39;, `RET\u0026#39;. ;; Setting it to a non-nil value, allows for separate commands under `C-i\u0026#39; ;; and TAB or `C-m\u0026#39; and `RET\u0026#39;. ;; In the terminal, these pairs are generally indistinguishable, so this only ;; works in the GUI. (default nil) dotspacemacs-distinguish-gui-tab nil ; t if evil-better-jumper layer ;; Name of the default layout (default \u0026#34;Default\u0026#34;) dotspacemacs-default-layout-name \u0026#34;Default\u0026#34; ;; If non-nil the default layout name is displayed in the mode-line. ;; (default nil) dotspacemacs-display-default-layout t ;; If non-nil then the last auto saved layouts are resumed automatically upon ;; start. (default nil) dotspacemacs-auto-resume-layouts nil ;; If non-nil, auto-generate layout name when creating new layouts. Only has ;; effect when using the \u0026#34;jump to layout by number\u0026#34; commands. (default nil) dotspacemacs-auto-generate-layout-names nil ;; Size (in MB) above which spacemacs will prompt to open the large file ;; literally to avoid performance issues. Opening a file literally means that ;; no major mode or minor modes are active. (default is 1) dotspacemacs-large-file-size 5 ;; Location where to auto-save files. Possible values are `original\u0026#39; to ;; auto-save the file in-place, `cache\u0026#39; to auto-save the file to another ;; file stored in the cache directory and `nil\u0026#39; to disable auto-saving. ;; (default \u0026#39;cache) dotspacemacs-auto-save-file-location \u0026#39;cache ;; Maximum number of rollback slots to keep in the cache. (default 5) dotspacemacs-max-rollback-slots 5 ;; If non-nil, the paste transient-state is enabled. While enabled, after you ;; paste something, pressing `C-j\u0026#39; and `C-k\u0026#39; several times cycles through the ;; elements in the `kill-ring\u0026#39;. (default nil) dotspacemacs-enable-paste-transient-state t ;; Which-key delay in seconds. The which-key buffer is the popup listing ;; the commands bound to the current keystroke sequence. (default 0.4) dotspacemacs-which-key-delay 0.4 ;; Which-key frame position. Possible values are `right\u0026#39;, `bottom\u0026#39; and ;; `right-then-bottom\u0026#39;. right-then-bottom tries to display the frame to the ;; right; if there is insufficient space it displays it at the bottom. ;; (default \u0026#39;bottom) dotspacemacs-which-key-position \u0026#39;bottom ;; Control where `switch-to-buffer\u0026#39; displays the buffer. If nil, ;; `switch-to-buffer\u0026#39; displays the buffer in the current window even if ;; another same-purpose window is available. If non-nil, `switch-to-buffer\u0026#39; ;; displays the buffer in a same-purpose window even if the buffer can be ;; displayed in the current window. (default nil) dotspacemacs-switch-to-buffer-prefers-purpose t ;; If non-nil a progress bar is displayed when spacemacs is loading. This ;; may increase the boot time on some systems and emacs builds, set it to ;; nil to boost the loading time. (default t) dotspacemacs-loading-progress-bar t ;; If non-nil the frame is fullscreen when Emacs starts up. (default nil) dotspacemacs-fullscreen-at-startup nil ;; If non-nil `spacemacs/toggle-fullscreen\u0026#39; will not use native fullscreen. ;; Use to disable fullscreen animations in OSX. (default nil) dotspacemacs-fullscreen-use-non-native nil ;; If non-nil the frame is maximized when Emacs starts up. ;; Takes effect only if `dotspacemacs-fullscreen-at-startup\u0026#39; is nil. dotspacemacs-maximized-at-startup nil ;; If non-nil the frame is undecorated when Emacs starts up. Combine this ;; variable with `dotspacemacs-maximized-at-startup\u0026#39; in OSX to obtain ;; borderless fullscreen. (default nil) dotspacemacs-undecorated-at-startup nil ;; A value from the range (0..100), in increasing opacity, which describes ;; the transparency level of a frame when it\u0026#39;s active or selected. ;; Transparency can be toggled through `toggle-transparency\u0026#39;. (default 90) dotspacemacs-active-transparency 90 ;; A value from the range (0..100), in increasing opacity, which describes ;; the transparency level of a frame when it\u0026#39;s inactive or deselected. ;; Transparency can be toggled through `toggle-transparency\u0026#39;. (default 90) dotspacemacs-inactive-transparency 90 ;; If non-nil show the titles of transient states. (default t) dotspacemacs-show-transient-state-title t ;; If non-nil show the color guide hint for transient state keys. (default t) dotspacemacs-show-transient-state-color-guide t ;; If non-nil unicode symbols are displayed in the mode line. ;; If you use Emacs as a daemon and wants unicode characters only in GUI set ;; the value to quoted `display-graphic-p\u0026#39;. (default t) dotspacemacs-mode-line-unicode-symbols nil ;; If non-nil smooth scrolling (native-scrolling) is enabled. Smooth ;; scrolling overrides the default behavior of Emacs which recenters point ;; when it reaches the top or bottom of the screen. (default t) dotspacemacs-smooth-scrolling t ;; Show the scroll bar while scrolling. The auto hide time can be configured ;; by setting this variable to a number. (default t) dotspacemacs-scroll-bar-while-scrolling nil ;; Control line numbers activation. ;; If set to `t\u0026#39;, `relative\u0026#39; or `visual\u0026#39; then line numbers are enabled in all ;; `prog-mode\u0026#39; and `text-mode\u0026#39; derivatives. If set to `relative\u0026#39;, line ;; numbers are relative. If set to `visual\u0026#39;, line numbers are also relative, ;; but only visual lines are counted. For example, folded lines will not be ;; counted and wrapped lines are counted as multiple lines. ;; This variable can also be set to a property list for finer control: ;; When used in a plist, `visual\u0026#39; takes precedence over `relative\u0026#39;. ;; dotspacemacs-line-numbers \u0026#39;(:relative t ;; ;; :visual t ;; :disabled-for-modes dired-mode ;; ;; text-mode ; for performance issue ;; doc-view-mode ;; pdf-view-mode ;; :size-limit-kb 1000) dotspacemacs-line-numbers t ;; Code folding method. Possible values are `evil\u0026#39;, `origami\u0026#39; and `vimish\u0026#39;. ;; (default \u0026#39;evil) dotspacemacs-folding-method \u0026#39;evil ;; If non-nil and `dotspacemacs-activate-smartparens-mode\u0026#39; is also non-nil, ;; `smartparens-strict-mode\u0026#39; will be enabled in programming modes. ;; (default nil) dotspacemacs-smartparens-strict-mode nil ; use \u0026#39;puni\u0026#39; ;; If non-nil smartparens-mode will be enabled in programming modes. ;; (default t) dotspacemacs-activate-smartparens-mode nil ; use \u0026#39;puni\u0026#39; ;; If non-nil pressing the closing parenthesis `)\u0026#39; key in insert mode passes ;; over any automatically added closing parenthesis, bracket, quote, etc... ;; This can be temporary disabled by pressing `C-q\u0026#39; before `)\u0026#39;. (default nil) dotspacemacs-smart-closing-parenthesis nil ; use \u0026#39;electric-pair-mode\u0026#39; ;; Select a scope to highlight delimiters. Possible values are `any\u0026#39;, ;; `current\u0026#39;, `all\u0026#39; or `nil\u0026#39;. Default is `all\u0026#39; (highlight any scope and ;; emphasis the current one). (default \u0026#39;all) dotspacemacs-highlight-delimiters \u0026#39;all ;; If non-nil, start an Emacs server if one is not already running. ;; (default nil) dotspacemacs-enable-server t ;; Set the emacs server socket location. ;; If nil, uses whatever the Emacs default is, otherwise a directory path ;; like \\\u0026#34;~/.emacs.d/server\\\u0026#34;. It has no effect if ;; `dotspacemacs-enable-server\u0026#39; is nil. ;; (default nil) dotspacemacs-server-socket-dir \u0026#34;~/.cache/\u0026#34; ;; If non-nil, advise quit functions to keep server open when quitting. ;; (default nil) dotspacemacs-persistent-server nil ;; List of search tool executable names. Spacemacs uses the first installed ;; tool of the list. Supported tools are `rg\u0026#39;, `ag\u0026#39;, `pt\u0026#39;, `ack\u0026#39; and `grep\u0026#39;. ;; (default \u0026#39;(\u0026#34;rg\u0026#34; \u0026#34;ag\u0026#34; \u0026#34;pt\u0026#34; \u0026#34;ack\u0026#34; \u0026#34;grep\u0026#34;)) dotspacemacs-search-tools \u0026#39;(\u0026#34;rg\u0026#34; \u0026#34;ag\u0026#34; \u0026#34;pt\u0026#34; \u0026#34;ack\u0026#34; \u0026#34;grep\u0026#34;) ;; Format specification for setting the frame title. ;; %a - the `abbreviated-file-name\u0026#39;, or `buffer-name\u0026#39; ;; %t - `projectile-project-name\u0026#39; ;; %I - `invocation-name\u0026#39; ;; %S - `system-name\u0026#39; ;; %U - contents of $USER ;; %b - buffer name ;; %f - visited file name ;; %F - frame name ;; %s - process status ;; %p - percent of buffer above top of window, or Top, Bot or All ;; %P - percent of buffer above bottom of window, perhaps plus Top, or Bot or All ;; %m - mode name ;; %n - Narrow if appropriate ;; %z - mnemonics of buffer, terminal, and keyboard coding systems ;; %Z - like %z, but including the end-of-line format ;; If nil then Spacemacs uses default `frame-title-format\u0026#39; to avoid ;; performance issues, instead of calculating the frame title by ;; `spacemacs/title-prepare\u0026#39; all the time. ;; (default \u0026#34;%I@%S\u0026#34;) ;; dotspacemacs-frame-title-format \u0026#34;%f\u0026#34; dotspacemacs-frame-title-format nil ;; Format specification for setting the icon title format ;; (default nil - same as frame-title-format) dotspacemacs-icon-title-format nil ;; Color highlight trailing whitespace in all prog-mode and text-mode derived ;; modes such as c++-mode, python-mode, emacs-lisp, html-mode, rst-mode etc. ;; (default t) dotspacemacs-show-trailing-whitespace t ;; Delete whitespace while saving buffer. Possible values are `all\u0026#39; ;; to aggressively delete empty line and long sequences of whitespace, ;; `trailing\u0026#39; to delete only the whitespace at end of lines, `changed\u0026#39; to ;; delete only whitespace for changed lines or `nil\u0026#39; to disable cleanup. ;; (default nil) ;; dotspacemacs-whitespace-cleanup \u0026#39;trailing dotspacemacs-whitespace-cleanup \u0026#39;all ;; If non-nil activate `clean-aindent-mode\u0026#39; which tries to correct ;; virtual indentation of simple modes. This can interfere with mode specific ;; indent handling like has been reported for `go-mode\u0026#39;. ;; If it does deactivate it here. ;; (default t) dotspacemacs-use-clean-aindent-mode t ;; Accept SPC as y for prompts if non-nil. (default nil) dotspacemacs-use-SPC-as-y nil ;; If non-nil shift your number row to match the entered keyboard layout ;; (only in insert state). Currently supported keyboard layouts are: ;; `qwerty-us\u0026#39;, `qwertz-de\u0026#39; and `querty-ca-fr\u0026#39;. ;; New layouts can be added in `spacemacs-editing\u0026#39; layer. ;; (default nil) dotspacemacs-swap-number-row nil ;; Either nil or a number of seconds. If non-nil zone out after the specified ;; number of seconds. (default nil) dotspacemacs-zone-out-when-idle nil ;; Run `spacemacs/prettify-org-buffer\u0026#39; when ;; visiting README.org files of Spacemacs. ;; (default nil) dotspacemacs-pretty-docs nil ;; If nil the home buffer shows the full path of agenda items ;; and todos. If non-nil only the file name is shown. dotspacemacs-home-shorten-agenda-source t ;; If non-nil then byte-compile some of Spacemacs files. dotspacemacs-byte-compile nil ) ; end-of setq-default Additional configuration # 정말 필요하면 user-init 에 넣어라. 일단 베이스만 남겨둔다.\n1 2 3 4 5 6 7 ;;;; Additional configuration (when (\u0026lt; emacs-major-version 29) ; emacs 28 (setq-default dotspacemacs-enable-server nil)) ;;;; END ) ;; end-of init User Init # START user/init # 1 2 3 ;;; User Initialization (defun dotspacemacs/user-init () User Initialization # Initialization function for user code. It is called immediately after `dotspacemacs/init\u0026rsquo;, before layer configuration executes. This function is mostly useful for variables that need to be set before packages are loaded. If you are unsure, you should try in setting them in `dotspacemacs/user-config\u0026rsquo; first.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 ;;;; User Initilization ;; emacsclient -s ~/.cache/spacemacs-server -n ;; (setq server-name \u0026#34;spacemacs-server\u0026#34;) ; default \u0026#34;server\u0026#34; (setq server-name (concat \u0026#34;spacemacs-server-\u0026#34; emacs-major-version-string)) ;;;;; unset keys before layers are loaded (global-unset-key (kbd \u0026#34;M-c\u0026#34;)) ; unset capitalize-word (global-unset-key (kbd \u0026#34;\u0026lt;f2\u0026gt;\u0026#34;)) (global-unset-key (kbd \u0026#34;\u0026lt;f3\u0026gt;\u0026#34;)) (global-unset-key (kbd \u0026#34;\u0026lt;f7\u0026gt;\u0026#34;)) ;; 불필요한 Package cl is deprecated 경고 숨기기 ;; (setq byte-compile-warnings \u0026#39;(not cl-functions)) (when (\u0026gt; emacs-major-version 28) ; Emacs-29 use builtin pkgs (setq org-roam-database-connector \u0026#39;sqlite-builtin) (setq forge-database-connector \u0026#39;sqlite-builtin)) ;;;;; Define stable packages (add-to-list \u0026#39;package-pinned-packages \u0026#39;(clojure-mode . \u0026#34;nongnu\u0026#34;) t) (add-to-list \u0026#39;package-pinned-packages \u0026#39;(cider . \u0026#34;nongnu\u0026#34;) t) (add-to-list \u0026#39;package-pinned-packages \u0026#39;(modus-themes . \u0026#34;gnu\u0026#34;) t) ;;;;; Load \u0026#39;permachine\u0026#39; configuration (defvar blog-admin-dir \u0026#34;\u0026#34; \u0026#34;blog-admin files location\u0026#34;) ;; Most of my per-environment config done via =customize= and is in .custom.el. ;; However, some config is more involved, such as packages I just want in one ;; environment and not the others. To that end, let\u0026#39;s load a file that can contain ;; those customizations. (let ((per-machine-filename \u0026#34;~/.spacemacs.d/permachine.el\u0026#34;)) (when (file-exists-p per-machine-filename) (load-file per-machine-filename))) ;;;;; Emacspeak (OFF) ;; emacspeak 사용. 28 안정화 버전에서만 사용 ;; (if (\u0026lt; emacs-major-version 29) ;; (defvar *run-emacspeak* t)) ;;;;; Theming (setq spacemacs-theme-comment-bg nil spacemacs-theme-org-highlight t) (setq theming-modifications \u0026#39;( (spacemacs-light (org-document-title :inherit variable-pitch) (tab-bar-tab :inherit variable-pitch) (header-line :weight semibold :inherit variable-pitch) (tab-bar :inherit variable-pitch) (org-level-1 :weight bold :inherit variable-pitch) (org-level-2 :weight semibold :inherit variable-pitch) (org-level-3 :weight semibold :inherit variable-pitch) (org-level-4 :inherit variable-pitch) (org-level-5 :inherit variable-pitch) (mode-line :inherit variable-pitch) (mode-line-inactive :inherit variable-pitch) ) (spacemacs-dark (org-document-title :inherit variable-pitch) (tab-bar-tab :inherit variable-pitch) (header-line :inherit variable-pitch) (tab-bar :inherit variable-pitch) (org-level-1 :weight bold :inherit variable-pitch) (org-level-2 :weight semibold :inherit variable-pitch) (org-level-3 :weight semibold :inherit variable-pitch) (org-level-4 :inherit variable-pitch) (org-level-5 :inherit variable-pitch) (mode-line :inherit variable-pitch) (mode-line-inactive :inherit variable-pitch) ) ) ) ;;;;; Load custom-file (setq custom-file \u0026#34;~/.spacemacs.d/emacs-custom.el\u0026#34;) (load custom-file) ;; (setq custom-file (make-temp-file \u0026#34;emacs-custom\u0026#34;)) ;;;;; END ) ;; end-of init User Environment # Environment variables setup. This function defines the environment variables for your Emacs session. By default it calls `spacemacs/load-spacemacs-env\u0026rsquo; which loads the environment variables declared in `~/.spacemacs.env\u0026rsquo; or `~/.spacemacs.d/.spacemacs.env\u0026rsquo;. See the header of this file for more information.\n1 2 3 4 5 ;;; User Environment (defun dotspacemacs/user-env () (spacemacs/load-spacemacs-env) ) TODO Custom Helper # START Custom Helper # 1 ;;; Custom Helper Custom Functions # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ;;;; Custom Functions (defun delete-nth (index seq) \u0026#34;Delete the INDEX th element of SEQ. Return result sequence, SEQ __is__ modified.\u0026#34; (if (equal index 0) (progn (setcar seq (car (cdr seq))) (setcdr seq (cdr (cdr seq)))) (setcdr (nthcdr (1- index) seq) (nthcdr (1+ index) seq)))) (defun set-nth (index seq newval) \u0026#34;Set the INDEX th element of SEQ to NEWVAL. SEQ __is__ modified.\u0026#34; (setcar (nthcdr index seq) newval)) Check External Tools # 1 2 3 4 5 6 7 8 9 10 ;;;; Check External Tools ;; Check exernal tools (defun bool (val) (not (null val))) ;; Some packages do not work correctly on Emacs built with the LUCID feature (defconst AG-P (bool (executable-find \u0026#34;ag\u0026#34;))) (defconst MPD-P (bool (and (executable-find \u0026#34;mpc\u0026#34;) (executable-find \u0026#34;mpd\u0026#34;)))) (defconst MPV-P (bool (executable-find \u0026#34;mpv\u0026#34;))) (defconst REPO-P (bool (executable-find \u0026#34;repo\u0026#34;))) (defconst ZOTERO-P (bool (executable-find \u0026#34;zotero\u0026#34;))) Custom Define emacs-type # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ;;;; Custom Define \u0026#39;emacs-type\u0026#39; (defcustom emacs-type \u0026#39;spacemacs \u0026#34;Select Emacs Distribution Types\u0026#34; :group \u0026#39;emacs :type \u0026#39;(choice (const :tag \u0026#34;spacemacs\u0026#34; spacemacs) (const :tag \u0026#34;minemacs\u0026#34; minemacs) (const :tag \u0026#34;doomemacs\u0026#34; doomemacs) (const :tag \u0026#34;vanillaemacs\u0026#34; vanillaemacs))) (defun is-spacemacs() (eq emacs-type \u0026#39;spacemacs)) (defun is-minemacs() (eq emacs-type \u0026#39;minemacs)) (defun is-doomemacs() (eq emacs-type \u0026#39;doomemacs)) (defun is-vanillaemacs() (eq emacs-type \u0026#39;vanillaemacs)) ;; (when (is-spacemacs) (message \u0026#34;I Love Spacemacs\u0026#34;)) ;; /home/junghan/sync/man/dotsamples/korean/injae-dotfiles/module/+emacs.el (defvar *is-mac* (eq system-type \u0026#39;darwin)) (defvar *is-windows* (eq system-type \u0026#39;windows-nt)) (defvar *is-cygwin* (eq system-type \u0026#39;cygwin)) (defvar *is-linux* (or (eq system-type \u0026#39;gnu/linux) (eq system-type \u0026#39;linux))) (defvar *is-wsl* (eq (string-match \u0026#34;Linux.*microsoft.*WSL2.*Linux\u0026#34; (shell-command-to-string \u0026#34;uname -a\u0026#34;)) 0)) (defvar *is-unix* (or *is-linux* (eq system-type \u0026#39;usg-unix-v) (eq system-type \u0026#39;berkeley-unix))) ;; Sample ;; (use-package ns-auto-titlebar ;; :if *is-mac* System Settings # tramp and slow ssh # /home/junghan/sync/man/dotsamples/vanilla/sqrt-dotfiles/Emacs.org This section is about optioning the Emacs config.\nThe following is true if Emacs is meant to be used with TRAMP over slow ssh. Take a look at the TRAMP section for more details.\n1 2 3 (setq my/slow-ssh (or (string= (getenv \u0026#34;IS_TRAMP\u0026#34;) \u0026#34;true\u0026#34;))) The following is true is Emacs is run on a remote server where I don\u0026rsquo;t need stuff like my org workflow\n1 2 3 4 5 (setq my/remote-server (or (string= (getenv \u0026#34;IS_REMOTE\u0026#34;) \u0026#34;true\u0026#34;) (string= (system-name) \u0026#34;server1\u0026#34;) (string= (system-name) \u0026#34;server2\u0026#34;) (string= (system-name) \u0026#34;server3\u0026#34;))) ; for test And the following is true if Emacs is run from termux on Android.\n1 ;; (setq my/is-termux (string-match-p (rx (* nonl) \u0026#34;com.termux\u0026#34; (* nonl)) (getenv \u0026#34;HOME\u0026#34;))) Also, I sometimes need to know if a program is running inside Emacs (say, inside a terminal emulator). To do that, I set the following environment variable:\n1 (setenv \u0026#34;IS_EMACS\u0026#34; \u0026#34;true\u0026#34;) is-termux # Emacs Configuration - config.daviwil.com\n1 2 3 ;; (require \u0026#39;subr-x) (setq my/is-termux (string-suffix-p \u0026#34;Android\u0026#34; (string-trim (shell-command-to-string \u0026#34;uname -a\u0026#34;)))) Additional-packages # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 ;;; -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*- ;; ;; Copyright (c) 2012-2023 Sylvain Benner \u0026amp; Contributors ;; ;; Author: Junghan Kim \u0026lt;junghanacs@gmail.com\u0026gt; ;; URL: https://github.com/junghanacs ;; ;; This file is not part of GNU Emacs. ;; ;; License: GPLv3 ;;; Commentary: ;;; Code: (setq-default dotspacemacs-additional-packages \u0026#39;( all-the-icons ; compatibility conventional-changelog ;; phi-search ; ? ;; relint ; xr+relint Elisp regexp lint tool major-mode-hydra disk-usage org-reverse-datetree pangu-spacing fixed-page-mode fontaine olivetti logos keyfreq (command-log :location (recipe :fetcher github :repo \u0026#34;positron-solutions/command-log\u0026#34;)) ;; (champagne :location (recipe :fetcher github ;; :repo \u0026#34;positron-solutions/champagne\u0026#34;)) ;; (transient-showcase :location ;; (recipe :fetcher github ;; :repo \u0026#34;positron-solutions/transient-showcase\u0026#34;)) ;; (dendroam :location (recipe :fetcher github :repo \u0026#34;vicrdguez/dendroam\u0026#34;)) ;; (org-auctex :location (recipe :fetcher github \u0026#34;karthink/org-auctex\u0026#34;)) ;; org-ql ;; org-sidebar direnv ;; (cal-korea-x :location (recipe :fetcher github :repo \u0026#34;cinsk/cal-korea-x\u0026#34;)) ;; (typo :location (recipe :fetcher sourcehut :repo \u0026#34;pkal/typo\u0026#34;)) ; TODO CHECK ;; DICTIONARY define-it lexic mw-thesaurus sdcv external-dict define-word ; copy from spacemacs-language )) User Config # Start donotmodify # 스페이스맥스 레이어를 사용하는 경우, 최대한 레이어를 추가할 때 설정한다. 사용자 정의 패키지는 여기서 설정한다. 좋다고 다 추가할 필요가 없다. 내가 수용할 수 있는 범위 내에서 추가한다. Configuration function for user code. This function is called at the very end of Spacemacs initialization after layers configuration. This is the place where most of your configurations should be done. Unless it is explicitly specified that a variable should be set before a package is loaded, you should place your code here.\n1 2 3 ;;; User Configuration (defun dotspacemacs/user-config () Profile USER-INFORMATION # 사용자가 여기만 설정하면 바로 사용할 수 있도록 한다. [2023-02-01 Wed 06:26]\nProfiles # 나의 공개키는 다음 에서 확인 할수 있다. https://meta.sr.ht/~junghanacs.keys, https://meta.sr.ht/~junghanacs.pgp\n1 2 3 4 (setq user-full-name \u0026#34;Junghan Kim\u0026#34; user-mail-address \u0026#34;junghanacs@gmail.com\u0026#34;) ;; Set my GPG key as the default key (setq-default epa-file-encrypt-to \u0026#39;(\u0026#34;B5ADD9F47612A9DB\u0026#34;)) Overide Spacemacs # 여기서 수정을 해야 반영이 될 것이다. 2023-05-02 spacemacs-default 및 관련 기본 패키지들은 대부분 defer 이다. 덮어쓰려면 사용자 설정에 넣어야 한다. 그래서 jh-base 의 설정 부분은 가져온다. 다른 레이어도 덮어 쓰는 부분은 다 확인해야 한다.\nDefault behavior # minemacs 설정을 가져온다. Emacs 28 이후에 추가된 기능이 반영되어 있어서 좋은 레퍼런스가 된다. 스페이스맥스 설정 값 중에 바꾸거나 변경할 것들을 기록한다. 간단한 것들 위주로 기록하고 양도 많고 복잡한 설정은 뒤에 추가한다. 프렉티컬리 설정을 먼저 가져온다. 스페이스맥스 닷파일에서 가져온게 의미 있다.\n/home/junghan/sync/man/dotsamples/vanilla/minemacs/core/me-defaults.el 이 파일에 구성을 따라서 설정하자. 뒤에 설정한 내용들도 앞으로 끌어오자. 왜? Emacs 기본 설정이니까 여기서 잡는 게 맞다. 뒤에는 패키지 별로 설정하게 되는 것이니까. 물론 여기는 기존 Spacemacs 값들을 변경한다. [2023-01-29 Sun 07:56]\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 ;; Line should be 80 characters wide, not 72 from corgi emacs (setq-default ;; ====== Buffer-local variables ====== ;; Display long lines truncate-lines nil ;; Default fill column width fill-column 80 ;; Never mix, use only spaces indent-tabs-mode nil ;; Width for line numbers display-line-numbers-width 4 ;; Small tab is enough! tab-width 2) ;; (setq auto-save-list-file-prefix \u0026#34;~/spacemacs/.cache/auto-save/\u0026#34;) (setq auto-save-interval 1500 auto-save-timeout 180 auto-save-visited-interval 90) (setq ;; default shell ;; sh-shell \u0026#39;bash ;; sh-indentation sh-basic-offset tab-width) (setq ;; ====== Default behavior ====== ;; Inhibit startup message ;; inhibit-startup-message t ;; Do not ring ;; ring-bell-function \u0026#39;ignore ;; Increase the large file threshold to 50 MiB large-file-warning-threshold (* 50 1024 1024) ;; Initial scratch message (will be overridden if \u0026#34;fortune\u0026#34; is installed) ;; initial-scratch-message \u0026#34;;; MinEmacs -- start here!\u0026#34; ;; Set initial buffer to fundamental-mode for faster load ;; initial-major-mode \u0026#39;fundamental-mode ;; Always prompt in minibuffer (no GUI) use-dialog-box nil ;; Use y or n instead of yes or no use-short-answers t ;; Confirm before quitting confirm-kill-emacs \u0026#39;y-or-n-p ;; Filter duplicate entries in kill ring kill-do-not-save-duplicates t ;; Save existing clipboard text into the kill ring before replacing it. save-interprogram-paste-before-kill t ;; Save files only in sub-directories of current project ;; save-some-buffers-default-predicate \u0026#39;save-some-buffers-root ;; Use single space between sentences sentence-end-double-space nil ;; Move stuff to trash delete-by-moving-to-trash t ;; Select help window for faster quit! help-window-select t ;; More info on completions completions-detailed t ;; Do not ask obvious questions, follow symlinks vc-follow-symlinks t ;; Use completing-read interface instead of definitions buffer (needs xref 1.1.0) xref-show-definitions-function #\u0026#39;xref-show-definitions-completing-read ;; Enable recursive calls to minibuffer ;; enable-recursive-minibuffers t ; default t ;; Kill the shell buffer after exit ;; shell-kill-buffer-on-exit t ;; ====== Passwords and encryption ====== ;; Default auth-sources to GPG auth-sources \u0026#39;(\u0026#34;~/.authinfo.gpg\u0026#34;) ;; Enable password caching password-cache t ;; 10 minutes, default is 16 sec password-cache-expiry 600 ;; Enable caching, do not keep asking about GPG key auth-source-do-cache t ;; All day, default is 2h (7200) auth-source-cache-expiry 86400 ;; ====== Performances ====== ;; Don’t compact font caches during GC inhibit-compacting-font-caches t ;; Increase single chunk bytes to read from subprocess (default 4096) read-process-output-max (if (eq system-type \u0026#39;gnu/linux) (condition-case nil ;; Android may raise permission-denied error (with-temp-buffer (insert-file-contents \u0026#34;/proc/sys/fs/pipe-max-size\u0026#34;) (string-to-number (buffer-string))) ;; If an error occured, fallback to the default value (error read-process-output-max)) (* 1024 1024)) ;; ====== Aesthetics and UI ====== ;; Set to non-nil to flash! ;; visible-bell nil ;; TODO 2023-06-19 왜 갑자기 클라이언트 프레임 사이즈가 이상하지?! ;; Do force frame size to be a multiple of char size ;; frame-resize-pixelwise t ;; ;; Emacsclient does not use full frame size (NIL 필수!) ;; frame-inhibit-implied-resize nil ;; Stretch cursor to the glyph width x-stretch-cursor t ;; Show trailing whitespaces show-trailing-whitespace t ;; Resize window combinations proportionally ;; window-combination-resize t ;; Enable time in the mode-line ;; display-time-string-forms \u0026#39;((propertize (concat 24-hours \u0026#34;:\u0026#34; minutes))) ;; No ugly button for widgets widget-image-enable nil ;; Show unprettified symbol under cursor (when in `prettify-symbols-mode\u0026#39;) ;; prettify-symbols-unprettify-at-point t ;; Make tooltips last a bit longer (default 10s) ;; tooltip-hide-delay 20 ;; Use small frames to display tooltips instead of the default OS tooltips use-system-tooltips nil ;; ====== Undo ====== ;; 10MB (default is 160kB) undo-limit 10000000 ;; 50MB (default is 240kB) undo-strong-limit 50000000 ;; 150MB (default is 24MB) undo-outer-limit 150000000 ;; ====== Editing ====== ;; Hitting TAB behavior ;; tab-always-indent nil ;; Default behavior for `whitespace-cleanup\u0026#39; ;; whitespace-action \u0026#39;(cleanup auto-cleanup) ;; End files with newline require-final-newline t ;; Enable Drag-and-Drop of regions mouse-drag-and-drop-region t ;; Enable Drag-and-Drop of regions from Emacs to external programs mouse-drag-and-drop-region-cross-program t ;; ====== Scrolling ====== ;; Do not adjust window-vscroll to view tall lines auto-window-vscroll nil ;; Fast scrolling fast-but-imprecise-scrolling t ;; Keep the point in the same position while scrolling scroll-preserve-screen-position t ;; Do not move cursor to the center when scrolling scroll-conservatively 101 ;; Scroll at a margin of one line scroll-margin 1 ;; Better scrolling on Emacs29+, specially on a touchpad pixel-scroll-precision-use-momentum t ;; 복붙만 한다. ;; ;; ====== Compilation ====== ;; ;; Scroll compilation buffer ;; compilation-scroll-output t ; \u0026#39;first-error can be a good option ;; ;; Always kill current compilation process before starting a new one ;; compilation-always-kill t ;; ;; Skip visited messages on compilation motion commands ;; compilation-skip-visited t ;; ;; Keep it readable ;; compilation-window-height 12 ) ;; Kill minibuffer when switching by mouse to another window ;; Taken from: https://trey-jackson.blogspot.com/2010/04/emacs-tip-36-abort-minibuffer-when.html ;; (add-hook ;; \u0026#39;mouse-leave-buffer-hook ;; (defun +minibuffer--kill-on-mouse-h () ;; \u0026#34;Kill the minibuffer when switching to window with mouse.\u0026#34; ;; (when (and (\u0026gt;= (recursion-depth) 1) (active-minibuffer-window)) ;; (abort-recursive-edit)))) ;; Scroll pixel by pixel, in Emacs29+ there is a more pricise mode way to scroll (if (\u0026gt;= emacs-major-version 29) (pixel-scroll-precision-mode 1) (pixel-scroll-mode 1)) ;; Files with known long lines ;; SPC f l to open files literally to disable most text processing ;; So long mode when Emacs thinks a file would affect performance (global-so-long-mode 1) ;; Easily navigate sillycased words (global-subword-mode 1) ;; Emacs text rendering optimizations ;; https://200ok.ch/posts/2020-09-29_comprehensive_guide_on_handling_long_lines_in_emacs.html ;; Only render text left to right (setq-default bidi-paragraph-direction \u0026#39;left-to-right) ;;;;; org-clock-persist for share with machines ;; (setq org-clock-persist-file \u0026#34;~/sync/org/org-clock-save.el\u0026#34;) (setq org-clock-persist-query-save t) (setq org-clock-persist-query-resume t) ;; 라인 컬럼 보여주는 검은 세로선 (if (display-graphic-p) (global-display-fill-column-indicator-mode)) ;; /spacemacs/core/libs/ido-vertical-mode.el ;; 찾아서 꺼줘야 한다. Spacemacs 에서 자동으로 켜놓았네. (ido-vertical-mode -1) Garbage collection # 고수들마다 약간씩 다른 부분이 있다. GC 메시지 출력, focus 나가면 GC 하자.\n1 2 3 4 5 6 ;; Show a message when garbage collection happens? Useful while tuning the GC (setq garbage-collection-messages t) ;; (add-function :after ;; after-focus-change-function ;; (lambda () (unless (frame-focus-state) ;; (garbage-collect)))) My configurations # kill-ring 클립보드 사이즈를 줄인다. recentf recentf-exclude 설정 문제를 해결한다. 내 마음대로 설정해야 내가 필요한 파일만 남겨 둘 수 있다. 아이템 사이즈도 크게 한다. 스페이스맥스 설정을 수정하여 기본 패스를 사용한다. 10 분에 한번 씩 저장하게 한다. 스맥스는 IDLE 일때 저장하게 되어 있다. history 1000 은 너무 많다. 느려진다. 적절하게 줄이자. auto-revert-interval 주기를 늘린다. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 ;; ====== Recent files ====== ;; Increase the maximum number of saved items ;; Ignore case when searching recentf files ;; (setq recentf-case-fold-search t) ;; Exclude some files from being remembered by recentf ;; (setq recentf-max-saved-items 200) ; default 20 ;; (add-to-list \u0026#39;recentf-exclude \u0026#34;.gz\u0026#34;) ;; (add-to-list \u0026#39;recentf-exclude \u0026#34;.elc\u0026#34;) ;; Show recursion depth in minibuffer (see `enable-recursive-minibuffers\u0026#39;) (minibuffer-depth-indicate-mode 1) ;; default 120 emacs-29, 60 emacs-28 (setq kill-ring-max 60) ; keep it small ;; automatically revert buffers for changed files (setq auto-revert-interval 10) ; default 5 ;; 22/11/26--06:50 :: golden-ratio (setq golden-ratio-max-width 85) ;; 시간 표시 형식은 영어로 표시해서 호환성을 높입니다. (setq system-time-locale \u0026#34;C\u0026#34;) ;; Disable .# lock files (setq create-lockfiles nil) ;; Ridiculous path view is vanilla emacs. change truename! ;; truename 을 원하지 않는다. 심볼링링크대로 쓰고 싶다. nil 로 사용한다. (setq find-file-visit-truename t) ;; Shr group: Simple HTML Renderer를 의미한다. 여기 설정을 바꾸면 faces를 수정할 수 있음 (setq shr-use-fonts nil) ;; buffer size 를 표기 합니다. (setq size-indication-mode t) Frame and Scroll mode # 28.2 에도 설정하는 변수가 있으나 공식적으로 29 부터 지원한다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 ;; Basic modes (scroll-bar-mode -1) ; Disable visible scrollbar (tool-bar-mode -1) ; Disable the toolbar (tooltip-mode -1) ; Disable tooltips (menu-bar-mode -1) ; Disable the menu bar ;; (column-number-mode +1) ;; (global-goto-address-mode +1) ; What is? ;; (global-visual-line-mode +1) ;; (delete-selection-mode +1) ;; (save-place-mode +1) (unless my/is-termux ;; Read \u0026#39;The Forgotten History of the Blinking Cursor\u0026#39; (blink-cursor-mode 1) ;; 2023-04-16 Learn how-to use menu-bar for beginner on GUI mode (when (display-graphic-p) ; gui ;; Give some breathing room (set-fringe-mode 10) ;; Mouse with context-menu (context-menu-mode 1) ;; Menu-bar ;; (menu-bar-mode 1) ;; Set up the visual bell (setq visual-bell t) ) ) ;; Don’t compact font caches during GC. ;; 이 설정 정말 중요하다. 특히 org-superstar 사용 시 필수! (setq inhibit-compacting-font-caches t) ;; from writers-dot-spacemacs ;; (global-visual-line-mode 1) ;; (defun set-image-borderless () ;; (setq left-margin-width 0) ;; (setq right-margin-width 0) ;; (set-fringe-mode 0) ;; (setq global-hl-line-mode nil) ;; (image-transform-fit-to-height)) ;; (add-hook \u0026#39;image-mode-hook #\u0026#39;set-image-borderless) Custom Functions # Popup-tips\nThis function was found at this site. This code is actually fairly simple, so Then we just call popup-tip to display it. This function does not function completely as expect yet as it show th results in a split window.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 (defun my/describe-thing-in-popup () (interactive) (let* ((thing (symbol-at-point)) (help-xref-following t) (description (with-temp-buffer (help-mode) (help-xref-interned thing) (buffer-string)))) (popup-tip description :point (point) :around t :height 30 :scroll-bar t :margin t))) (spacemacs/set-leader-keys \u0026#34;hh\u0026#34; \u0026#39;my/describe-thing-in-popup) OVERIDE :: Keybindings # Redefine global-key # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 (global-set-key (kbd \u0026#34;C-M-i\u0026#34;) \u0026#39;completion-at-point) ;; false input ;; (global-unset-key (kbd \u0026#34;M-ESC ESC\u0026#34;)) ; \u0026#39;keyboard-escape-quit (global-set-key (kbd \u0026#34;M-ESC ESC\u0026#34;) \u0026#39;keyboard-quit) ;; turn off kill emacs binding (global-unset-key (kbd \u0026#34;C-x C-c\u0026#34;)) ; save-buffer-and-kill-emacs ;; Kill this buffer now! (global-set-key (kbd \u0026#34;M-S-q\u0026#34;) \u0026#39;spacemacs/kill-this-buffer) ;; 실수로 누르게 되는 빠른 종료 바인딩을 제거한다. (spacemacs/set-leader-keys \u0026#34;qq\u0026#34; nil) ; prompt-kill-emacs ;; If you use a window manager be careful of possible key binding clashes ;; (global-set-key (kbd \u0026#34;M-\u0026lt;tab\u0026gt;\u0026#34;) \u0026#39;other-window) ; very useful ;; (global-set-key (kbd \u0026#34;M-\u0026lt;iso-lefttab\u0026gt;\u0026#34;) (lambda() (interactive) (other-window -1))) ; == M-S-\u0026lt;tab\u0026gt; ;; Tab-bar with C-\u0026lt;tab\u0026gt; + more key bindings ;; (progn ;; (global-set-key (kbd \u0026#34;s-\\\\\u0026#34;) \u0026#39;tab-bar-switch-to-tab) ;; (global-set-key (kbd \u0026#34;s-[\u0026#34;) \u0026#39;tab-previous) ;; (global-set-key (kbd \u0026#34;s-]\u0026#34;) \u0026#39;tab-next) ;; (global-set-key (kbd \u0026#34;M-\u0026lt;f1\u0026gt;\u0026#34;) \u0026#39;(lambda() (interactive) (tab-bar-select-tab 1))) ;; (global-set-key (kbd \u0026#34;M-\u0026lt;f2\u0026gt;\u0026#34;) \u0026#39;(lambda() (interactive) (tab-bar-select-tab 2))) ;; (global-set-key (kbd \u0026#34;M-\u0026lt;f3\u0026gt;\u0026#34;) \u0026#39;(lambda() (interactive) (tab-bar-select-tab 3))) ;; (global-set-key (kbd \u0026#34;M-\u0026lt;f4\u0026gt;\u0026#34;) \u0026#39;(lambda() (interactive) (tab-bar-select-tab 4))) ;; (global-set-key (kbd \u0026#34;M-\u0026lt;f5\u0026gt;\u0026#34;) \u0026#39;(lambda() (interactive) (tab-bar-select-tab 5))) ;; (global-set-key (kbd \u0026#34;M-\u0026lt;f6\u0026gt;\u0026#34;) \u0026#39;(lambda() (interactive) (tab-bar-select-tab 6))) ;; (global-set-key (kbd \u0026#34;M-\u0026lt;f7\u0026gt;\u0026#34;) \u0026#39;(lambda() (interactive) (tab-bar-select-tab 7))) ;; ) ;; TODO Check! ;; (global-set-key (kbd \u0026#34;C-s-0\u0026#34;) \u0026#39;spacemacs/switch-to-minibuffer-window) ;; (global-set-key (kbd \u0026#34;C-1\u0026#34;) \u0026#39;kill-this-buffer) ;; (global-set-key (kbd \u0026#34;C-\u0026lt;down\u0026gt;\u0026#34;) (kbd \u0026#34;C-u 1 C-v\u0026#34;)) ;; (global-set-key (kbd \u0026#34;C-\u0026lt;up\u0026gt;\u0026#34;) (kbd \u0026#34;C-u 1 M-v\u0026#34;)) ;; (global-set-key (kbd \u0026#34;M-/\u0026#34;) #\u0026#39;hippie-expand) ;; (global-set-key (kbd \u0026#34;C-x C-j\u0026#34;) \u0026#39;dired-jump) ; what is? ;; (global-set-key (kbd \u0026#34;C-c r\u0026#34;) \u0026#39;remember) ; what is? ;; Confession time: vi\u0026#39;s killing up to a char is better than emacs, so let\u0026#39;s change things. ;; default 는 zap-to-char 인데 뭐가 다른가?! ;; (global-set-key (kbd \u0026#34;M-z\u0026#34;) #\u0026#39;zap-up-to-char) My Commands mycustom # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ;; C-c (global-set-key (kbd \u0026#34;C-c j a\u0026#34;) \u0026#39;my/open-abbrev-defs) (global-set-key (kbd \u0026#34;C-c j c\u0026#34;) \u0026#39;my/open-dotspacemacs-org) (global-set-key (kbd \u0026#34;C-c j d\u0026#34;) \u0026#39;my/open-hunspell-personal) (global-set-key (kbd \u0026#34;C-c j D\u0026#34;) \u0026#39;my/open-dict-ko-mydata) (global-set-key (kbd \u0026#34;C-c j t\u0026#34;) \u0026#39;my/open-tempel-templates) (global-set-key (kbd \u0026#34;C-c j e\u0026#34;) \u0026#39;my/open-elfeed-list) (global-set-key (kbd \u0026#34;C-c j q\u0026#34;) \u0026#39;my/open-fortune-quotes) (global-set-key (kbd \u0026#34;C-c j r\u0026#34;) \u0026#39;my/open-dotsamples-readme) (global-set-key (kbd \u0026#34;C-c j C\u0026#34;) \u0026#39;my/open-csaroid-list) ;; (global-set-key (kbd \u0026#34;C-c j i\u0026#34;) \u0026#39;my/open-IAM-org) ;; (global-set-key (kbd \u0026#34;C-c j w\u0026#34;) \u0026#39;my/open-dotworkflow-org) ;; (global-set-key (kbd \u0026#34;C-c j s\u0026#34;) \u0026#39;my/open-capture-inbox) (global-set-key (kbd \u0026#34;C-c j h\u0026#34;) \u0026#39;my/browse-hugo-maybe) ;; 여기에 관리해야 하는 파일 더 넣어야 할 지도 glossary tags url people Consult keybinding # global key\n[2023-05-05 Fri 18:49] global key\n1 2 (global-set-key (kbd \u0026#34;M-s b\u0026#34;) \u0026#39;consult-buffer) (global-set-key (kbd \u0026#34;M-g t\u0026#34;) \u0026#39;consult-minor-mode-menu) spacemacs key\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 ;; (setq-default completion-in-region-function #\u0026#39;consult-completion-in-region) (spacemacs/set-leader-keys \u0026#34;bb\u0026#34; \u0026#39;consult-buffer) ; replace spacemacs\u0026#39;s default (spacemacs/set-leader-keys \u0026#34;ss\u0026#34; nil) (spacemacs/declare-prefix \u0026#34;ss\u0026#34; \u0026#34;Consult-List★\u0026#34;) (spacemacs/declare-prefix \u0026#34;sss\u0026#34; \u0026#34;Search★\u0026#34;) (spacemacs/declare-prefix \u0026#34;ssr\u0026#34; \u0026#34;Register★\u0026#34;) (spacemacs/declare-prefix \u0026#34;ssf\u0026#34; \u0026#34;File/Dir★\u0026#34;) (spacemacs/declare-prefix \u0026#34;ssp\u0026#34; \u0026#34;Project★\u0026#34;) (spacemacs/declare-prefix \u0026#34;ssz\u0026#34; \u0026#34;Help★\u0026#34;) (spacemacs/set-leader-keys \u0026#34;ss.\u0026#34; \u0026#39;consult-man \u0026#34;ss#\u0026#34; #\u0026#39;consult-register ;; \u0026#34;ss/\u0026#34; #\u0026#39;spacemacs/compleseus-search-projectile-auto ;; \u0026#34;ss*\u0026#34; #\u0026#39;spacemacs/compleseus-search-default \u0026#34;ssa\u0026#34; #\u0026#39;consult-org-agenda \u0026#34;ssb\u0026#34; #\u0026#39;spacemacs/compleseus-switch-to-buffer \u0026#34;ssB\u0026#34; #\u0026#39;consult-buffer \u0026#34;ssc\u0026#34; #\u0026#39;consult-flycheck \u0026#34;ssC\u0026#34; #\u0026#39;consult-flymake ;; \u0026#34;ssd\u0026#34; #\u0026#39;consult-dir \u0026#34;ssD\u0026#34; #\u0026#39;consult-dash \u0026#34;sse\u0026#34; #\u0026#39;consult-complex-command ;; \u0026#34;ssf\u0026#34; \u0026#39;✩File/Path✩\u0026#39; ;; \u0026#34;ssff\u0026#34; #\u0026#39;consult-find \u0026#34;ssff\u0026#34; #\u0026#39;spacemacs/compleseus-find-file \u0026#34;ssfr\u0026#34; #\u0026#39;consult-recent-file \u0026#34;ssfl\u0026#34; #\u0026#39;consult-locate \u0026#34;ssg\u0026#34; #\u0026#39;consult-git-grep \u0026#34;ssG\u0026#34; #\u0026#39;consult-git-log-grep \u0026#34;ssh\u0026#34; #\u0026#39;consult-history \u0026#34;ssi\u0026#34; #\u0026#39;consult-imenu \u0026#34;ssI\u0026#34; #\u0026#39;consult-imenu-multi \u0026#34;ssj\u0026#34; #\u0026#39;consult-mark \u0026#34;ssJ\u0026#34; #\u0026#39;consult-global-mark \u0026#34;ssk\u0026#34; #\u0026#39;consult-keep-lines \u0026#34;ssK\u0026#34; #\u0026#39;consult-kmacro \u0026#34;ssl\u0026#34; #\u0026#39;consult-line \u0026#34;ssL\u0026#34; #\u0026#39;spacemacs/consult-line-multi ;; \u0026#34;ssL\u0026#34; #\u0026#39;consult-line-multi \u0026#34;ssm\u0026#34; #\u0026#39;consult-bookmark \u0026#34;ssn\u0026#34; #\u0026#39;spacemacs/consult-jump-in-buffer \u0026#34;sso\u0026#34; #\u0026#39;consult-outline \u0026#34;ssO\u0026#34; #\u0026#39;consult-org-heading ;; \u0026#34;ssp\u0026#34; \u0026#39;✩Project✩\u0026#39; \u0026#34;sspb\u0026#34; #\u0026#39;consult-projectile-switch-to-buffer \u0026#34;sspd\u0026#34; #\u0026#39;consult-projectile-find-dir \u0026#34;sspf\u0026#34; #\u0026#39;consult-projectile-find-file \u0026#34;sspo\u0026#34; #\u0026#39;consult-projectile \u0026#34;sspr\u0026#34; #\u0026#39;consult-projectile-recentf \u0026#34;sspp\u0026#34; #\u0026#39;consult-projectile-switch-project ;; \u0026#34;ssq\u0026#34; ;; \u0026#34;ssr\u0026#34; \u0026#39;✩Register✩\u0026#39; \u0026#34;ssrr\u0026#34; #\u0026#39;consult-register \u0026#34;ssrl\u0026#34; #\u0026#39;consult-register-load \u0026#34;ssrs\u0026#34; #\u0026#39;consult-register-store ;; \u0026#34;sss\u0026#34; \u0026#39;✩Search✩\u0026#39; \u0026#34;ssss\u0026#34; #\u0026#39;consult-ripgrep \u0026#34;sssf\u0026#34; #\u0026#39;spacemacs/compleseus-search-auto \u0026#34;sssd\u0026#34; #\u0026#39;spacemacs/compleseus-search-dir ;; \u0026#34;sssp\u0026#34; #\u0026#39;spacemacs/compleseus-search-projectile \u0026#34;sssg\u0026#34; #\u0026#39;consult-goto-line \u0026#34;sst\u0026#34; #\u0026#39;consult-minor-mode-menu \u0026#34;ssu\u0026#34; #\u0026#39;consult-focus-lines \u0026#34;ssv\u0026#34; #\u0026#39;consult-isearch-history \u0026#34;ssV\u0026#34; #\u0026#39;consult-isearch-forward ;; \u0026#34;ssw\u0026#34; #\u0026#39;consult-eglot-symbols \u0026#34;ssx\u0026#34; #\u0026#39;consult-lsp-symbols \u0026#34;ssX\u0026#34; #\u0026#39;consult-lsp-diagnostics \u0026#34;ssy\u0026#34; #\u0026#39;consult-yank-from-kill-ring \u0026#34;ssY\u0026#34; #\u0026#39;consult-yasnippet ;; \u0026#34;ssz\u0026#34; \u0026#39;✩Help✩\u0026#39; \u0026#34;ssza\u0026#34; #\u0026#39;consult-apropos \u0026#34;sszt\u0026#34; #\u0026#39;consult-theme \u0026#34;sszi\u0026#34; #\u0026#39;consult-info ) Spacemacs root bindings # [2023-05-06 Sat 05:06] /home/junghan/spacemacs/layers/+spacemacs/spacemacs-defaults/keybindings.el\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 (spacemacs/declare-prefix \u0026#34;!\u0026#34; \u0026#34;shell cmd\u0026#34; \u0026#34;\\\u0026#34;\u0026#34; \u0026#34;terminal here\u0026#34; \u0026#34;#\u0026#34; \u0026#34;register\u0026#34; \u0026#34;\u0026#39;\u0026#34; \u0026#34;open shell\u0026#34; \u0026#34;*\u0026#34; \u0026#34;search w/\u0026#34; \u0026#34;/\u0026#34; \u0026#34;search w/o\u0026#34; \u0026#34;0\u0026#34; \u0026#34;treemacs\u0026#34; \u0026#34;;\u0026#34; \u0026#34;latest-popup\u0026#34; \u0026#34;:\u0026#34; \u0026#34;kill-last-popup\u0026#34; \u0026#34;?\u0026#34; \u0026#34;show bindings\u0026#34; \u0026#34;a\u0026#34; \u0026#34;applications\u0026#34; \u0026#34;b\u0026#34; \u0026#34;buffers\u0026#34; \u0026#34;c\u0026#34; \u0026#34;codes\u0026#34; \u0026#34;C\u0026#34; \u0026#34;Capture/Colors\u0026#34; \u0026#34;d\u0026#34; \u0026#34;debug\u0026#34; \u0026#34;D\u0026#34; \u0026#34;Diff/Compare\u0026#34; \u0026#34;e\u0026#34; \u0026#34;errors\u0026#34; \u0026#34;f\u0026#34; \u0026#34;files\u0026#34; \u0026#34;F\u0026#34; \u0026#34;Frames\u0026#34; \u0026#34;g\u0026#34; \u0026#34;git/vc\u0026#34; \u0026#34;h\u0026#34; \u0026#34;help\u0026#34; \u0026#34;i\u0026#34; \u0026#34;insertion\u0026#34; \u0026#34;j\u0026#34; \u0026#34;jump/join\u0026#34; \u0026#34;k\u0026#34; \u0026#34;lisp\u0026#34; \u0026#34;K\u0026#34; \u0026#34;Macros\u0026#34; \u0026#34;l\u0026#34; \u0026#34;layouts\u0026#34; \u0026#34;m\u0026#34; \u0026#34;major-mode\u0026#34; \u0026#34;n\u0026#34; \u0026#34;narrow/numbers\u0026#34; \u0026#34;N\u0026#34; \u0026#34;Navigation\u0026#34; \u0026#34;o\u0026#34; \u0026#34;user bindings\u0026#34; \u0026#34;p\u0026#34; \u0026#34;projects\u0026#34; \u0026#34;P\u0026#34; \u0026#34;Pandoc\u0026#34; \u0026#34;q\u0026#34; \u0026#34;quit\u0026#34; \u0026#34;r\u0026#34; \u0026#34;regs/rings\u0026#34; \u0026#34;s\u0026#34; \u0026#34;search/symbol\u0026#34; \u0026#34;S\u0026#34; \u0026#34;Spelling\u0026#34; \u0026#34;t\u0026#34; \u0026#34;toggles\u0026#34; \u0026#34;T\u0026#34; \u0026#34;Themes/UI\u0026#34; \u0026#34;C-t\u0026#34; \u0026#34;toggles2\u0026#34; \u0026#34;C-v\u0026#34; \u0026#34;rectangles\u0026#34; \u0026#34;u\u0026#34; \u0026#34;universals\u0026#34; \u0026#34;v\u0026#34; \u0026#34;er/expand\u0026#34; \u0026#34;w\u0026#34; \u0026#34;windows\u0026#34; \u0026#34;x\u0026#34; \u0026#34;text\u0026#34; \u0026#34;z\u0026#34; \u0026#34;zoom\u0026#34; \u0026#34;\u0026lt;up\u0026gt;\u0026#34; \u0026#34;window↑\u0026#34; \u0026#34;\u0026lt;down\u0026gt;\u0026#34; \u0026#34;window↓\u0026#34; \u0026#34;\u0026lt;left\u0026gt;\u0026#34; \u0026#34;window←\u0026#34; \u0026#34;\u0026lt;right\u0026gt;\u0026#34; \u0026#34;window→\u0026#34; ) Spacemacs major-mode bindings # 1 2 3 4 5 6 7 8 9 10 11 ;; Org-mode (citar and org-roam) (spacemacs/declare-prefix-for-mode \u0026#39;org-mode \u0026#34;mB\u0026#34; \u0026#34;Bib/citar\u0026#34;) (spacemacs/set-leader-keys-for-major-mode \u0026#39;org-mode \u0026#34;iT\u0026#34; \u0026#39;bh/insert-inactive-timestamp \u0026#34;ic\u0026#34; \u0026#39;citar-insert-citation \u0026#34;Bi\u0026#34; \u0026#39;citar-insert-citation \u0026#34;Bn\u0026#34; \u0026#39;citar-create-note \u0026#34;Bo\u0026#34; \u0026#39;citar-open-note \u0026#34;Ba\u0026#34; \u0026#39;citar-org-roam-ref-add ) ace-link conflicts with evil-collection # [2023-05-21 Sun 11:41] evil-collection 을 추가해서 좋은데 충돌나는게 있기 마련. 수정해주면 된다.\n1 2 3 4 5 6 7 8 9 (evil-define-key \u0026#39;normal Info-mode-map \u0026#34;o\u0026#34; \u0026#39;ace-link-info) ;; 혹시 아래서도 안되면 위와 같이 잡아주라 ;; (with-eval-after-load \u0026#39;help-mode ;; (define-key help-mode-map \u0026#34;o\u0026#34; \u0026#39;ace-link-help)) ;; (with-eval-after-load \u0026#39;woman ;; (define-key woman-mode-map \u0026#34;o\u0026#34; \u0026#39;link-hint-open-link)) ;; (with-eval-after-load \u0026#39;eww ;; (define-key eww-link-keymap \u0026#34;o\u0026#34; \u0026#39;ace-link-eww) ;; (define-key eww-mode-map \u0026#34;o\u0026#34; \u0026#39;ace-link-eww))))) evil tunning # [2023-05-21 Sun 13:04] When I want to make a substitution, I want it to be global more often than not \u0026mdash; so let\u0026rsquo;s make that the default.\nNow, EVIL cares a fair bit about keeping compatibility with Vim\u0026rsquo;s default behaviour. I don\u0026rsquo;t. There are some particular settings that I\u0026rsquo;d rather be something else, so let\u0026rsquo;s change them.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 (setq evil-move-cursor-back nil) ; Don\u0026#39;t move the block cursor when toggling insert mode (setq evil-kill-on-visual-paste nil) ; Don\u0026#39;t put overwritten text in the kill ring ;; https://emacs.stackexchange.com/questions/39434/evil-dont-yank-with-only-whitespace-to-register/53536#53536 (with-eval-after-load \u0026#39;evil-org (define-key evil-normal-state-map \u0026#34;x\u0026#34; \u0026#39;delete-forward-char) (define-key evil-normal-state-map \u0026#34;X\u0026#34; \u0026#39;delete-backward-char) (evil-define-key \u0026#39;normal \u0026#39;evil-org-mode \u0026#34;x\u0026#34; \u0026#39;delete-forward-char) (evil-define-key \u0026#39;normal \u0026#39;evil-org-mode \u0026#34;X\u0026#34; \u0026#39;delete-backward-char) ) ;; (with-eval-after-load \u0026#39;evil-maps ;; (evil-global-set-key \u0026#39;normal \u0026#34;C-=\u0026#34; \u0026#39;er/expand-region) ;; ) winner undo/redo # [2023-05-28 Sun 20:38] winner-mode allows you to navigate through window configurations.\n1 2 3 4 5 6 ;; C-c \u0026lt;left\u0026gt; winner-undo ;; C-c \u0026lt;right\u0026gt; winner-redo ;; (define-key winner-mode-map (kbd \u0026#34;M-[\u0026#34;) #\u0026#39;winner-undo) ;; (define-key winner-mode-map (kbd \u0026#34;M-]\u0026#34;) #\u0026#39;winner-redo) (define-key winner-mode-map (kbd \u0026#34;s-[\u0026#34;) #\u0026#39;winner-undo) (define-key winner-mode-map (kbd \u0026#34;s-]\u0026#34;) #\u0026#39;winner-redo) projectile C-x p # 먼저 project built-in 에 의존성이 있는 패키지들을 제거한다. 예를 들어 multi-vterm, consult-dir 등이다. 그래야 프로젝타일로 키바인딩이 매끄럽게 적용이 된다.\n1 2 (define-key projectile-mode-map (kbd \u0026#34;C-x p\u0026#34;) \u0026#39;projectile-command-map) ;; (setq projectile-project-search-path \u0026#39;(\u0026#34;~/workspace/\u0026#34; \u0026#34;~/workspace/github\u0026#34; (\u0026#34;~/Exercism/emacs-lisp/\u0026#34; . 1))) def-custom Spacemacs key bindings # [2023-04-23 Sun 04:41] phundrak-dotfiles/org/config/Deprecated/spacemacs.org\nAs you will see, I defined a LOT of custom keybindings. All of them are Spacemacs keybindings, defined in a way they can be used seamlessly with Evil. They almost all begin with o, which is a prefix reserved for user-defined keybindings so they won’t conflict with any package. Let’s declare it like so.\nHowever this one I use often, generally in org or text buffers.\n1 2 3 4 5 (spacemacs/set-leader-keys \u0026#34;o9\u0026#34; \u0026#39;sort-lines) ;; (spacemacs/set-leader-keys \u0026#34;ow\u0026#34; \u0026#39;eww) ;; Revert buffer - loads in .dir-locals.el changes (spacemacs/set-leader-keys \u0026#34;oR\u0026#34; \u0026#39;revert-buffer) TODO 옮길 것 KEY BINDING\n1 2 3 (spacemacs/set-leader-keys \u0026#34;oo\u0026#34; \u0026#39;outline-minor-mode) (spacemacs/set-leader-keys \u0026#34;o1\u0026#34; \u0026#39;fontaine-set-preset) (spacemacs/set-leader-keys \u0026#34;o2\u0026#34; \u0026#39;fontaine-set-face-font) TODO Spacemacs custom bindings # 스페이스맥스에서 제거한 부분을 대체하는 빌트인 패키지 키 바인딩을 담는다. 메타 키를 몰라도 Spacemacs 키로 다 할 수 있어야 한다.\n1 2 3 4 5 6 7 8 9 10 (spacemacs/set-leader-keys \u0026#34;pm\u0026#34; \u0026#39;magit-project-status ) (spacemacs/set-leader-keys \u0026#34;tS\u0026#34; #\u0026#39;text-scale-mode) (spacemacs/declare-prefix \u0026#34;aoB\u0026#34; \u0026#34;Bib/citar\u0026#34;) (spacemacs/set-leader-keys \u0026#34;aoBn\u0026#34; \u0026#39;citar-create-note \u0026#34;aoBo\u0026#34; \u0026#39;citar-open-note) HYDRA # Hydra for Major-mode # [2023-03-10 Fri 10:31] Hydra is useful for doing lots of things in succession.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 (require \u0026#39;major-mode-hydra) (require \u0026#39;all-the-icons) ;; Before hydra because we use pretty-hydra-define in the hydra confg. (setq major-mode-hydra-invisible-quit-key \u0026#34;q\u0026#34;) (setq major-mode-hydra-title-generator \u0026#39;(lambda (mode) (s-concat \u0026#34;\\n\u0026#34; (s-repeat 10 \u0026#34; \u0026#34;) (all-the-icons-icon-for-mode mode :v-adjust 0.05) \u0026#34; \u0026#34; (symbol-name mode) \u0026#34; commands\u0026#34;))) ;; Mode maps (major-mode-hydra-define org-mode (:title \u0026#34;Org-mode\u0026#34; :color amaranth :separator \u0026#34;=\u0026#34; :quit-key \u0026#34;\u0026lt;escape\u0026gt;\u0026#34;) (\u0026#34;Movement\u0026#34; ((\u0026#34;u\u0026#34; org-up-element \u0026#34;up\u0026#34; :exit nil) (\u0026#34;n\u0026#34; org-next-visible-heading \u0026#34;next visible heading\u0026#34; :exit nil) (\u0026#34;p\u0026#34; org-previous-visible-heading \u0026#34;previous visible heading\u0026#34; :exit nil) (\u0026#34;l\u0026#34; org-next-link \u0026#34;next link\u0026#34; :exit nil) (\u0026#34;L\u0026#34; org-previous-link \u0026#34;previous link\u0026#34; :exit nil) (\u0026#34;b\u0026#34; org-next-block \u0026#34;next block\u0026#34; :exit nil) (\u0026#34;B\u0026#34; org-prev-block \u0026#34;previous block\u0026#34; :exit nil) (\u0026#34;g\u0026#34; org-mark-ring-goto \u0026#34;pop mark\u0026#34; :exit nil)) \u0026#34;Subtrees\u0026#34; ((\u0026#34;k\u0026#34; org-cut-subtree \u0026#34;kill\u0026#34;) (\u0026#34;\u0026gt;\u0026#34; org-demote-subtree \u0026#34;demote\u0026#34; :exit nil) (\u0026#34;\u0026lt;\u0026#34; org-promote-subtree \u0026#34;promote\u0026#34; :exit nil) (\u0026#34;N\u0026#34; org-narrow-to-subtree \u0026#34;narrow\u0026#34;) (\u0026#34;r\u0026#34; org-refile \u0026#34;refile\u0026#34;) (\u0026#34;.\u0026#34; org-tree-to-indirect-buffer \u0026#34;indirect buffer\u0026#34;) (\u0026#34;\u0026#39;\u0026#34; org-id-get-create \u0026#34;create id\u0026#34;)) \u0026#34;Inserting\u0026#34; ((\u0026#34;c\u0026#34; citar-insert-citation \u0026#34;insert citation\u0026#34;) (\u0026#34;e\u0026#34; org-expiry-insert-expiry \u0026#34;insert expiry property\u0026#34;) (\u0026#34;i\u0026#34; org-insert-heading-respect-content \u0026#34;insert heading\u0026#34;) (\u0026#34;y\u0026#34; ash/org-paste-link \u0026#34;yank link\u0026#34; :exit t)) \u0026#34;Opening\u0026#34; ((\u0026#34;o\u0026#34; org-open-at-point \u0026#34;open at point\u0026#34;)) \u0026#34;Clock\u0026#34; ((\u0026#34;P\u0026#34; org-pomodoro \u0026#34;Start pomodoro\u0026#34;) (\u0026#34;Q\u0026#34; ash/org-pomodoro-til-meeting \u0026#34;Start pomodoro til half hour\u0026#34;)) \u0026#34;Roam\u0026#34; ((\u0026#34;-\u0026#34; org-roam-buffer-toggle \u0026#34;Backlinks\u0026#34; :toggle t) (\u0026#34;;\u0026#34; org-roam-node-insert \u0026#34;add link\u0026#34;) (\u0026#34;:\u0026#34; ash/org-roam-node-insert-immediate \u0026#34;add link immediately\u0026#34;) (\u0026#34;#\u0026#34; org-roam-tag-add \u0026#34;add tag\u0026#34;) (\u0026#34;a\u0026#34; org-roam-alias-add \u0026#34;add alias\u0026#34;) (\u0026#34;r\u0026#34; my/org-roam-node-from-cite \u0026#34;add reference note\u0026#34;) (\u0026#34;R\u0026#34; org-roam-ref-add \u0026#34;add ref\u0026#34;)))) (major-mode-hydra-define emacs-lisp-mode (:title \u0026#34;Emacs-Lisp-mode\u0026#34; :color blue :separator \u0026#34;=\u0026#34; :quit-key \u0026#34;\u0026lt;escape\u0026gt;\u0026#34;) (\u0026#34;Eval\u0026#34; ((\u0026#34;b\u0026#34; eval-buffer \u0026#34;eval buffer\u0026#34;) (\u0026#34;;\u0026#34; eval-expression \u0026#34;eval expression\u0026#34;) (\u0026#34;d\u0026#34; eval-defun \u0026#34;eval defun\u0026#34;) (\u0026#34;D\u0026#34; edebug-defun \u0026#34;edebug defun\u0026#34;) (\u0026#34;e\u0026#34; eval-last-sexp \u0026#34;eval last sexp\u0026#34;) (\u0026#34;E\u0026#34; edebug-eval-last-sexp \u0026#34;edebug last sexp\u0026#34;) (\u0026#34;l\u0026#34; ielm \u0026#34;ielm\u0026#34;)) \u0026#34;Test\u0026#34; ((\u0026#34;t\u0026#34; ert \u0026#34;prompt\u0026#34;) (\u0026#34;T\u0026#34; (ert t) \u0026#34;all\u0026#34;) (\u0026#34;F\u0026#34; (ert :failed) \u0026#34;failed\u0026#34;)) \u0026#34;Doc\u0026#34; ((\u0026#34;f\u0026#34; describe-function \u0026#34;function\u0026#34;) (\u0026#34;v\u0026#34; describe-variable \u0026#34;variable\u0026#34;) (\u0026#34;i\u0026#34; info-lookup-symbol \u0026#34;info lookup\u0026#34;))) ) (major-mode-hydra-define clojure-mode (:title \u0026#34;Clojure-mode\u0026#34; :color pink :separator \u0026#34;=\u0026#34; :quit-key \u0026#34;\u0026lt;escape\u0026gt;\u0026#34;) (\u0026#34;Load\u0026#34; ((\u0026#34;k\u0026#34; cider-load-buffer \u0026#34;buffer\u0026#34; :exit nil) (\u0026#34;l\u0026#34; cider-load-file \u0026#34;file\u0026#34; :color red)))) (major-mode-hydra-define eshell-mode (:title \u0026#34;Eshell-mode\u0026#34; :color pink :separator \u0026#34;=\u0026#34; :quit-key \u0026#34;\u0026lt;escape\u0026gt;\u0026#34;) (\u0026#34;Movement\u0026#34; ((\u0026#34;h\u0026#34; consult-history \u0026#34;history\u0026#34; :exit t)))) Hydra All-Body # major-mode-hydra 패키지에 포함되어 있다. 따로 정리한다. [2023-03-10 Fri 10:32]\ndefine everything here (require \u0026#39;pretty-hydra) (require \u0026#39;s) (require \u0026#39;all-the-icons) ;; with-faicon function allows an icon in hydra title. Requires following requires and aliases. To omit don\u0026#39;t include \u0026#39;with-faicon\u0026#39; in appearance-title ;; define an icon function with all-the-icons-faicon ;; to use filecon, etc, define same function with icon set (defun with-faicon (icon str \u0026amp;rest height v-adjust) (s-concat (all-the-icons-faicon icon :v-adjust (or v-adjust 0) :height (or height 1)) \u0026#34; \u0026#34; str)) (defun with-fileicon (icon str \u0026amp;rest height v-adjust) (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1)) \u0026#34; \u0026#34; str)) ;;;;; hydra-jumps (pretty-hydra-define hydra-jumps () (\u0026#34;Jump visually\u0026#34; ((\u0026#34;j\u0026#34; avy-goto-word-1 \u0026#34;to word\u0026#34; :exit t) (\u0026#34;l\u0026#34; avy-goto-line \u0026#34;to line\u0026#34; :exit t) (\u0026#34;c\u0026#34; avy-goto-char \u0026#34;to char\u0026#34; :exit t) (\u0026#34;r\u0026#34; avy-resume \u0026#34;resume\u0026#34; :exit t)) \u0026#34;Jump via minibuffer\u0026#34; ((\u0026#34;i\u0026#34; consult-imenu \u0026#34;imenu\u0026#34; :exit t) (\u0026#34;o\u0026#34; consult-outline \u0026#34;outline\u0026#34; :exit t)) \u0026#34;Jump \u0026amp; go\u0026#34; ((\u0026#34;u\u0026#34; ash/avy-goto-url \u0026#34;open url\u0026#34; :exit t)) \u0026#34;Misc\u0026#34; ((\u0026#34;=\u0026#34; hydra-all/body \u0026#34;back\u0026#34; :exit t)))) ;;;;; hydra-structural (pretty-hydra-define hydra-structural () (\u0026#34;Change\u0026#34; ( (\u0026#34;,\u0026#34; puni-slurp-forward \u0026#34;slurp-forward\u0026#34;) (\u0026#34;.\u0026#34; puni-barf-forward \u0026#34;barf-forward\u0026#34;) (\u0026#34;]\u0026#34; puni-slurp-forward \u0026#34;slurp-backward\u0026#34;) (\u0026#34;[\u0026#34; puni-barf-forward \u0026#34;barf-backward\u0026#34;) (\u0026#34;.\u0026#34; puni-splice \u0026#34;splice\u0026#34;) (\u0026#34;?\u0026#34; puni-convolute \u0026#34;convolute\u0026#34;)) \u0026#34;Movement\u0026#34; ((\u0026#34;a\u0026#34; puni-beginning-of-sexp \u0026#34;beginning of sexp\u0026#34;) (\u0026#34;e\u0026#34; puni-end-of-sexp \u0026#34;end of sexp\u0026#34;) (\u0026#34;)\u0026#34; puni-syntactic-forward-punc \u0026#34;down sexp\u0026#34;) (\u0026#34;(\u0026#34; puni-syntactic-backward-punc \u0026#34;up sexp\u0026#34;)) \u0026#34;Formatting\u0026#34; ((\u0026#34;z\u0026#34; puni-squeeze \u0026#34;squeeze/unwrap\u0026#34;)) \u0026#34;Misc\u0026#34; ((\u0026#34;=\u0026#34; hydra-all/body \u0026#34;back\u0026#34; :exit t)))) ;;;;; hydra-multiple-cursors (pretty-hydra-define hydra-multiple-cursors () (\u0026#34;Mark via region\u0026#34; ((\u0026#34;l\u0026#34; mc/edit-lines \u0026#34;edit lines\u0026#34; :exit t) (\u0026#34;s\u0026#34; mc/mark-all-in-region-regexp \u0026#34;mark all in region re\u0026#34; :exit t)) \u0026#34;Mark\u0026#34; ((\u0026#34;a\u0026#34; mc/mark-all-like-this \u0026#34;mark all\u0026#34; :exit t) (\u0026#34;d\u0026#34; mc/mark-all-dwim \u0026#34;mark dwim\u0026#34; :exit t)) \u0026#34;Mark incrementally\u0026#34; ((\u0026#34;n\u0026#34; mc/mark-next-like-this \u0026#34;mark next like this\u0026#34;) (\u0026#34;N\u0026#34; mc/skip-to-next-like-this \u0026#34;skip to next like this\u0026#34;) (\u0026#34;M-n\u0026#34; mc/unmark-next-like-this \u0026#34;unmark next like this\u0026#34;) (\u0026#34;p\u0026#34; mc/mark-previous-like-this \u0026#34;mark previous like this\u0026#34;) (\u0026#34;P\u0026#34; mc/skip-to-previous-like-this \u0026#34;skip to previous like this\u0026#34;) (\u0026#34;M-p\u0026#34; mc/unmark-previous-like-this \u0026#34;unmark previous like this\u0026#34;) (\u0026#34;L\u0026#34; mc/mark-next-lines \u0026#34;mark next lines\u0026#34;)) \u0026#34;Insert\u0026#34; ((\u0026#34;0\u0026#34; mc/insert-numbers \u0026#34;insert numbers\u0026#34; :exit t) (\u0026#34;A\u0026#34; mc/insert-letters \u0026#34;insert letters\u0026#34; :exit t)) \u0026#34;Misc\u0026#34; ((\u0026#34;=\u0026#34; hydra-all/body \u0026#34;back\u0026#34; :exit t)))) ;;;;; hydra-expand (pretty-hydra-define hydra-expand () (\u0026#34;Expand/Contract\u0026#34; ((\u0026#34;e\u0026#34; er/expand-region \u0026#34;expand\u0026#34;) (\u0026#34;c\u0026#34; er/contract-region \u0026#34;contract\u0026#34;)) \u0026#34;Expand to...\u0026#34; ((\u0026#34;d\u0026#34; er/mark-defun \u0026#34;defun\u0026#34;) (\u0026#34;\\\u0026#34;\u0026#34; er/mark-inside-quotes \u0026#34;quotes\u0026#34;) (\u0026#34;\u0026#39;\u0026#34; er/mark-inside-quotes \u0026#34;quotes\u0026#34;) (\u0026#34;p\u0026#34; er/mark-inside-pairs \u0026#34;pairs\u0026#34;) (\u0026#34;.\u0026#34; er/mark-method-call \u0026#34;call\u0026#34;)) \u0026#34;Misc\u0026#34; ((\u0026#34;=\u0026#34; hydra-all/body \u0026#34;back\u0026#34; :exit t)))) ;;;;; hydra-ekg ;; (pretty-hydra-define hydra-ekg () ;; (\u0026#34;Navigation\u0026#34; ;; ((\u0026#34;t\u0026#34; ekg-show-notes-for-today \u0026#34;today\u0026#34; :exit t) ;; (\u0026#34;g\u0026#34; ekg-show-notes-with-tag \u0026#34;tag\u0026#34; :exit t) ;; (\u0026#34;r\u0026#34; ekg-show-notes-latest-captured \u0026#34;latest\u0026#34; :exit t) ;; (\u0026#34;b\u0026#34; ekg-embedding-show-similar-to-current-buffer \u0026#34;similar to buffer\u0026#34; :exit t) ;; (\u0026#34;s\u0026#34; ekg-embedding-search \u0026#34;search\u0026#34; :exit t)) ;; \u0026#34;Capture\u0026#34; ;; ((\u0026#34;c\u0026#34; ekg-capture) ;; (\u0026#34;u\u0026#34; ash/capture-literature-note)) ;; )) ;;;;; hydra-yas (pretty-hydra-define hydra-yas () (\u0026#34;Snippets\u0026#34; ((\u0026#34;n\u0026#34; yas-new-snippet \u0026#34;new\u0026#34; :exit t) (\u0026#34;r\u0026#34; yas-reload-all \u0026#34;reload\u0026#34; :exit t) (\u0026#34;v\u0026#34; yas-visit-snippet-file \u0026#34;visit\u0026#34; :exit t)) \u0026#34;Movement\u0026#34; ((\u0026#34;f\u0026#34; yas-next-field \u0026#34;forward field\u0026#34; :exit nil) (\u0026#34;b\u0026#34; yas-prev-field \u0026#34;previous field\u0026#34; :exit nil)))) ;;;;; hydra-flycheck (pretty-hydra-define hydra-flycheck () (\u0026#34;Movement\u0026#34; ((\u0026#34;n\u0026#34; flymake-goto-next-error \u0026#34;next error\u0026#34;) (\u0026#34;p\u0026#34; flymake-goto-prev-error \u0026#34;previous error\u0026#34;) (\u0026#34;d\u0026#34; flymake-goto-diagnostic \u0026#34;diagnostic\u0026#34;) (\u0026#34;\u0026lt;\u0026#34; flycheck-previous-error \u0026#34;previous flycheck error\u0026#34;) (\u0026#34;\u0026gt;\u0026#34; flycheck-next-error \u0026#34;next flycheck error\u0026#34;) (\u0026#34;l\u0026#34; flycheck-list-errors \u0026#34;list\u0026#34;) (\u0026#34;.\u0026#34; consult-flymake)) \u0026#34;Display\u0026#34; ((\u0026#34;.\u0026#34; flymake-show-diagnostic \u0026#34;show diagnostic\u0026#34;) (\u0026#34;B\u0026#34; flymake-show-diagnostics-buffer \u0026#34;diagnostics buffers\u0026#34;)) \u0026#34;Misc\u0026#34; ((\u0026#34;=\u0026#34; hydra-all/body \u0026#34;back\u0026#34; :exit t)))) ;;;;; hydra-mail ;; notmuch is too specialized to be set up here, it varies from machine to ;; machine. At some point I should break it down into the general \u0026amp; ;; specialized parts. (defun ash/inbox () (interactive) (notmuch-search \u0026#34;tag:inbox\u0026#34; t)) (pretty-hydra-define hydra-mail () (\u0026#34;Search\u0026#34; ((\u0026#34;s\u0026#34; notmuch-search \u0026#34;search\u0026#34; :exit t) (\u0026#34;h\u0026#34; consult-notmuch \u0026#34;incremental search\u0026#34; :exit t)) \u0026#34;Application\u0026#34; ((\u0026#34;n\u0026#34; notmuch-hello \u0026#34;notmuch\u0026#34; :exit t) (\u0026#34;i\u0026#34; ash/inbox \u0026#34;inbox\u0026#34; :exit t) (\u0026#34;c\u0026#34; notmuch-mua-new-mail \u0026#34;compose\u0026#34; :exit t)) \u0026#34;Misc\u0026#34; ((\u0026#34;=\u0026#34; hydra-all/body \u0026#34;back\u0026#34; :exit t)))) ;;;;; hydra-org-main (pretty-hydra-define hydra-org-main () (\u0026#34;Misc\u0026#34; ((\u0026#34;a\u0026#34; org-agenda \u0026#34;agenda\u0026#34; :exit t) (\u0026#34;c\u0026#34; org-capture \u0026#34;capture\u0026#34; :exit t)) \u0026#34;Links\u0026#34; ((\u0026#34;s\u0026#34; org-store-link \u0026#34;store\u0026#34; :exit t)))) ;;;;; hydra-find (pretty-hydra-define hydra-find () (\u0026#34;In-Buffer\u0026#34; ((\u0026#34;i\u0026#34; consult-imenu \u0026#34;imenu\u0026#34; :exit t) (\u0026#34;m\u0026#34; consult-mark \u0026#34;mark rings\u0026#34; :exit t) (\u0026#34;o\u0026#34; consult-multi-occur \u0026#34;occur\u0026#34; :exit t) (\u0026#34;e\u0026#34; consult-flycheck \u0026#34;errors\u0026#34; :exit t) (\u0026#34;l\u0026#34; consult-goto-line \u0026#34;line\u0026#34; :exit t)) \u0026#34;Other\u0026#34; ((\u0026#34;r\u0026#34; consult-ripgrep \u0026#34;grep\u0026#34; :exit t) (\u0026#34;b\u0026#34; consult-bookmark \u0026#34;bookmark\u0026#34; :exit t) (\u0026#34;R\u0026#34; consult-register \u0026#34;register\u0026#34; :exit t) (\u0026#34;C\u0026#34; consult-complex-command \u0026#34;complex command\u0026#34; :exit t)))) ;;;;; hydra-toggles ;; (defvar hydra-toggles--title (with-faicon \u0026#34;toggle-on\u0026#34; \u0026#34;Toggles\u0026#34;)) ;; (pretty-hydra-define hydra-toggles ;; (:color amaranth :quit-key \u0026#34;\u0026lt;espace\u0026gt;\u0026#34; :title hydra-toggles--title) (pretty-hydra-define hydra-toggles () (\u0026#34;Basic\u0026#34; ((\u0026#34;n\u0026#34; linum-mode \u0026#34;line number\u0026#34; :toggle t) (\u0026#34;w\u0026#34; whitespace-mode \u0026#34;whitespace\u0026#34; :toggle t) (\u0026#34;W\u0026#34; whitespace-cleanup-mode \u0026#34;whitespace cleanup\u0026#34; :toggle t) (\u0026#34;r\u0026#34; rainbow-mode \u0026#34;rainbow\u0026#34; :toggle t) (\u0026#34;L\u0026#34; page-break-lines-mode \u0026#34;page break lines\u0026#34; :toggle t)) \u0026#34;Highlight\u0026#34; ((\u0026#34;s\u0026#34; symbol-overlay-mode \u0026#34;symbol\u0026#34; :toggle t) (\u0026#34;l\u0026#34; hl-line-mode \u0026#34;line\u0026#34; :toggle t) (\u0026#34;x\u0026#34; highlight-sexp-mode \u0026#34;sexp\u0026#34; :toggle t) (\u0026#34;t\u0026#34; hl-todo-mode \u0026#34;todo\u0026#34; :toggle t)) \u0026#34;Coding\u0026#34; ( ;; (\u0026#34;p\u0026#34; smartparens-mode \u0026#34;smartparens\u0026#34; :toggle t) ;; (\u0026#34;P\u0026#34; smartparens-strict-mode \u0026#34;smartparens strict\u0026#34; :toggle t) ;; (\u0026#34;S\u0026#34; show-smartparens-mode \u0026#34;show smartparens\u0026#34; :toggle t) (\u0026#34;f\u0026#34; flycheck-mode \u0026#34;flycheck\u0026#34; :toggle t)) \u0026#34;Emacs\u0026#34; ((\u0026#34;D\u0026#34; toggle-debug-on-error \u0026#34;debug on error\u0026#34; :toggle (default-value \u0026#39;debug-on-error)) (\u0026#34;X\u0026#34; toggle-debug-on-quit \u0026#34;debug on quit\u0026#34; :toggle (default-value \u0026#39;debug-on-quit))))) ;;;;; hydra-all (pretty-hydra-define hydra-all (:quit-key \u0026#34;\u0026lt;escape\u0026gt;\u0026#34; :title \u0026#34;All\u0026#34;) (\u0026#34;Applications\u0026#34; ((\u0026#34;m\u0026#34; hydra-mail/body \u0026#34;mail\u0026#34; :exit t) (\u0026#34;o\u0026#34; hydra-org-main/body \u0026#34;org\u0026#34; :exit t) ;; (\u0026#34;k\u0026#34; hydra-ekg/body \u0026#34;ekg\u0026#34; :exit t) (\u0026#34;S\u0026#34; hydra-straight/body \u0026#34;straight\u0026#34; :exit t) ;; (\u0026#34;!\u0026#34; ash/el-secretario-daily-review \u0026#34;secretary\u0026#34; :exit t) (\u0026#34;g\u0026#34; magit-status \u0026#34;magit\u0026#34; :exit t)) \u0026#34;Editing\u0026#34; ((\u0026#34;c\u0026#34; hydra-multiple-cursors/body \u0026#34;multiple cursors\u0026#34; :exit t) (\u0026#34;s\u0026#34; hydra-structural/body \u0026#34;structural\u0026#34; :exit t) (\u0026#34;e\u0026#34; hydra-expand/body \u0026#34;expand region\u0026#34; :exit t) (\u0026#34;y\u0026#34; hydra-yas/body \u0026#34;snippets\u0026#34; :exit t)) \u0026#34;Movement\u0026#34; ((\u0026#34;j\u0026#34; hydra-jumps/body \u0026#34;jumps\u0026#34; :exit t) (\u0026#34;E\u0026#34; hydra-flycheck/body \u0026#34;errors\u0026#34; :exit t) (\u0026#34;G\u0026#34; deadgrep \u0026#34;grep\u0026#34; :exit t)) \u0026#34;Misc\u0026#34; ((\u0026#34;t\u0026#34; hydra-toggles/body \u0026#34;toggles\u0026#34; :exit t) (\u0026#34;f\u0026#34; hydra-find/body \u0026#34;find\u0026#34; :exit t)))) Hydra Jump to directory and files # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 (defhydra hydra-jump-to-directory (:color amaranth) \u0026#34;Jump to directory\u0026#34; (\u0026#34;b\u0026#34; (find-file \u0026#34;~/git/blog\u0026#34;) \u0026#34;Blog\u0026#34;) (\u0026#34;c\u0026#34; (find-file \u0026#34;~/sync/obsd/cheat\u0026#34;) \u0026#34;Cheat\u0026#34;) (\u0026#34;C\u0026#34; (find-file \u0026#34;~/sync/org/csaoid\u0026#34;) \u0026#34;Csaoid\u0026#34;) (\u0026#34;d\u0026#34; (find-file \u0026#34;~/.spacemacs.d/dot-org\u0026#34;) \u0026#34;Dot-org\u0026#34;) (\u0026#34;D\u0026#34; (find-file \u0026#34;~/sync/man/dotsamples\u0026#34;) \u0026#34;DotSamples\u0026#34;) (\u0026#34;r\u0026#34; (find-file \u0026#34;~/sync/org/roam\u0026#34;) \u0026#34;Org-roam\u0026#34;) (\u0026#34;s\u0026#34; (find-file \u0026#34;~/.spacemacs.d/snippets/\u0026#34;) \u0026#34;Snippets\u0026#34;) (\u0026#34;v\u0026#34; (find-file \u0026#34;~/Videos\u0026#34;) \u0026#34;Videos\u0026#34;) (\u0026#34;p\u0026#34; (find-file \u0026#34;~/Pictures\u0026#34;) \u0026#34;Pictures\u0026#34;) (\u0026#34;q\u0026#34; nil \u0026#34;Quit\u0026#34; :color blue)) ; Add :color blue (defhydra hydra-jump-to-system-file (:color amaranth) \u0026#34;Jump to system file\u0026#34; (\u0026#34;a\u0026#34; (find-file \u0026#34;~/sync/org/workflow/inbox.org\u0026#34;) \u0026#34;inbox.org\u0026#34;) (\u0026#34;b\u0026#34; (find-file \u0026#34;~/.zshrc\u0026#34;) \u0026#34;.zshrc\u0026#34;) (\u0026#34;u\u0026#34; (find-file \u0026#34;~/sync/org/elfeed/elfeed.org\u0026#34;) \u0026#34;elfeed.org\u0026#34;) (\u0026#34;q\u0026#34; nil \u0026#34;Quit\u0026#34; :color blue)) ; Add :color blue (defhydra my-org-hydra (:color amaranth) \u0026#34;Org mode commands\u0026#34; (\u0026#34;a\u0026#34; org-agenda \u0026#34;org-agenda\u0026#34;) (\u0026#34;l\u0026#34; org-agenda-list \u0026#34;org-agenda-list\u0026#34;) (\u0026#34;f\u0026#34; find-agenda-file \u0026#34;find agenda file\u0026#34;) ;; (\u0026#34;w\u0026#34; cfw:open-org-calendar \u0026#34;open-org-calendar\u0026#34;) (\u0026#34;c\u0026#34; calendar \u0026#34;calendar\u0026#34;) (\u0026#34;q\u0026#34; nil \u0026#34;Quit\u0026#34; :color blue)) Hydra keybinding # 1 2 3 4 5 6 7 8 9 (global-set-key (kbd \u0026#34;\u0026lt;f1\u0026gt;\u0026#34;) \u0026#39;hydra-all/body) (global-set-key (kbd \u0026#34;C-c C\u0026#34;) \u0026#39;hydra-all/body) (global-set-key (kbd \u0026#34;\u0026lt;f2\u0026gt;\u0026#34;) \u0026#39;major-mode-hydra) (global-set-key (kbd \u0026#34;M-g 0\u0026#34;) \u0026#39;major-mode-hydra) (global-set-key (kbd \u0026#34;\u0026lt;f3\u0026gt;\u0026#34;) \u0026#39;hydra-jump-to-directory/body) (global-set-key (kbd \u0026#34;M-g 1\u0026#34;) \u0026#39;hydra-jump-to-directory/body) (global-set-key (kbd \u0026#34;M-g 2\u0026#34;) \u0026#39;hydra-jump-to-system-file/body) ;; (global-set-key (kbd \u0026#34;M-g 3\u0026#34;) \u0026#39;my-org-hydra/body) ;; (global-set-key (kbd \u0026#34;M-g j\u0026#34;) \u0026#39;dumb-jump-hydra/body) ; FYI KOREAN HANGUL # pangu-spacing # [2023-05-07 Sun 19:29] 은 는 이 가 \u0026ndash; 조사만 빼면 좋으련만 이러한 접근이 더 깔끔하다고 본다. 오탈자 안나니까.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 ;; (add-to-list \u0026#39;load-path \u0026#34;~/sync/emacs/emacs-pkgs/pangu-spacing/\u0026#34;) ;; /home/junghan/nosync/emacs-pkgs/emacs-29-git/lisp/emacs-lisp/rx.el ;; /home/junghan/spacemacs/layers/+intl/japanese/packages.el (use-package pangu-spacing :init (progn ;; replacing `chinese-two-byte\u0026#39; by `japanese\u0026#39; (setq pangu-spacing-include-regexp ;; we didn\u0026#39;t add korean because korean-hangul-two-byte is not implemented (rx (or (and (or (group-n 3 (any \u0026#34;。，！？；：「」（）、\u0026#34;)) (group-n 1 (or (in \u0026#34;가-힣\u0026#34;) ;; (category korean-hangul-two-byte) (category chinse-two-byte) ;; (category japanese-hiragana-two-byte) ;; (category japanese-katakana-two-byte) ))) (group-n 2 (in \u0026#34;a-zA-Z0-9\u0026#34;))) (and (group-n 1 (in \u0026#34;a-zA-Z0-9\u0026#34;)) (or (group-n 3 (any \u0026#34;。，！？；：「」（）、\u0026#34;)) (group-n 2 (or (in \u0026#34;가-힣\u0026#34;) ;; (category korean-hangul-two-byte) (category chinse-two-byte) ;; (category japanese-hiragana-two-byte) ;; (category japanese-katakana-two-byte) ))))))) (spacemacs|hide-lighter pangu-spacing-mode) ;; Always insert `real\u0026#39; space in text-mode including org-mode. (setq pangu-spacing-real-insert-separtor t) ;; (global-pangu-spacing-mode 1) (add-hook \u0026#39;text-mode-hook \u0026#39;pangu-spacing-mode))) ;; (defun japanese/post-init-org () ;; (defadvice org-html-paragraph (before org-html-paragraph-advice ;; (paragraph contents info) activate) ;; \u0026#34;Join consecutive Japanese lines into a single long line without ;; unwanted space when exporting org-mode to html.\u0026#34; ;; (let* ((origin-contents (ad-get-arg 1)) ;; (fix-regexp \u0026#34;[[:multibyte:]]\u0026#34;) ;; (fixed-contents ;; (replace-regexp-in-string ;; (concat ;; \u0026#34;\\\\(\u0026#34; fix-regexp \u0026#34;\\\\) *\\n *\\\\(\u0026#34; fix-regexp \u0026#34;\\\\)\u0026#34;) \u0026#34;\\\\1\\\\2\u0026#34; origin-contents))) ;; (ad-set-arg 1 fixed-contents)))) word-select # [2023-05-14 Sun 14:04] 단어 선택(?) 무슨 역할인가?\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ;; ============================================================================= ;; my-select-word ;; (based on https://superuser.com/a/901624) ;; ============================================================================= (defun my-get-word-boundary () \u0026#34;Return the boundary of the current word. The return value is of the form: (cons pos1 pos2).\u0026#34; (save-excursion (let (p1 p2) (progn (skip-chars-backward \u0026#34;-가-힣 A-Za-z0-9_.\u0026#34;) ;; here you can choose which symbols to use (setq p1 (point)) (skip-chars-forward \u0026#34;-가-힣 A-Za-z0-9_.\u0026#34;) ;; put the same here (setq p2 (point))) (cons p1 p2)))) (defun my-select-word () \u0026#34;Mark the url under cursor.\u0026#34; (interactive) (let (bds) (setq bds (my-get-word-boundary)) (set-mark (car bds)))) (global-set-key [double-mouse-1] \u0026#39;my-select-word) OFF cal-korea-x OFF # 한글 레이어에서 가져옴. 사용 안함.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 ;; (use-package cal-korea-x ;; :init ;; (setq calendar-week-start-day 1) ; 1 Monday ;; (add-hook \u0026#39;calendar-today-visible-hook \u0026#39;calendar-mark-today) ;; (add-hook \u0026#39;calendar-today-visible-hook \u0026#39;calendar-mark-holidays) ;; :config ;; (progn ;; (setq calendar-holidays cal-korea-x-korean-holidays) ;; (copy-face \u0026#39;default \u0026#39;calendar-sunday-face) ;; (copy-face \u0026#39;default \u0026#39;calendar-saturday-face) ;; (set-face-attribute \u0026#39;calendar-sunday-face nil ;; :foreground \u0026#34;#ff4500\u0026#34;) ;; (set-face-attribute \u0026#39;calendar-saturday-face nil ;; :foreground \u0026#34;#eeee00\u0026#34;) ;; (define-advice calendar-generate-month ;; (:after (month year indent) highlight-weekend-days) ;; \u0026#34;Highlight weekend days\u0026#34; ;; (mapcar ;; (lambda (n) ;; (let ((date (list month (1+ n) year))) ;; (cond ((= (calendar-day-of-week date) 0) ;; (calendar-mark-visible-date date \u0026#39;calendar-sunday-face)) ;; ((= (calendar-day-of-week date) 6) ;; (calendar-mark-visible-date date \u0026#39;calendar-saturday-face))))) ;; (number-sequence 1 31))) ;; (copy-face \u0026#39;default \u0026#39;calendar-iso-week-header-face) ;; (copy-face \u0026#39;calendar-iso-week-header-face \u0026#39;calendar-iso-week-number-face) ;; (set-face-attribute \u0026#39;calendar-iso-week-header-face nil ;; :foreground \u0026#34;black\u0026#34; ;; :height 1.0) ;; (set-face-attribute \u0026#39;calendar-iso-week-number-face nil ;; :foreground \u0026#34;black\u0026#34; ;; :height 1.0) ;; (setq calendar-intermonth-header ;; (propertize \u0026#34;Wk\u0026#34; ; or e.g. \u0026#34;KW\u0026#34; in Germany ;; \u0026#39;font-lock-face \u0026#39;calendar-iso-week-header-face)) ;; (setq calendar-intermonth-text ;; \u0026#39;(propertize ;; (format \u0026#34;%2d\u0026#34; ;; (car ;; (calendar-iso-from-absolute ;; (calendar-absolute-from-gregorian (list month day year))))) ;; \u0026#39;font-lock-face \u0026#39;calendar-iso-week-number-face)) ;; )) Fontaine (font configurations) # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 ;;;; Fontaine (font configurations) ;; Read the manual: \u0026lt;https://protesilaos.com/emacs/fontaine\u0026gt; ;; +------------+------------+ ;; | 일이삼사오 | 일이삼사오 | ;; +------------+------------+ ;; | ABCDEFGHIJ | ABCDEFGHIJ | ;; +------------+------------+ ;; | 1234567890 | 1234567890 | ;; +------------+------------+ ;; | 일이삼사오 | 일이삼사오 | ;; | abcdefghij | abcdefghij | ;; +------------+------------+ ;; terminal-mode is nil ;; A narrow focus package for naming font configurations and then selecting them. ;; (defun jh-visual/init-fontaine () (use-package fontaine :if window-system :demand :init ;; This is defined in Emacs C code: it belongs to font settings. ;; (setq x-underline-at-descent-line nil) ; conflict with centaur-tabs ;; And this is for Emacs28. (setq-default text-scale-remap-header-line t) ;; This is the default value. Just including it here for ;; completeness. ;; (setq fontaine-latest-state-file (concat dotspacemacs-directory \u0026#34;var/fontaine-latest-state.eld\u0026#34;)) ;; | Family | Shapes | Spacing | Style | Ligatures | ;; |------------------------------+--------+---------+------------+-----------| ;; | Sarasa UI K Nerd Font | Sans | Compact | Monospaced | Yes | ;; | Sarasa Term K Nerd Font | Sans | Compact | Monospaced | Yes | ;; | Sarasa Term Slab K Nerd Font | Slab | Compact | Monospaced | Yes | ;; | Pretendard Variable | Sans | | | No | ;; Weights :: Thin ExtraLight Light Regular Medium SemiBold Bold ExtraBold Heavy ;; Slopes :: Upright Oblique Italic ;; Width :: Normal Extended :config (setq fontaine-presets ;; 120, 136, 151, 211 \u0026#39;( (birdview :default-height 80) (small :default-height 120) (regular :default-height 136) (large :default-height 151) (presentation :default-height 180 :line-spacing 5 :fixed-pitch-family \u0026#34;Sarasa Term Slab K Nerd Font\u0026#34; :fixed-pitch-serif-family \u0026#34;Sarasa Term Slab K Nerd Font\u0026#34; :default-width extended :bold-weight extrabold) (presentation-large :inherit presentation :default-height 211) (t ;; Following Prot’s example, keeping these for for didactic purposes. :line-spacing 3 :default-family \u0026#34;Sarasa Term K Nerd Font\u0026#34; :default-weight regular :default-height 136 :fixed-pitch-family nil ; \u0026#34;Sarasa Term Slab K Nerd Font\u0026#34; :fixed-pitch-weight nil :fixed-pitch-height nil ;; :fixed-pitch-serif-family \u0026#34;Sarasa Term Slab K Nerd Font\u0026#34; ; nil falls back to :default-family :fixed-pitch-serif-family nil :fixed-pitch-serif-weight nil :fixed-pitch-serif-height nil :variable-pitch-family \u0026#34;Pretendard Variable\u0026#34; :variable-pitch-weight nil :variable-pitch-height nil :bold-family nil ;; :bold-family \u0026#34;Sarasa Term Slab K Nerd Font\u0026#34; ;; :bold-weight bold ;; :bold-width extended :italic-family nil ;; :italic-family \u0026#34;Sarasa Term Slab K Nerd Font\u0026#34; :italic-slant italic))) ;; Set last preset or fall back to desired style from `fontaine-presets\u0026#39;. ;; (fontaine-set-preset (or (fontaine-restore-latest-preset) \u0026#39;regular)) ;; (fontaine-set-preset \u0026#39;regular) ;; (set-fontset-font t \u0026#39;hangul (font-spec :family (face-attribute \u0026#39;default :family))) ; t or nil ? ;; The other side of `fontaine-restore-latest-preset\u0026#39;. ;; (add-hook \u0026#39;kill-emacs-hook #\u0026#39;fontaine-store-latest-preset) ;; load @ start-up (defun my/fontaine-load-preset () (interactive) (fontaine-set-preset \u0026#39;regular) ;; (fontaine-set-preset (or (fontaine-restore-latest-preset) \u0026#39;regular)) (set-fontset-font t \u0026#39;hangul (font-spec :family (face-attribute \u0026#39;default :family))) ;; load my default theme (modus-themes-toggle) (message \u0026#34;my/fontaine-load-preset\u0026#34;) ) (add-hook \u0026#39;spacemacs-post-user-config-hook #\u0026#39;my/fontaine-load-preset 90) ;; load @ theme change (defun my/fontaine-apply-current-preset () (interactive) (fontaine-apply-current-preset) (set-fontset-font t \u0026#39;hangul (font-spec :family (face-attribute \u0026#39;default :family))) (kind-icon-reset-cache) (message \u0026#34;my/fontaine-apply-current-preset\u0026#34;) ) (add-hook \u0026#39;spacemacs-post-theme-change-hook \u0026#39;my/fontaine-apply-current-preset) ;; (defun my/fontaine-kind-icons-reset-cache () ;; (interactive) ;; (message \u0026#34;my/fontaine-kind-icons-reset-cache\u0026#34;) ;; (kind-icon-reset-cache) ;; ) ;; (add-hook \u0026#39;fontaine-set-preset-hook \u0026#39;my/fontaine-kind-icons-reset-cache) ) ;; ) Presentation with logos # 잘 안된다. 커스텀이 필요할듯 [2023-05-09 Tue 15:38]\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 (use-package olivetti :custom ;; (olivetti-body-width 0.7) ; nil (olivetti-minimum-body-width 100) ; 80 (olivetti-recall-visual-line-mode-entry-state t)) (use-package logos :after olivetti :demand :init ;; If you want to use outlines instead of page breaks (the ^L): (setq logos-outlines-are-pages t) ;; This is the default value for the outlines: (setq logos-outline-regexp-alist `((emacs-lisp-mode . \u0026#34;^;;;+ \u0026#34;) (org-mode . \u0026#34;^\\\\*+ +\u0026#34;) (markdown-mode . \u0026#34;^\\\\#+ +\u0026#34;) (t . ,(if (boundp \u0026#39;outline-regexp) outline-regexp logos--page-delimiter)))) ;; These apply when `logos-focus-mode\u0026#39; is enabled. Their value is ;; buffer-local. (setq-default logos-hide-cursor nil) (setq-default logos-hide-mode-line nil) (setq-default logos-hide-buffer-boundaries t) (setq-default logos-hide-fringe t) (setq-default logos-variable-pitch nil) ; see my `fontaine\u0026#39; configurations (setq-default logos-buffer-read-only nil) (setq-default logos-scroll-lock nil) (setq-default logos-olivetti t) :config ;; I don\u0026#39;t need to do `with-eval-after-load\u0026#39; for the `modus-themes\u0026#39; as ;; I always load them before other relevant potentially packages. (add-hook \u0026#39;modus-themes-after-load-theme-hook #\u0026#39;logos-update-fringe-in-buffers) (let ((map global-map)) (define-key map [remap narrow-to-region] #\u0026#39;logos-narrow-dwim) (define-key map [remap forward-page] #\u0026#39;logos-forward-page-dwim) (define-key map [remap backward-page] #\u0026#39;logos-backward-page-dwim) (define-key map (kbd \u0026#34;\u0026lt;f8\u0026gt;\u0026#34;) #\u0026#39;logos-focus-mode) (define-key map (kbd \u0026#34;M-]\u0026#34;) #\u0026#39;logos-forward-page-dwim) (define-key map (kbd \u0026#34;M-[\u0026#34;) #\u0026#39;logos-backward-page-dwim) ) (defun my/logos-presentation-toggle () (interactive) (if (eq logos-focus-mode t) (my/logos-presentation-off) (my/logos-presentation-on))) (defun my/logos-presentation-on () (interactive) (setq-local org-hide-emphasis-markers t) ;; (call-interactively \u0026#39;logos-narrow-dwim) (olivetti-mode t) (org-overview) ;; (org-show-entry) ;; (org-show-children) (org-hide-properties) (setq-local header-line-format nil) ;; (setq-local face-remapping-alist \u0026#39;( ;; ;;(default (:height 1.5) variable-pitch) ;; ;; (header-line (:height 2.5) variable-pitch) ;; (org-document-title (:height 1.55) org-document-title) ;; (org-level-1 (:height 1.5) variable-pitch) ;; (org-level-2 (:height 1.25) variable-pitch) ;; ;; (org-code (:height 1.55) org-code) ;; ;; (org-verbatim (:height 1.55) org-verbatim) ;; ;; (org-block (:height 1.25) org-block) ;; ;; (org-block-begin-line (:height 0.7) org-block)) ;; ) (spacemacs/toggle-mode-line-off) (spacemacs/toggle-fill-column-indicator-off) (spacemacs/toggle-line-numbers-off) (tab-bar-rename-tab \u0026#34;PRESENTATION\u0026#34; 1) ;; (fontaine-store-latest-preset) ; backup (fontaine-set-preset \u0026#39;presentation) (git-gutter-mode -1) (sideline-mode -1) ) (defun my/logos-presentation-off () (interactive) ;; (call-interactively \u0026#39;widen) (olivetti-mode -1) (org-show-properties) ;; (setq-local org-hide-emphasis-markers nil) (spacemacs/toggle-mode-line-on) (spacemacs/toggle-fill-column-indicator-on) (spacemacs/toggle-line-numbers-on) ;; (display-line-numbers-mode t) ;; (fontaine-restore-latest-preset) ; restore (tab-bar-rename-tab \u0026#34;WORK-SPACE\u0026#34; 1) ;; (setq-local face-remapping-alist \u0026#39;((default variable-pitch default))) (fontaine-set-preset \u0026#39;regular) (git-gutter-mode t) (sideline-mode t) ) ;; place point at the top when changing pages, but not in `prog-mode\u0026#39; (defun prot/logos--recenter-top () \u0026#34;Use `recenter\u0026#39; to reposition the view at the top.\u0026#34; (unless (derived-mode-p \u0026#39;prog-mode) (recenter 1))) ; Use 0 for the absolute top (add-hook \u0026#39;logos-page-motion-hook #\u0026#39;prot/logos--recenter-top) ;; Also consider adding keys to `logos-focus-mode-map\u0026#39;. They will take ;; effect when `logos-focus-mode\u0026#39; is enabled. ;; Make EWW look like the rest of Emacs (setq shr-max-width fill-column) (setq shr-use-fonts nil) ) (spacemacs/set-leader-keys-for-major-mode \u0026#39;org-mode \u0026#34;T1\u0026#34; \u0026#39;my/logos-presentation-on \u0026#34;T2\u0026#34; \u0026#39;my/logos-presentation-off) TODO Migration the layer # [2023-04-04 Tue 18:31] 옮긴 패키지들\nOnly Emacs 29+ # elisp :tangle (if (\u0026gt;= emacs-major-version 28) \u0026ldquo;yes\u0026rdquo; \u0026ldquo;no\u0026rdquo;)\n1 2 3 4 5 6 7 ;; Use built-in packages (if (\u0026gt; emacs-major-version 28) (require \u0026#39;emacsql-sqlite-builtin)) ;; Parentheses (show-paren-mode) (if (\u0026gt; emacs-major-version 28) (setq show-paren-context-when-offscreen \u0026#39;overlay)) ; default nil Useful functions # Emacs doesn\u0026rsquo;t have 64-bit-int processing except via calc.\n1 2 3 4 (defun ash/strdec-to-hex (n) \u0026#34;Given a decimal as a string, convert to hex. This has to be done as a string to handle 64-bit or larger ints.\u0026#34; (concat \u0026#34;0x\u0026#34; (replace-regexp-in-string \u0026#34;16#\u0026#34; \u0026#34;\u0026#34; (calc-eval `(,n calc-number-radix 16))))) Direnv # 1 2 3 (use-package direnv :config (direnv-mode)) Command-log # [2023-05-14 Sun 15:15] /home/junghan/spacemacs/layers/+tools/command-log/packages.el 커맨드로그 레이어를 사용하지 않고 아래 패키지를 넣는다.\n키 바인딩은 맞춰주는게 좋을 것 같다. 그리고 (spacemacs/declare-prefix \u0026ldquo;atK\u0026rdquo; \u0026ldquo;keycast\u0026rdquo;) (spacemacs/set-leader-keys \u0026ldquo;atKm\u0026rdquo; #\u0026lsquo;keycast-mode-line-mode) (spacemacs/set-leader-keys \u0026ldquo;atKh\u0026rdquo; #\u0026lsquo;keycast-header-line-mode) (spacemacs/set-leader-keys \u0026ldquo;atKt\u0026rdquo; #\u0026lsquo;keycast-tab-bar-mode) (spacemacs/declare-prefix \u0026ldquo;atl\u0026rdquo; \u0026ldquo;command log\u0026rdquo;) (spacemacs/set-leader-keys \u0026ldquo;atll\u0026rdquo; #\u0026lsquo;global-command-log-mode))\n제외할 수 있는 함수가 있는가? (setq clm/log-command-exceptions* (append clm/log-command-exceptions* \u0026lsquo;(evil-next-line evil-previous-line evil-forward-char evil-backward-char)) command-log-mode-auto-show t)))\n1 2 3 4 5 6 7 8 9 10 11 (use-package command-log :custom (command-log-window-text-scale 2 \u0026#34;Command log two steps higher text scale\u0026#34;) (command-log-logging-shows-buffer t \u0026#34;Toggling will show the buffer.\u0026#34;) (command-log-hiding-disables-logging t \u0026#34;Toggling visible buffer turns off logging.\u0026#34;) (command-log-disabling-logging-kills-buffer t \u0026#34;The buffer will be new when displayed again.\u0026#34;) (command-log-filter-commands \u0026#39;(self-insert-command) \u0026#34;Be chatty. Show everything besides self-insert-command\u0026#34;) ;; Auto-enable with global minor mode (including minibuffer) (command-log-log-globally nil) ) Keyfreq # 1 2 3 (require \u0026#39;keyfreq) (keyfreq-mode 1) (keyfreq-autosave-mode 1) Screenshot PNG GIF # [2023-06-08 Thu 14:33] 잘된다.\n1 (global-set-key (kbd \u0026#34;\u0026lt;f6\u0026gt;\u0026#34;) \u0026#39;gif-screencast-start-or-stop) OFF min emacs OFF\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 (defcustom +screenshot-delay 5 \u0026#34;A delay to wait before taking the screenshot. Applicable only when calling `+screenshot-svg\u0026#39; with a prefix.\u0026#34; :group \u0026#39;minemacs-utils :type \u0026#39;number) ;; Inspired by: reddit.com/r/emacs/comments/idz35e/comment/g2c2c6y ;;;###autoload (defun +screenshot-svg (outfile) \u0026#34;Save a screenshot of the current frame as an SVG image. Saves to a temp file and puts the filename in the kill ring. If launched with a prefix or universal argument, it waits for a moment (defined by `+screenshot-delay\u0026#39;) before taking the screenshot.\u0026#34; (interactive \u0026#34;FSave to file: \u0026#34;) (let ((outfile (file-name-with-extension outfile \u0026#34;svg\u0026#34;))) (if current-prefix-arg (run-with-timer +screenshot-delay nil (apply-partially #\u0026#39;+screenshot-svg--take-screenshot outfile)) (+screenshot-svg--take-screenshot outfile)))) (defun +screenshot-svg--take-screenshot (\u0026amp;optional outfile) (let* ((tmp-file (make-temp-file \u0026#34;emacs-\u0026#34; nil \u0026#34;.svg\u0026#34;)) (data (x-export-frames nil \u0026#39;svg))) (with-temp-file tmp-file (insert data)) (when (stringp outfile) (copy-file tmp-file outfile)) (message \u0026#34;Screenshot saved to %s\u0026#34; (or outfile tmp-file)))) All the dictionaries # 22/12/31\u0026ndash;16:00 :: 사전도 기능을 정리를 해야한다. 2023-02-26 분류 해서 정리할 것 2023-06-10 다시 설정한다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 (require \u0026#39;lexic) (require \u0026#39;external-dict) ;; extract from spacemacs-language (use-package define-word :defer t :init (spacemacs/set-leader-keys \u0026#34;xwd\u0026#34; \u0026#39;define-word-at-point)) ;; agzam-dot-spacemacs/layers/ag-lang-tools/packages.el:3 ;; sdcv-mode is for browsing Stardict format dictionaries in Emacs ;; to get Webster’s Revised Unabridged Dictionary ;; 1) download it from https://s3.amazonaws.com/jsomers/dictionary.zip ;; 2) unzip it twice and put into ~/.stardict/dic ;; 3) Install sdcv, a command-line utility for accessing StarDict dictionaries (use-package mw-thesaurus :defer t :config (define-key mw-thesaurus-mode-map [remap evil-record-macro] #\u0026#39;mw-thesaurus--quit) ;; (add-hook \u0026#39;mw-thesaurus-mode-hook \u0026#39;variable-pitch-mode) (spacemacs/set-leader-keys \u0026#34;xlm\u0026#34; #\u0026#39;mw-thesaurus-lookup-dwim) (add-to-list \u0026#39;display-buffer-alist `(,mw-thesaurus-buffer-name (display-buffer-reuse-window display-buffer-in-direction) (direction . right) (window . root) (window-width . 0.3)))) (defun ag/region-or-word-at-point-str () \u0026#34;Returns string of selected region or word at point\u0026#34; (let* ((bds (if (use-region-p) (cons (region-beginning) (region-end)) (bounds-of-thing-at-point \u0026#39;word))) (p1 (car bds)) (p2 (cdr bds))) (buffer-substring-no-properties p1 p2))) (use-package sdcv :config (add-hook \u0026#39;sdcv-mode-hook \u0026#39;spacemacs/toggle-visual-line-navigation-on) (defun sdcv-search-at-point () (interactive) (sdcv-search (ag/region-or-word-at-point-str) nil nil t)) (spacemacs/set-leader-keys \u0026#34;xll\u0026#34; #\u0026#39;sdcv-search-at-point) (evil-define-key \u0026#39;normal sdcv-mode-map \u0026#34;q\u0026#34; #\u0026#39;sdcv-return-from-sdcv) (evil-define-key \u0026#39;normal sdcv-mode-map \u0026#34;n\u0026#34; #\u0026#39;sdcv-next-entry) (evil-define-key \u0026#39;normal sdcv-mode-map \u0026#34;p\u0026#34; #\u0026#39;sdcv-previous-entry) (evil-define-key \u0026#39;normal sdcv-mode-map (kbd \u0026#34;RET\u0026#34;) #\u0026#39;sdcv-search-at-point) (evil-define-key \u0026#39;normal sdcv-mode-map \u0026#34;a\u0026#34; #\u0026#39;sdcv-search-at-point) (add-to-list \u0026#39;display-buffer-alist `(,sdcv-buffer-name (display-buffer-reuse-window display-buffer-in-direction) (direction . right) (window . root) (window-width . 0.25)))) (use-package define-it :config (setq define-it-show-google-translate nil define-it-show-header nil) (spacemacs/defer-until-after-user-config ; otherwise, spacemacs-default layer would override the binding (lambda () ; and set it to `duplicate-line-or-region\u0026#39;, and it\u0026#39;s pretty useles for me (spacemacs/set-leader-keys \u0026#34;xld\u0026#34; #\u0026#39;define-it-at-point))) ;; it doesn\u0026#39;t pop to the buffer automatically, when definition is fetched (defun define-it--find-buffer (x) (let ((buf (format define-it--buffer-name-format define-it--current-word))) (pop-to-buffer buf))) (advice-add \u0026#39;define-it--in-buffer :after #\u0026#39;define-it--find-buffer) (add-to-list \u0026#39;display-buffer-alist \u0026#39;(\u0026#34;\\\\*define-it:\u0026#34; (display-buffer-reuse-window display-buffer-in-direction) (direction . right) (window . root) (window-width . 0.25)))) ;; 확인이 필요하다. ;; (with-eval-after-load \u0026#39;ispell ;; ;; printing a message for every word has a negative performance impact ;; (setq flyspell-issue-message-flag nil) ;; ;; Change dictionary with the input-method ;; (defun change-dict-after-toggle-input (_ _) ;; (ispell-change-dictionary ;; (if (string= current-input-method \u0026#34;korean-hangul\u0026#34;) ;; \u0026#34;ko\u0026#34; ;; nil))) ;; (advice-add \u0026#39;toggle-input-method :after \u0026#39;change-dict-after-toggle-input)) Redefine global-key\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 ;; \u0026#39;C-c d\u0026#39; (global-set-key (kbd \u0026#34;C-c d i\u0026#34;) \u0026#39;define-it-at-point) (global-set-key (kbd \u0026#34;C-c d w\u0026#34;) \u0026#39;define-word-at-point) (global-set-key (kbd \u0026#34;C-c d l\u0026#34;) \u0026#39;lexic-search) (global-set-key (kbd \u0026#34;C-c d s\u0026#34;) \u0026#39;sdcv-search-at-point) (global-set-key (kbd \u0026#34;C-c d e\u0026#34;) \u0026#39;external-dict-dwim) (global-set-key (kbd \u0026#34;C-c d m\u0026#34;) \u0026#39;mw-thesaurus-lookup-dwim) (global-set-key (kbd \u0026#34;C-c d d\u0026#34;) \u0026#39;dictionary-search) ;; \u0026#34;xgo\u0026#34; \u0026#39;google-translate-paragraphs-overlay ;; \u0026#34;xgQ\u0026#34; \u0026#39;google-translate-query-translate-reverse ;; \u0026#34;xgq\u0026#34; \u0026#39;google-translate-query-translate ;; \u0026#34;xgT\u0026#34; \u0026#39;google-translate-at-point-reverse ;; \u0026#34;xgt\u0026#34; \u0026#39;google-translate-at-point Utility # disk-usage # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 (use-package disk-usage :ensure :after evil-collection :defer t) ;; 잘 되지만, 버퍼를 닫으면 ;;;###autoload (defun describe-word (word \u0026amp;optional prefix) \u0026#34;Briefly describe WORD entered by user. With PREFIX argument, show verbose descriptions with hyperlinks.\u0026#34; (interactive \u0026#34;sDescribe word: \\nP\u0026#34;) (shell-command (concat \u0026#34;dict \u0026#34; word (cond ((null prefix) nil) (t \u0026#34; -v\u0026#34;))))) ;;;###autoload (defun describe-word-at-point (\u0026amp;optional prefix) \u0026#34;Briefly describe word at point. With PREFIX argument, show verbose descriptions with hyperlinks.\u0026#34; (interactive \u0026#34;P\u0026#34;) (let ( (word (if (region-active-p) (buffer-substring (region-beginning) (region-end)) (thing-at-point \u0026#39;word))) ) (shell-command (concat \u0026#34;dict \u0026#34; (cond ((null prefix) nil) (t \u0026#34;-f \u0026#34;)) word)))) kimim functions # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 ;; unfill paragraph: the opposite of fill-paragraph (defun kimim/unfill-paragraph-or-region (\u0026amp;optional region) \u0026#34;Takes a multi-line paragraph and makes it into a single line of text.\u0026#34; (interactive (progn (barf-if-buffer-read-only) \u0026#39;(t))) (let ((fill-column (point-max)) ;; This would override `fill-column\u0026#39; if it\u0026#39;s an integer. (emacs-lisp-docstring-fill-column t)) (fill-paragraph nil region))) ;; generate timestamp such as 2016_1031_ for file name (defun kimim/genfile-timestamp() (concat (format-time-string \u0026#34;%Y%m%d\u0026#34;) (char-to-string (+ 65 (random 26))) (char-to-string (+ 65 (random 26))) \u0026#34;_\u0026#34;)) ;; self define functions (defun kimim/imenu-default-goto-function-advice (orig-fun \u0026amp;rest args) (apply orig-fun args) (recenter)) (defun now () (interactive) (insert (shell-command-to-string \u0026#34;date\u0026#34;))) (defun day () \u0026#34;Insert string for today\u0026#39;s date nicely formatted in American style, e.g. Sunday, September 17, 2000.\u0026#34; (interactive) ; permit invocation in minibuffer (insert (format-time-string \u0026#34;%A, %B %e, %Y\u0026#34;))) (defun today () \u0026#34;Insert string for today\u0026#39;s date nicely formatted in American style, e.g. 2000-10-12.\u0026#34; (interactive) ; permit invocation in minibuffer (insert (format-time-string \u0026#34;%Y-%m-%d\u0026#34;))) (defun today-pretty () \u0026#34;Insert string for today\u0026#39;s date nicely formatted in American style, e.g. 2000-10-12.\u0026#34; (interactive) ; permit invocation in minibuffer (insert (format-time-string \u0026#34;%A, %b %d, %Y\u0026#34;))) (defun toyear () \u0026#34;Insert string for today\u0026#39;s date nicely formatted in American style, e.g. 2000.\u0026#34; (interactive) ; permit invocation in minibuffer (insert (format-time-string \u0026#34;%Y\u0026#34;))) (defun get-file-line () \u0026#34;Show (and set kill-ring) current file and line\u0026#34; (interactive) (unless (buffer-file-name) (error \u0026#34;No file for buffer %s\u0026#34; (buffer-name))) (let ((msg (format \u0026#34;%s::%d\u0026#34; (file-truename (buffer-file-name)) (line-number-at-pos)))) (kill-new msg) (message msg))) (defun get-file-link () \u0026#34;Show (and set kill-ring) current file\u0026#34; (interactive) (unless (buffer-file-name) (error \u0026#34;No file for buffer %s\u0026#34; (buffer-name))) (let ((msg (format \u0026#34;file:\\\\\\\\%s\u0026#34; (replace-regexp-in-string \u0026#34;/\u0026#34; \u0026#34;\\\\\\\\\u0026#34; (file-truename (buffer-file-name)))))) (kill-new msg) (message msg))) search-engine : engine-mode # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ;; Set variables for search-engine layer (spacemacs/set-leader-keys \u0026#34;s w s\u0026#34; \u0026#39;engine/search-stack-overflow) (spacemacs/set-leader-keys \u0026#34;s w e\u0026#34; \u0026#39;engine/search-ecosia) (spacemacs/set-leader-keys \u0026#34;s w d\u0026#34; \u0026#39;engine/search-duck-duck-go) (spacemacs/set-leader-keys \u0026#34;s w g\u0026#34; \u0026#39;engine/search-github) (spacemacs/set-leader-keys \u0026#34;s w i\u0026#34; \u0026#39;engine/search-spacemacs-issues) (spacemacs/set-leader-keys \u0026#34;s w M\u0026#34; \u0026#39;engine/search-google-maps) (spacemacs/set-leader-keys \u0026#34;s w b\u0026#34; \u0026#39;engine/search-project-gutenberg) (spacemacs/set-leader-keys \u0026#34;s w a\u0026#34; \u0026#39;engine/search-wolfram-alpha) (spacemacs/set-leader-keys \u0026#34;s w w\u0026#34; \u0026#39;engine/search-wikipedia) (spacemacs/set-leader-keys \u0026#34;s w m\u0026#34; \u0026#39;engine/search-melpa) (add-hook \u0026#39;spacemacs-post-user-config-hook #\u0026#39;engine-mode) ;; (define-key global-map (kbd \u0026#34;C-x /\u0026#34;) \u0026#39;engine-mode-map) conventional-changelog # 사용법을 알야아 쓴다. https://github.com/liuyinz/emacs-conventional-changelog\n1 2 3 4 5 6 7 8 (use-package conventional-changelog :init (with-eval-after-load \u0026#39;magit-tag (transient-append-suffix \u0026#39;magit-tag \u0026#39;(1 0 -1) \u0026#39;(\u0026#34;c\u0026#34; \u0026#34;changelog\u0026#34; conventional-changelog-menu)))) (spacemacs/set-leader-keys \u0026#34;g/\u0026#34; \u0026#39;conventional-changelog-menu) OFF wc-mode : word-count OFF # 1 2 3 4 5 6 7 8 (use-package wc-mode :ensure) (setq wc-modeline-format \u0026#34;[Words: %tw, Chars: %tc]\u0026#34;) ;; (add-hook \u0026#39;org-mode-hook \u0026#39;wc-mode) (defun my/word-count (arg) (interactive \u0026#34;r\u0026#34;) (count-words arg) ) Org-mode Customizations # HUGO Tunning # 사이드 노트 테스트 ox-hugo 관련 추가 설정이다. 매우매우 중요하다. 1 절대 export 태그 넣지 마라! shortcode 내보내기 안된다. This should be set for everything. I like to keep the last modified date, but only consider things to be modified if 12 hours have passed.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 (with-eval-after-load \u0026#39;ox-hugo (setq org-hugo-auto-set-lastmod \u0026#39;t org-hugo-section \u0026#34;notes\u0026#34; org-hugo-suppress-lastmod-period 43200.0 org-hugo-paired-shortcodes \u0026#34;hint details mermaid sidenote\u0026#34; ;; org-hugo-front-matter-format yaml ; toml default ) ;; https://ox-hugo.scripter.co/doc/formatting/ ;; if org-hugo-use-code-for-kbd is non-nil ;; Requires CSS to render the \u0026lt;kbd\u0026gt; tag as something special. ;; eg: ~kbd~ (setq org-hugo-use-code-for-kbd t) ;; https://ox-hugo.scripter.co/doc/linking-numbered-elements/ ;; org-export-dictionary 에 Figure, Table 에 한글 번역을 넣으면 ;; 한글로 바뀌어 export 될 것이다. (setq org-hugo-link-desc-insert-type t) ;; Assume all static files are images for now otherwise this ;; defaults to /ox-hugo/mypicture.png which is ugly (setq org-hugo-default-static-subdirectory-for-externals \u0026#34;imgs\u0026#34;) ;; Override the default `org-hugo-export-creator-string\u0026#39; so that this ;; string is consistent in all ox-hugo tests. (setq org-hugo-export-creator-string \u0026#34;Emacs + Org mode + ox-hugo\u0026#34;) ;; In that normal example of the sidenote, ox-hugo trims the whitespace around ;; the sidenote block. That is configured by customizing the ;; org-hugo-special-block-type-properties variable: (add-to-list \u0026#39;org-hugo-special-block-type-properties \u0026#39;(\u0026#34;sidenote\u0026#34; . (:trim-pre t :trim-post t))) ;; If this property is set to an empty string, this heading will not be auto-inserted. ;; default value is \u0026#39;References\u0026#39; ;; https://ox-hugo.scripter.co/doc/org-cite-citations/ (plist-put org-hugo-citations-plist :bibliography-section-heading \u0026#34;References\u0026#34;) ) ;; export this file on buffer (spacemacs/set-leader-keys \u0026#34;PP\u0026#34; #\u0026#39;org-hugo-export-wim-to-md) org-breadcrumb # [2023-05-18 Thu 16:37] 이거 괜찮네. 내가 필요했던 게 이건데. sticky-header 를 쓰는게 좋지 않겠어?!\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 (setq org-refile-use-outline-path \u0026#39;file) ; default nil (setq org-outline-path-complete-in-steps nil) (defun ndk/heading-title () \u0026#34;Get the heading title.\u0026#34; (save-excursion (if (not (org-at-heading-p)) (org-previous-visible-heading 1)) (org-element-property :title (org-element-at-point)))) (defun ndk/org-breadcrumbs () \u0026#34;Get the chain of headings from the top level down to the current heading.\u0026#34; (let ((breadcrumbs (org-format-outline-path (org-get-outline-path) (1- (frame-width)) nil \u0026#34; \u0026gt; \u0026#34;)) (title (ndk/heading-title))) (if (string-empty-p breadcrumbs) ;; title (propertize (format \u0026#34; * %s\u0026#34; title) \u0026#39;face \u0026#39;org-level-7) ;; (format \u0026#34;%s\u0026#34; breadcrumbs) (propertize (format \u0026#34; * %s\u0026#34; breadcrumbs) \u0026#39;face \u0026#39;org-level-8) ))) (setq header-line-indent-width 2) (defun ndk/set-header-line-format() (setq header-line-format \u0026#39;(:eval (ndk/org-breadcrumbs)))) ;; ;; http://emacsredux.com/blog/2014/04/05/which-function-mode/ ;; (which-function-mode) ;; ;; when editing js file, this feature is very useful ;; (setq-default header-line-format ;; \u0026#39;((which-func-mode (\u0026#34;\u0026#34; which-func-format \u0026#34; \u0026#34;)))) (add-hook \u0026#39;org-mode-hook #\u0026#39;ndk/set-header-line-format) org-attach (built-in) # [2023-05-18 Thu 16:39] I was using org-download but switched to the built-in org-attach in 2022. I use .dir-locals.el to customize org-attach-id-dir if necessary.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 (require \u0026#39;org-attach) (setq org-attach-id-dir \u0026#34;attach\u0026#34;) (setq org-attach-use-inheritance t) ;; Use timestamp as ID and attachment folder. See https://helpdeskheadesk.net/2022-03-13/ ;; (setq org-id-method \u0026#39;ts) ;; (setq org-attach-id-to-path-function-list ;; \u0026#39;(org-attach-id-ts-folder-format ;; org-attach-id-uuid-folder-format)) ;; Shorten the Org timestamp ID ;; (setq org-id-ts-format \u0026#34;%Y%m%dT%H%M%S\u0026#34;) ;; (global-set-key (kbd \u0026#34;\u0026lt;f1\u0026gt;\u0026#34;) ;; (lambda () ;; (interactive) ;; (consult-org-heading nil \u0026#39;(\u0026#34;~/sync/org/workflow/inbox.org\u0026#34;)))) TODO org-capture-goto-link # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ;; /home/junghan/.emacs.tshu/lisp/lang-org.el (defun org-capture-goto-link () (interfative) (let ((file (nth 1 (org-capture-get :target))) (headline (plist-get org-store-link-plist :description)) (link (plist-get org-store-link-plist :link))) (org-capture-put :target (list \u0026#39;file+headline file headline)) (widen) (goto-char (point-min)) (let (case-fold-search) (if (re-search-forward (format org-complex-heading-regexp-format (regexp-quote headline)) nil t) (org-end-of-subtree) (org-capture-put :flag t) (goto-char (point-max)) (or (bolp) (insert \u0026#34;\\n\u0026#34;)) (insert \u0026#34;* TODO \u0026#34; headline \u0026#34;\\n\u0026#34;) (insert \u0026#34;[[\u0026#34; link \u0026#34;]]\\n\u0026#34;) (point))))) org-reverse-datetree # GitHub - akirak/org-reverse-datetree An Annotated Spacemacs - For an org-mode workflow ·\ntshu 에서 가져왔다. capture review format 으로 괜찮은 것 같다. reverse 가 어떤 효과가 있는지 모르겠다만. 정렬을 하면 규칙이 생기니까. 그리고 위에 spacemacs dot 에는 capture examples 이 있다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 ;; (defun jh-org/init-org-reverse-datetree () (use-package org-reverse-datetree :after org :commands (org-datetree-refile) :init (setq-default org-reverse-datetree-level-formats \u0026#39;(\u0026#34;%Y\u0026#34; \u0026#34;%Y-%m %B\u0026#34; \u0026#34;%Y W%W\u0026#34; \u0026#34;%Y-%m-%d %A\u0026#34;)) :config (setq diary-file \u0026#34;~/sync/org/workflow/log.org\u0026#34;) ; calendar (setq org-agenda-bulk-custom-functions \u0026#39;((?R org-datetree-refile))) (defun org-datetree-refile () (interactive) (org-reverse-datetree-refile-to-file org-log-file)) ) (dolist (template `( (\u0026#34;w\u0026#34; \u0026#34;Web\u0026#34; plain (file+function org-inbox-file org-capture-goto-link) \u0026#34;%i\\n%U\\n%T\\n%a\\n\u0026#34; :empty-lines 1 :immediate-finish t) (\u0026#34;d\u0026#34; \u0026#34;Memo on Daylog\u0026#34; entry (file+function org-log-file org-reverse-datetree-goto-date-in-file) \u0026#34;\\n* %\u0026lt;%H:%M\u0026gt; - %?\\n%T\\n%a\\n\u0026#34;) ; :prepend t (\u0026#34;D\u0026#34; \u0026#34;Clocking on Daylog (clock-in)\u0026#34; entry (file+function org-log-file org-reverse-datetree-goto-date-in-file) \u0026#34;\\n* %\u0026lt;%H:%M\u0026gt; - %?\\n%a\\n\u0026#34; :clock-in t :clock-resume t) ; :prepend t ;; \u0026#34;* %?\\n\u0026#34; :clock-in t :clock-resume t :empty-lines 1) (\u0026#34;c\u0026#34; \u0026#34;Contacts\u0026#34; entry (file org-contacts-files) \u0026#34;* %(org-contacts-template-name) :PROPERTIES: :GITHUB: :EMAIL: :URL: :END:\\n%U\\n%T\\n%a\\n\u0026#34;) (\u0026#34;R\u0026#34; \u0026#34;Review\u0026#34;) (\u0026#34;Ry\u0026#34; \u0026#34;Yesterday\u0026#34; plain (file+function org-log-file (lambda () (org-reverse-datetree-goto-date-in-file (time-add (current-time) (days-to-time -1))))) \u0026#34;%?\\n%i\\n\u0026#34; :immediate-finish t :jump-to-captured t) (\u0026#34;Rt\u0026#34; \u0026#34;Today\u0026#34; plain (file+function org-log-file (lambda () (org-reverse-datetree-goto-date-in-file))) \u0026#34;%?\\n%i\\n\u0026#34; :immediate-finish t :jump-to-captured t) (\u0026#34;Rl\u0026#34; \u0026#34;Last Week\u0026#34; plain (file+function org-log-file (lambda () (let ((org-reverse-datetree-level-formats (butlast org-reverse-datetree-level-formats))) (org-reverse-datetree-goto-date-in-file (time-add (current-time) (days-to-time -7)))))) \u0026#34;%?\\n%i\\n\u0026#34; :immediate-finish t :jump-to-captured t) (\u0026#34;Rw\u0026#34; \u0026#34;This Week\u0026#34; plain (file+function org-log-file (lambda () (let ((org-reverse-datetree-level-formats (butlast org-reverse-datetree-level-formats))) (org-reverse-datetree-goto-date-in-file)))) \u0026#34;%?\\n%i\\n\u0026#34; :immediate-finish t :jump-to-captured t) (\u0026#34;RD\u0026#34; \u0026#34;Select a Date\u0026#34; plain (file+function org-log-file org-reverse-datetree-goto-read-date-in-file) \u0026#34;%?\\n%i\\n\u0026#34; :immediate-finish t :jump-to-captured t) (\u0026#34;RW\u0026#34; \u0026#34;Select a Week\u0026#34; plain (file+function org-log-file (lambda () (let ((org-reverse-datetree-level-formats (butlast org-reverse-datetree-level-formats))) (org-reverse-datetree-goto-read-date-in-file)))) \u0026#34;%?\\n%i\\n\u0026#34; :immediate-finish t :jump-to-captured t) (\u0026#34;RM\u0026#34; \u0026#34;Select a Month\u0026#34; plain (file+function org-log-file (lambda () (let ((org-reverse-datetree-level-formats (butlast org-reverse-datetree-level-formats 2))) (org-reverse-datetree-goto-read-date-in-file)))) \u0026#34;%?\\n%i\\n\u0026#34; :immediate-finish t :jump-to-captured t) (\u0026#34;RY\u0026#34; \u0026#34;Select a Year\u0026#34; plain (file+function org-log-file (lambda () (let ((org-reverse-datetree-level-formats (butlast org-reverse-datetree-level-formats 3))) (org-reverse-datetree-goto-read-date-in-file)))) \u0026#34;%?\\n%i\\n\u0026#34; :immediate-finish t :jump-to-captured t))) (add-to-list \u0026#39;org-capture-templates template) ) fixed-page-mode # [2023-06-09 Fri 03:25] A page-based text editing/note taking/concept thinking Emacs minor mode. Presents buffer\u0026rsquo;s content as pages of predefined number of lines (50 by default). It is an analog of pages in a notebook. It can be used with org mode or any other text mode. GitHub - emacsmirror/fixed-page-mode: A fixed page length\u0026hellip;\n매우 유용하다. 애용하자.\n1 2 3 4 5 6 7 8 (use-package fixed-page-mode :ensure :init (setq fixed-page-length 100) ) (global-set-key (kbd \u0026#34;C-x n n\u0026#34;) #\u0026#39;fixed-page-mode) (spacemacs/set-leader-keys \u0026#34;nn\u0026#34; #\u0026#39;fixed-page-mode) Reveal export # By default reveal is rather nice, there are just a few tweaks that I consider a good idea. /home/junghan/sync/man/dotsamples/doom/tecosaur-dot-doom/config.org\n1 2 3 (setq org-re-reveal-theme \u0026#34;white\u0026#34; org-re-reveal-transition \u0026#34;slide\u0026#34; org-re-reveal-plugins \u0026#39;(markdown notes math search zoom)) Startup Layout and Workspace # LAYOUT-WORKSPACE \u0026ndash; SPC l layout # 레이아웃을 잡아놓고 사용하자. 일단 테스트부터 하자.\n기본 레이아웃 nothing @Org(o), @Notmuch(n), @Spacemacs(e) 추가 레이아웃 @elFeed(f), @Python(p) \u0026hellip; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 ;; ;;;;; Load Permachine Layout ;; (my-define-custom-layout-per-machine) ; permachine.el (spacemacs|define-custom-layout \u0026#34;@Agenda\u0026#34; :binding \u0026#34;a\u0026#34; :body (spacemacs/window-split-single-column) (find-file \u0026#34;~/sync/org/workflow/inbox.org\u0026#34;) ;; (spacemacs/toggle-current-window-dedication) (split-window-right-and-focus) (find-file \u0026#34;~/sync/org/workflow/project.org\u0026#34;) ;; (spacemacs/toggle-current-window-dedication) (split-window-right-and-focus) (org-agenda nil \u0026#34; \u0026#34;) (spacemacs/toggle-current-window-dedication) ) (spacemacs|define-custom-layout \u0026#34;@Roam\u0026#34; :binding \u0026#34;r\u0026#34; :body ;; (find-file \u0026#34;~/sync/org/roam\u0026#34;) (spacemacs/window-split-single-column) (find-file \u0026#34;~/sync/org/roam/_index.org\u0026#34;) ; Blog Index (split-window-right-and-focus) (org-roam-node-random) ;; (dired-sidebar-toggle-sidebar) (org-roam-buffer-toggle) ) (spacemacs|define-custom-layout \u0026#34;@Blog\u0026#34; :binding \u0026#34;b\u0026#34; :body (find-file \u0026#34;~/git/blog/config.yaml\u0026#34;) (spacemacs/window-split-single-column) ;; (dired-sidebar-toggle-sidebar) ;; hugo prodigy ) (spacemacs|define-custom-layout \u0026#34;@Feed\u0026#34; :binding \u0026#34;f\u0026#34; :body (elfeed) (spacemacs/window-split-single-column) ;; (split-window-below-and-focus) ;; (find-file \u0026#34;~/sync/org/elfeed/elfeed.org\u0026#34;) ;; (pocket-reader) ) ;; (spacemacs|define-custom-layout \u0026#34;@Python\u0026#34; ;; :binding \u0026#34;p\u0026#34; ;; :body ;; (find-file \u0026#34;*path to upper left file*\u0026#34;) ;; (split-window-right) ;; Create the right side but don\u0026#39;t move focus ;; (split-window-below-and-focus) ;; Split the left side into two and move focus ;; (find-file \u0026#34;*path to lower left file*\u0026#34;) ;; (winum-select-window-3) ;; Go to the top right window ;; (find-file \u0026#34;*path to upper right file*\u0026#34;) ;; (split-window-below-and-focus) ;; Split the right side into two and move focus ;; (find-file \u0026#34;*path to lower right file*\u0026#34;) ;; (winum-select-window-1) ;; Move focus back to the first window (optional) ;; ) TODO Macros # Mirror buffer # 1 2 3 ;; (defalias \u0026#39;ash/mirror-buffer ;; (kmacro \u0026#34;C-x 1 C-x 3 C-x o\u0026#34;)) ;; (general-define-key \u0026#34;s-b\u0026#34; \u0026#39;ash/mirror-buffer) save-macro # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ;; Save a recorded macro with a name (defun save-macro (name) \u0026#34;Takes a name as argument and save the last defined macro under this name at the end of your .emacs\u0026#34; (interactive \u0026#34;SName of the macro :\u0026#34;) ; ask for the name of the ; macro (kmacro-name-last-macro name) ; use this name for ; the macro (find-file user-init-file) ; open ~/.emacs ; or other user init file (goto-char (point-max)) ; go to ; the end of the .emacs (newline) ; insert a newline (insert-kbd-macro name) ; copy the macro (newline) ; insert a newline (switch-to-buffer nil)) ; return to the initial buffer Backports Emacs 29 Plus # 1 2 3 4 5 6 7 8 ;;;; Backports Emacs 29 Plus ;; HACK: Load Emacs 29 back ports for earlier Emacs versions. Note that I do ;; only back port a very small number of the functions/variables that I use at ;; early stage from Emacs29+ to be compatible with Emacs 28.2. For any Emacs ;; version less than 29, (if (\u0026lt; emacs-major-version 29) (require \u0026#39;my-backports-29)) End donotmodify # 1 ) Local Variables ARCHIVE # "},{"id":36,"href":"/terms/evil-mode/","title":"Evil-mode","section":"Terms","content":" evil-mode 편집 방법 "},{"id":37,"href":"/contact/","title":"Contact","section":"Junghanacs's Home","content":"You can contact me at the following addresses/services.\nService Username Note email junghanacs@gmail.com Remove +spam mastodon @junghanacs Slowly moving away from Twitter to Mastodon github junghanacs telegram junghanacs "}]